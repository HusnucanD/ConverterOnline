{
    "categories": [
    {
      "id": "c1",
      "name": "acceleration",
      "logo": "🚀",
      "description": "Acceleration is the vector rate of change of velocity with respect to time (a = dv/dt).  When an object’s speed, direction, or both are altered, it experiences acceleration, measured in metres per second squared (m s‑2) in the International System of Units (SI).  The concept underpins Newton’s second law, F = ma, which quantifies how forces produce motion.  Constant linear acceleration solutions (e.g., s = ½at²) simplify problems ranging from free‑fall to launching spacecraft.  In rotational systems, angular acceleration (α) and the moment of inertia (I) replace linear terms to give the rotational analogue τ = Iα.  Engineers monitor acceleration with MEMS accelerometers in smartphones, aircraft black boxes, and seismic probes; data drive active suspension systems, inertial navigation, and structural‑health monitoring.  Precise calibration often relies on laser interferometry or gravimetric drop towers that compare device readings against Earth’s local gravitational acceleration g ≈ 9.80665 m s‑2.  Beyond mechanics, particle physicists describe charged‑particle trajectories in synchrotrons by specifying centripetal acceleration imposed by magnetic fields, while cosmologists discuss the accelerating expansion of the Universe through the parameter q₀.  Mastery of acceleration enables safe vehicle design, efficient robotics, and the prediction of dynamic loads in buildings and bridges subject to wind or earthquakes."
    },
    {
      "id": "c2",
      "name": "area",
      "logo": "⛰️",
      "description": "Area quantifies the two‑dimensional extent of a surface and serves as a bridge between pure geometry and applied sciences.  The SI coherent derived unit is the square metre (m²), but everyday discourse extends from square millimetres on an integrated‑circuit die to square kilometres of farmland.  Classical formulas—πr² for a circle, bh/2 for a triangle, or multiple‑segment polygon summations—derive from Euclid, yet calculus generalises them via double integrals ∬ dA over curved domains and Green’s Theorem for planar regions.  In engineering, accurate area computation determines heat‑transfer rates (Q = hAΔT), photovoltaic output (P = ηAI), and structural stress (σ = F/A).  GIS analysts mosaic raster tiles to estimate forest‑canopy area, while material scientists use digital image processing to measure grain cross‑sections that influence alloy toughness.  The notion extends to non‑Euclidean manifolds: on Earth’s curved surface, geodesic methods such as the Gauss–Bonnet formula are employed for land‑surveying and geolocation, whereas general relativity interprets event‑horizon area as a measure of black‑hole entropy.  Numerical quadrature and Monte‑Carlo sampling yield areas for irregular shapes where analytic solutions fail.  Whether sizing a semiconductor wafer or calculating paint needed to coat a habitat module, area remains a foundational scalar linking length to higher‑order quantities like volume and flux."
    },
    {
      "id": "c3",
      "name": "capacitance",
      "logo": "🪫",
      "description": "Capacitance is the ability of a system to store electric charge per unit voltage, formally defined as C = Q/ΔV and measured in farads (F).  A one‑farad capacitor stores one coulomb when a potential difference of one volt is applied.  Physically it arises from separated conductors—classic parallel‑plate geometry yields C = ε₀εrA/d, where εr denotes the relative permittivity of the dielectric, A the plate area, and d their separation.  Beyond discrete components, distributed capacitance manifests between PCB traces, telephone lines, and even within coaxial or microstrip transmission lines, affecting signal propagation speed and impedance.  Dynamic circuits analyse capacitors through time‑domain relations i = C dv/dt, giving rise to exponential charge/discharge curves that underpin RC filters, integrators, and oscillators.  Energy stored equals ½CV², critical for camera flashes, pulsed‑power lasers, and defibrillators.  In microelectronics, gate capacitance of MOSFETs dictates switching energy and hence CPU power consumption; ongoing research reduces effective capacitance via high‑κ dielectrics and 3‑D geometries.  Electrochemical super‑capacitors push capacitances thousands of times greater than electrolytics using porous carbon electrodes and ionic double layers, bridging the gap between batteries and conventional capacitors.  Measurement techniques range from impedance bridges and vector network analysers to quartz‑crystal microbalance methods that infer picofarad changes caused by biomolecular adsorption."
    },
    {
      "id": "c4",
      "name": "charge",
      "logo": "⚡",
      "description": "Electric charge is a fundamental conserved property underlying electromagnetic interaction.  Quantised in elementary charges ±e ≈ 1.602 176 634×10‑19 C, it determines how particles generate and respond to electric and magnetic fields as codified by Maxwell’s equations.  In macroscopic circuits, charge flow constitutes electric current I = dQ/dt, while static charge distributions give rise to Coulomb forces F = kQ₁Q₂/r².  Charge conservation is inviolable: the algebraic sum of charge in a closed system remains constant, informing Kirchhoff’s current law for node analysis.  Materials classify as conductors, insulators, or semiconductors according to how mobile charges respond to an applied field; doping modifies carrier concentration in silicon to craft diodes and transistors.  Ionisation chambers, Faraday cups, and modern single‑electron transistors (using Coulomb blockade) measure charge from coulombs down to individual electrons.  In chemistry, redox reactions track electron transfer, relating charge to Avogadro’s constant via Faraday’s constant F ≈ 96485 C mol‑1.  Astrophysicists debate net cosmic charge balance, while plasma physicists model Debye shielding where charge separation is transient.  Charge symmetry guides particle‑physics conservation laws (e.g., charge conjugation C‑parity), and anomalies illuminate physics beyond the Standard Model.  On an everyday scale, static‑electricity phenomena—from lightning strokes transferring coulomb‑level charges to triboelectric charging of hair—demonstrate charge’s pervasive influence."
    },
    {
      "id": "c5",
      "name": "conductance",
      "logo": "🔌",
      "description": "Conductance (G) quantifies how readily a component or material permits electric current when a voltage is applied, serving as the reciprocal of resistance: G = 1/R.  Its SI unit is the siemens (S), formerly the mho (ohm spelled backwards), evoking the intuitive relation I = GV under Ohm’s law.  At the microscopic level, conductance stems from charge‑carrier density and mobility; Drude’s model links electrical conductivity σ to electron concentration n, charge q, and mean free time τ by σ = nq²τ/m.  Scaling to macroscopic geometry, G = σA/ℓ for a uniform conductor of cross‑section A and length ℓ.  Frequency‑dependent complex conductance under alternating current embeds both resistive and susceptive components, enabling admittance (Y = G + jB) analysis of transmission lines and resonators.  Quantum conductance emerges in mesoscopic physics where conductance becomes quantised in units of G₀ = 2e²/h ≈ 77.5 μS as electrons traverse ballistic channels or quantum point contacts, underpinning metrological resistance standards.  In biology, ion‑channel conductance regulates nervous‑system signalling, modelled via Hodgkin–Huxley equations.  Engineers manipulate conductance through temperature control (superconductivity drops resistance to zero), illumination (photoconductors), or mechanical strain (piezoresistive sensors).  Reliable measurement employs bridge circuits, four‑terminal sensing, and impedance analysers to characterise materials from copper busbars to graphene nanoribbons."
    },
    {
      "id": "c6",
      "name": "current",
      "logo": "🌊",
      "description": "Electric current represents the ordered motion of electric charge through a conductor or space, formally defined as I = dQ/dt and measured in amperes (A).  One ampere corresponds to a charge flow of exactly 1 coulomb per second, a value now fixed via the elementary‑charge definition of the ampere adopted in the 2019 SI revision.  Direct current (DC) maintains unidirectional flow, powering electronics from batteries, while alternating current (AC) reverses polarity periodically, enabling efficient long‑distance transmission because transformers conveniently step voltages up or down.  Microscopic conduction involves drift of electrons in metals, ionic migration in electrolytes, or hole transport in p‑type semiconductors.  Kirchhoff’s current law, derived from charge conservation, states that algebraic sums of currents at a node equal zero, simplifying complex‑network analysis.  Magnetic effects follow Ampère’s law and the Biot–Savart integral; currents give rise to fields exploited in motors, MRI scanners, and inductors.  Precise current generation uses single‑electron pumps, whereas Hall‑effect sensors, shunt resistors, and Rogowski coils measure currents spanning 18 orders of magnitude—from femtoampere leakage in biosensors to mega‑ampere fusion‑tokamak pulses.  Safety standards limit human exposure to milliamperes, and power‑delivery systems monitor fault currents to trigger breakers.  Current’s interplay with voltage defines electrical power (P = VI), crucial for energy budgeting in grids and microcontrollers alike."
    },
    {
      "id": "c7",
      "name": "data",
      "logo": "💾",
      "description": "In physical‑quantity terms, the Data category encompasses measures of digital information content—bits, bytes, and higher prefixes—that underpin computing, communication, and storage.  The fundamental unit, the bit (b), embodies a binary choice, while an octet or byte (B) contains eight bits by convention.  Information theory introduced by Claude Shannon links data to entropy: the amount of surprise in a message stream.  Prefix distinctions matter: SI prefixes (kilo = 10³) coexist with binary prefixes (kibi = 2¹⁰) in memory addressing, creating subtle discrepancies (a 1 TB disk ≈ 0.909 TiB).  Data volumes scale breathtakingly: genomic sequencing produces terabytes per run, CERN’s Large Hadron Collider writes petabytes annually, and global data‑sphere estimates exceed zettabytes.  Compression algorithms exploit redundancy to reduce data size without loss (DEFLATE, LZW) or with acceptable degradation (JPEG, H.265).  Cryptographic hashes transform arbitrary‑length data into fixed‑size digests to secure integrity, while error‑correcting codes (Reed–Solomon, LDPC) add redundancy to safeguard bits against noise.  At the hardware layer, NAND flash stores electrons in floating‑gate transistors, whereas magnetic disks orient domains to represent ones and zeros.  Emerging DNA storage encodes data in nucleotide sequences promising exabyte‑per‑gram densities.  Data metrology ensures interoperability—IEC 80000-13 standardises symbols, and National Metrology Institutes calibrate oscilloscopes used for bit‑error‑rate testing of high‑speed serial links."
    },
    {
      "id": "c8",
      "name": "density",
      "logo": "🧊",
      "description": "Density (ρ) expresses mass per unit volume with the SI coherent derived unit kilogram per cubic metre (kg m‑3).  A scalar intrinsic to materials, it influences buoyancy according to Archimedes’ principle, pressure variation in fluids via the hydrostatic relation ΔP = ρgΔh, and momentum in Newton’s second law for control volumes.  Thermodynamic state equations (e.g., ideal gas law ρ = P/RT) tie density to temperature and pressure, while phase transitions reveal anomalies—water reaches maximum density at 3.98 °C, a phenomenon stabilising aquatic life in cold climates.  Engineers use density to size aircraft fuel loads, design flotation devices, and model concrete curing where aggregate packing dictates compressive strength.  Geophysicists infer interior Earth composition from seismic waves and gravitational anomalies that map density contrasts; astro‑physicists estimate stellar core conditions from mean density.  Laboratory determination employs hydrometers, pycnometers, oscillating‑tube densitometers, and X‑ray computed tomography for porous media.  Bulk density in powders governs tablet mass in pharmaceuticals and hopper flow in agriculture.  Reduced density metals such as aluminium lower vehicle weight, enhancing fuel economy.  In additive manufacturing, part density signals porosity and dictates post‑processing heat‑treatment schedules.  Computational fluid dynamics codes discretise continuity equations—∂ρ/∂t + ∇·(ρv) = 0—to conserve mass across mesh cells."
    },
    {
      "id": "c9",
      "name": "energy",
      "logo": "☀️",
      "description": "Energy is the scalar capacity of a system to do work or supply heat, conserved in all physical processes by Noether’s theorem linking it to temporal symmetry.  The SI unit is the joule (J), equivalent to one newton‑metre, but practical domains also use electronvolt, kilowatt‑hour, calorie, or BTU.  Mechanical energy splits into kinetic (½mv²) and potential (mgh, ½kx²) forms, while thermodynamics tracks internal energy U and enthalpy H.  Quantum mechanics introduces discrete energy levels with Planck’s relation E = hν, central to spectroscopy and semiconductor band design.  Relativity’s E = mc² couples mass and energy, explaining nuclear fission/fusion where binding‑energy differences release MeV per nucleon, powering reactors and stars.  In electrical engineering, energy in reactive elements is ½CV² (capacitors) and ½LI² (inductors), guiding snubber design.  Chemical energy stored in molecular bonds fuels metabolism; ATP hydrolysis yields ≈ 50 kJ mol‑1 driving biosynthesis.  Global energy economics measure petajoules of primary energy (oil, gas, renewables), while battery designers quote gravimetric energy density (Wh kg‑1).  Metrological traceability realises the joule via electrical substitution calorimetry and Kibble balance links to Planck’s constant.  Lifecycle assessments quantify embodied energy of products to reduce carbon footprints.  In data centres, energy‑proportional computing aims for pJ per bit, minimising EDP (energy–delay product)."
    },
    {
      "id": "c10",
      "name": "flow",
      "logo": "💧",
      "description": "Flow, in this context, refers to volumetric or mass flow rate—the quantity of fluid passing through a cross‑section per unit time.  Volumetric flow (Q) units include cubic metres per second (m³ s‑1) or litres per minute, while mass flow (ṁ) uses kilograms per second.  Continuity dictates Q = A v̄ for incompressible flow where A is area and v̄ average velocity.  Engineers evaluate flow with Bernoulli’s equation, Darcy–Weisbach pressure‑loss models, and Navier–Stokes CFD simulations for complex turbulence.  Devices range from simple orifice plates, Venturi tubes, and rotameters to Coriolis meters that directly sense mass flow through oscillation phase shifts.  Ultrasonic transit‑time meters exploit sound‑speed differentials, whereas electromagnetic meters apply Faraday’s law to conductive liquids.  Accurate flow control regulates chemical‑plant reactors, HVAC comfort levels, fuel injection in engines, and IV drips in healthcare.  Environmental monitoring uses acoustic Doppler current profilers to gauge river discharge critical for flood forecasting.  Standards bodies like ISO 5167 define differential‑pressure flow‑meter geometries, and custody‑transfer measurements in pipelines adhere to OIML R117.  Microfluidics manipulates nanolitre‑scale flow in lab‑on‑chip devices, applying Hagen–Poiseuille law for laminar regimes (Re ≪ 2000).  Proper understanding of flow ensures efficiency, safety, and sustainability across water, air, oil, and gas networks."
    },
    {
      "id": "c11",
      "name": "force",
      "logo": "👊",
      "description": "Force is the vector interaction that changes an object’s momentum according to Newton’s second law, F = ma, with the SI unit newton (N).  Contact forces (normal, friction, tension) arise from electromagnetic interactions at the atomic scale, while field forces such as gravity (Fg = GMm/r²) and electromagnetism act at a distance.  The superposition principle lets analysts decompose complex loadings into simpler components for equilibrium summations ΣF = 0 in statics.  Work done by a force is the path integral W = ∫F·ds, linking force to energy.  Rotational analogues include torque τ = r×F and bending moments vital for beam design (M = σI/c).  Measurement tools span spring scales (Hooke’s law), strain‑gauged load cells, piezoelectric crystals for dynamic impact, and atomic‑force microscopes probing piconewton interactions in biomolecules.  In structural engineering, load combinations (dead, live, wind, seismic) test safety factors per Eurocode and ASCE standards.  Aerodynamic forces—lift, drag, thrust—define aircraft performance via dimensionless coefficients and wind‑tunnel calibration.  Planetary probes employ gravitational‑assist manoeuvres exploiting force exchange with celestial bodies.  Quantum chromodynamics describes gluon‑mediated strong force, while electroweak theory unifies weak nuclear and electromagnetic forces at high energy.  Continuous mastery of force drives innovations from haptic feedback actuators to large‑hadron‑collider magnet alignment."
    },
    {
      "id": "c12",
      "name": "frequency",
      "logo": "📶",
      "description": "Frequency quantifies how often a periodic event repeats per unit time, measured in hertz (Hz), equivalent to cycles per second.  Wave phenomena—sound, light, radio—relate frequency to wavelength λ via v = fλ, where v is phase velocity.  In electronics, frequency dictates reactance: X_C = 1/(2πfC) for capacitors and X_L = 2πfL for inductors, forming the basis for filters, resonant circuits, and impedance matching.  Digital systems rely on clock frequency to sequence operations; Moore’s Law historically paralleled GHz increases until thermal limits shifted emphasis to parallelism.  The SI second is defined by the hyperfine transition frequency of caesium‑133 (9 192 631 770 Hz), giving atomic clocks accuracies better than one part in 10¹⁵.  Gravitational‑wave observatories detect kilohertz‑band spacetime ripples, whereas radio astronomers survey megahertz to terahertz spectra capturing cosmic microwave background anisotropies.  In mechanics, resonant frequencies identify structural health; accelerometer data processed through FFT exposes bearing faults at specific harmonics.  Medical diagnostics exploit frequency: Doppler ultrasound measures blood flow, and EEG electrodes record brainwave bands (alpha 8–12 Hz).  Audio production uses equaliser bands to shape tonal balance, while 5G telecom employs millimetre‑wave frequencies above 24 GHz for high bandwidth.  Standards bodies (ITU, IEC) regulate frequency allocations to mitigate interference and ensure global interoperability."
    },
    {
      "id": "c13",
      "name": "illuminance",
      "logo": "🔆",
      "description": "Illuminance (E_v) specifies the luminous flux incident on a surface per unit area and is expressed in lux (lx), where 1 lx = 1 lm m‑2.  Unlike radiometric irradiance, illuminance weights optical power by the photopic luminous‑efficiency function V(λ), representing the average human eye’s daylight sensitivity peaking at 555 nm.  Designers use illuminance targets—≥ 300 lx for office tasks, 50 lx for corridors—set by standards such as ISO 8995 and EN 12464 to balance visual comfort and energy consumption.  Measurement employs calibrated photometers with cosine‑corrected sensors to mimic Lambertian reception.  HDR imaging pipelines capture scene illuminance for realistic rendering via tone mapping.  In daylighting analysis, daylight factor (DF = E_in/E_out × 100 %) links indoor illuminance to external hemispherical illuminance under overcast skies, informing window sizing.  Agricultural greenhouses regulate photosynthetically active photon flux density (PPFD) rather than lux, yet illuminance serves as a quick proxy.  Smart‑city lighting adapts LED street‑lamp output in real time using illuminance sensors to curb light pollution.  Astronomers adopt natural skyscale: pristine night skies measure ~0.25 lx under full moon, whereas cloud‑covered urban skyglow can exceed 5 lx, disrupting circadian rhythms.  Architectural photogrammetry converts illuminance grids into luminance false‑colour maps that reveal glare sources and non‑uniformities impacting occupant wellbeing."
    },
    {
      "id": "c14",
      "name": "infoRate",
      "logo": "📡",
      "description": "Information rate (sometimes called data‑rate or bit‑rate) quantifies how much digital information passes a point per unit time and typically uses units of bits per second (bit/s) or multiples such as Mbps and Gbps.  Shannon’s channel‑capacity theorem establishes a theoretical upper bound C = B log₂(1 + S/N) for an additive white Gaussian noise channel of bandwidth B and signal‑to‑noise ratio S/N, guiding modem design from dial‑up to fibre optics.  In practical systems, gross bit‑rate includes payload, framing, error‑correction overhead, and coding gain; net throughput thus depends on protocol efficiency (e.g., TCP/IP windowing, 8b/10b line coding).  Spectral efficiency, measured in bit/s/Hz, compares modulation schemes: 64‑QAM carries six bits per symbol, while OFDM aggregates many narrow carriers to mitigate multipath fading in Wi‑Fi and 5G NR.  In storage, sustained transfer rate differs from interface signalling speed because of seek latency and queuing.  High‑frequency trading demands nanosecond‑scale latency, prompting microwave links trading capacity for propagation delays shorter than fibre.  Data‑compression codecs (H.266, AVIF) lower required information rate for given subjective quality, crucial for streaming services constrained by last‑mile bandwidth.  Quantum information rate counters eavesdropping via photon‑counting, though channel loss imposes distance‑rate trade‑offs addressed by entanglement swapping.  Capacity planning relies on Erlang theory and queuing models to ensure networks meet SLA throughput under bursty traffic."
    },
    {
      "id": "c15",
      "name": "length",
      "logo": "📏",
      "description": "Length measures the one‑dimensional extent of objects or the distance between points.  The SI base unit, the metre, is defined since 1983 as the distance light travels in vacuum during 1/299 792 458 of a second, anchoring length to the invariant speed of light c.  Historical standards progressed from Earth meridian fractions, platinum‑iridium metre bars, and krypton‑86 wavelengths to today’s optical‑frequency combs locked to cesium clocks achieving parts‑in‑10¹¹ accuracy over kilometre baselines.  Sub‑atomic length scales employ femtometre units in nuclear physics, while astronomers use light‑years and parsecs (~3.26 ly) for interstellar separations.  Engineering drawings apply tolerances down to micrometres, verified by coordinate‑measuring machines and laser interferometers.  GPS trilateration calculates receiver position by measuring pseudorange lengths from satellites, incorporating relativistic corrections.  In mathematics, length generalises to arc length ∫√((dx/dt)²+(dy/dt)²)dt, geodesics on curved manifolds, and abstract norms in vector spaces.  Fiber‑optic delay lines exploit length‑dependent propagation to synchronise signals.  Length contraction in special relativity reveals observer‑dependent nature at relativistic velocities.  Cultural units such as foot or cubit persist in aviation and construction, necessitating rigorous conversion factors.  Metrology chains compare gauge blocks through wringing, while additive‑manufacturing calibration uses length artefacts to compensate printer shrinkage and warping."
    },
    {
      "id": "c16",
      "name": "luminousFlux",
      "logo": "💡",
      "description": "Luminous flux (Φ_v) characterises the perceived power of light emitted by a source, weighted by the photopic sensitivity curve, with the SI unit lumen (lm).  By definition, a monochromatic 555 nm source radiating 1/683 W of optical power produces exactly one lumen.  Total flux helps designers compare lamp brightness regardless of directional distribution; efficacy η = Φ_v/P_e (lm/W) gauges how efficiently electrical power converts into visible light—modern LEDs exceed 200 lm/W, dwarfing incandescent ~15 lm/W.  Photometric laboratories integrate sphere measurements to capture entire flux, correcting for spectral mismatch between photometer and V(λ).  Flux partitions into beam lumens for spotlights versus spill lumens contributing to glare; lighting software (IES TM‑30, AGi32) processes IES photometric files where flux distribution across 4π steradians informs room‑cavity ratios.  Plant‑growth lighting shifts to photosynthetic photon flux (PPF) in μmol s‑1, yet Φ_v guides human‑centric lighting.  The lumen method sizes luminaires: total lumens × coefficient of utilisation × maintenance factor divided by target illuminance yields required fittings.  Movie projectors specify luminous flux to meet SMPTE screen brightness.  Emergency‑lighting codes require minimum flux into escape routes after mains failure.  Flux maintenance testing (L70, B50) predicts when LED output drops 30 %, affecting warranty claims.  Luminous flux thus integrates optics, vision science, and energy efficiency policies."
    },
    {
      "id": "c17",
      "name": "magneticFlux",
      "logo": "🧲",
      "description": "Magnetic flux (Φ_B) measures the total magnetic field (B‑field) passing through a surface, mathematically Φ_B = ∬_S B·dA.  Its SI unit is the weber (Wb), equal to volt‑seconds, linking time‑varying flux to induced electromotive force via Faraday’s law ε = −dΦ_B/dt, cornerstone of generator technology.  In transformers, alternating flux couples primary and secondary windings, while core saturation limits maximum permissible flux density.  Superconducting quantum‑interference devices (SQUIDs) detect flux changes of 10‑15 Wb, enabling magneto‑encephalography.  Magnetic recording stores information by modulating flux on ferromagnetic media; write heads supply localised B‑fields switching grain magnetisation.  Flux quantisation in superconductors sets Φ₀ = h/2e ≈ 2.07 ×10‑15 Wb, underpinning Josephson voltage standards.  Geophysicists map Earth’s core dynamics by integrating satellite B‑field data to estimate mantle flux patches sustaining the geomagnetic field.  Plasma‑physics flux surfaces describe tokamak confinement, while solar physicists monitor magnetic‑flux ropes preceding coronal mass ejections.  Numerical electromagnetics uses finite‑element meshes to compute flux linkage and inductance L = NΦ/I.  Industrial hysteresisgraph testers measure B‑H loops, plotting flux density versus magnetic field to characterise steel grades.  Ensuring adequate magnetic flux paths while minimising leakage optimises electric‑machine efficiency and electromagnetic‑compatibility compliance."
    },
    {
      "id": "c18",
      "name": "magneticFluxDensity",
      "logo": "🌀",
      "description": "Magnetic flux density, or magnetic induction (symbol B), represents magnetic flux per unit area (B = Φ/S) and conveys the strength and orientation of a magnetic field.  The SI unit tesla (T) equals one weber per square metre.  Lorentz force F = q(v×B) links B directly to observable motion of charged particles, while Ampère’s law with Maxwell’s correction ∇×B = μ₀(J + ε₀∂E/∂t) relates it to currents and changing electric fields.  In materials B and magnetic‑field strength H obey B = μ₀(H + M) or B = μ₀μ_rH for linear media, where μ_r is relative permeability.  Ferromagnetic cores channel high B levels (>1 T) to miniaturise inductors, whereas superconductors maintain zero internal B (Meissner effect).  Measurement spans Hall‑effect probes for gauss‑level fields, fluxgate and optically pumped magnetometers for geophysical surveys, and nuclear magnetic resonance gyroscopes achieving pico‑tesla sensitivity.  MRI scanners generate uniform 1.5–7 T fields for human imaging; research magnets exceed 45 T using hybrid resistive–superconducting technology.  Magnetic flux density governs motor torque τ = kΦ_i I and loudspeaker efficiency, while magnetic levitation trains exploit B‑field gradients for lift and guidance.  Electromagnetic compatibility requires that electronic devices endure specified B‑field immunity.  Understanding B at all scales—from interstellar μG fields shaping spiral galaxies to tiny mT patterns of credit‑card stripes—remains pivotal in science and engineering."
    },
    {
      "id": "c19",
      "name": "mass",
      "logo": "🪨",
      "description": "Mass quantifies the amount of matter and its resistance to acceleration (inertial mass) and source of gravitational attraction (gravitational mass), experimentally equivalent to 1 × 10‑15 precision.  The SI base unit kilogram (kg) transitioned in 2019 from an artefact to a definition via fixed numerical value of Planck’s constant (h).  Realisation employs Kibble balances comparing mechanical to electrical power using Josephson voltage and quantum‑Hall resistance, achieving micro‑gram uncertainties.  In special relativity, rest mass combines with energy through E = mc², underpinning nuclear binding energy and particle‑antiparticle annihilation.  In cosmology, missing mass inferred from galactic rotation curves leads to dark‑matter hypotheses.  Industrial weighing utilises load cells calibrated against national mass standards, whereas analytical microbalances detect sub‑microgram mass loss in thermal gravimetric analysis.  Pharmacopoeias specify tablet mass uniformity to ensure dosage accuracy.  Rocket equations link mass fraction to Δv, driving lightweight composite design.  In legal trade, the International Organization of Legal Metrology publishes OIML R111 governing class tolerances for weights.  Molecular mass determination relies on mass spectrometry, where flight time or cyclotron frequency reveals atomic composition.  The Planck mass (~2 × 10‑8 kg) marks a theoretical scale where quantum gravity becomes significant.  From mineral resource assessment to calorie counting on nutrition labels, mass is an omnipresent metric of value, safety, and scientific inquiry."
    },
    {
      "id": "c20",
      "name": "power",
      "logo": "🔋",
      "description": "Power (P) denotes the rate of doing work or transferring energy, mathematically P = dE/dt.  Its SI unit watt (W) equals one joule per second.  Mechanical systems cite power as torque times angular velocity (P = τω) or force times velocity (P = Fv), whereas electrical systems use P = VI for DC and P = VIcosφ for AC where φ is phase angle.  Apparent (VA), real (W), and reactive (var) powers form the power triangle analysed via complex numbers.  Engine power ratings—horsepower or kilowatts—assess vehicle performance; power‑to‑weight ratio influences acceleration.  Renewable‑energy forecasting predicts PV array output from irradiance and module efficiency.  Computing shifts from peak performance metrics to energy‑efficient computing defined by performance per watt.  In RF engineering, decibel‑milliwatts (dBm) express logarithmic power levels, guiding link‑budget analysis for 5G cells.  The Planck power (~3.6 × 10⁵² W) anchors theoretical physics.  Grid operators balance real‑time power supply and demand by economic dispatch and frequency regulation.  Smart meters record household power usage in 15‑minute intervals enabling demand‑response.  Power density (W m‑³) constrains reactor cores and data‑centre cooling.  Laser power influences cutting thickness, while average acoustic power informs speaker design.  Metrology realises the watt via electrical substitution radiometers and Kibble balances, ensuring traceability from nuclear plants to smartphone chargers."
    },
    {
      "id": "c21",
      "name": "pressure",
      "logo": "🗜️",
      "description": "Pressure (p) is force per unit area, p = F/A, with the SI unit pascal (Pa).  Absolute pressure is referenced to vacuum, while gauge pressure references ambient atmosphere; differential pressure gauges drive flow‑measurement devices.  Fluids obey hydrostatic law p = ρgh, forming the basis for barometers and manometers.  Ideal‑gas law PV = nRT connects pressure to temperature and volume, underpinning HVAC psychrometrics.  In solid mechanics, stress generalises pressure to tensors describing multi‑axial loading.  High‑pressure physics studies diamond‑anvil cells exceeding 300 GPa to synthesise superhard materials and explore planetary interiors.  Blood pressure, measured in millimetres of mercury, indicates cardiovascular health.  Cavitation arises when local pressure falls below vapor pressure, eroding pump impellers.  Aerodynamics treats pressure coefficients Cp to map lift distributions on wings.  Acoustic pressure oscillations define sound amplitude; decibel SPL calibrations convert Pa to perceived loudness.  Semiconductor fabs maintain ultra‑high vacuum (~10‑6 Pa) for deposition uniformity.  Pressure cookers raise boiling point, shortening cooking times.  Safety valves and ASME codes protect boilers from over‑pressure.  Weather forecasts quote hectopascal isobars; falling pressure signals storms.  Accurate calibration employs dead‑weight testers and piston gauges linked to national standards.  Pressure’s ubiquity spans meteorology, medicine, manufacturing, and astrophysics where neutron‑star core pressures exceed 10²⁸ Pa."
    },
    {
      "id": "c22",
      "name": "resistance",
      "logo": "🛑",
      "description": "Electrical resistance (R) quantifies opposition to current flow and follows Ohm’s law V = IR for linear conductors.  The SI unit ohm (Ω) is realised via the quantum Hall effect with unprecedented stability: at the plateau, R_H = h/ie² where i is an integer.  Microscopically, resistance arises from charge‑carrier scattering; increasing temperature elevates phonon scattering in metals but lowers resistance in semiconductors (negative temperature coefficient).  Resistivity ρ, an intrinsic property, relates to geometry by R = ρℓ/A.  Precision resistors use manganin or nichrome, while high‑power resistors employ wire‑wound ceramic bodies for heat dissipation.  Variable resistors (potentiometers, rheostats, digital potentiometers) adjust gain and bias networks.  Superconductors drop resistance below a critical temperature, enabling lossless power links and high‑field magnets.  Resistors in RC networks set time constants τ = RC crucial for filters and oscillators; in feedback loops they determine amplifier bandwidth and stability.  Grounding systems design low‑resistance earth paths (<1 Ω) for lightning protection.  Thermistors exploit resistance‑temperature dependence for sensing, while strain gauges detect micro‑strain via resistive Wheatstone bridges.  Electrostatic discharge control relies on surface resistance of antistatic mats.  In biological systems, vascular resistance affects blood pressure; analogies underpin electrical models of physiological flows (Windkessel).  Understanding resistance facilitates efficient circuits, safe power grids, and precision instrumentation."
    },
    {
      "id": "c23",
      "name": "speed",
      "logo": "🏎️",
      "description": "Speed is the scalar magnitude of velocity, expressing distance traveled per unit time, typically in metres per second (m s‑1) or kilometres per hour.  Average speed equals total distance divided by elapsed time, while instantaneous speed derives from the derivative of position with respect to time.  Notable benchmarks include the speed of sound (~343 m s‑1 at 20 °C), Mach number (v/a) classifying subsonic to hypersonic flight regimes, and the invariant speed of light c.  Road traffic enforcement uses radar and lidar time‑of‑flight to measure vehicle speed; aviation employs pitot‑static systems converting dynamic pressure to indicated airspeed corrected for density altitude.  Spacecraft orbital speed balances gravitational pull v = √(GM/r), whereas escape velocity exceeds this by √2.  In physiology, nerve‑impulse conduction speeds vary from 1 m s‑1 in unmyelinated fibres to 120 m s‑1 in myelinated axons.  Computer CPUs quote clock speed but pipeline depth and IPC also impact performance.  Athletic training tracks split times to optimise pacing, and bullet chronographs use optical gates or Doppler radar for muzzle speed.  Geodesy determines tectonic plate speeds via millimetre‑level GPS baselines.  High‑frequency trading firms race for nanosecond signal propagation.  Proper comprehension of speed—from marathon strategies to interplanetary transfer windows—enables safety, efficiency, and scientific discovery."
    },
    {
      "id": "c24",
      "name": "temperature",
      "logo": "🌡️",
      "description": "Temperature gauges the average kinetic energy of particles in a system and dictates heat flow direction according to the second law of thermodynamics.  The SI base unit kelvin (K) is set by fixing Boltzmann’s constant k_B, eliminating reliance on the triple point of water.  Scales like Celsius and Fahrenheit are linear offsets (0 °C at water freezing, 32 °F).  Planck, Rankine, and Réaumur exist in specialised contexts.  Equation of state PV = nRT directly links temperature to pressure and volume.  Thermodynamics defines entropy differential dS = dQ_rev/T, making temperature central to engine cycle efficiencies (Carnot limit).  Sensors include thermocouples (Seebeck voltage), resistance thermometers (RTD, thermistor), semiconductor band‑gap sensors, and infrared pyrometers for non‑contact high‑temperature measurement up to 3000 K.  At ultralow temperatures below 1 mK, dilution refrigerators exploit He‑3/He‑4 mixtures to study quantum Hall effects.  Astronomical effective temperatures characterise stellar spectra; cosmic microwave background glows at 2.725 K.  Climate science tracks global mean surface temperature anomalies relative to a pre‑industrial baseline.  Material properties—viscosity, reaction rate (Arrhenius), semiconductor carrier mobility—depend exponentially on temperature.  Culinary precision cooking applies sous‑vide at ±0.1 K control for consistent texture.  Human comfort indices combine air temperature, humidity, and radiant heat into operative temperature benchmarks for building HVAC design."
    },
    {
      "id": "c25",
      "name": "time",
      "logo": "⏰",
      "description": "Time orders events and quantifies intervals between them.  The SI second is defined as 9 192 631 770 periods of radiation from the cesium‑133 ground‑state hyperfine transition.  At macroscopic scales, time allows rates—velocity, power, decay—to be computed; at microscopic scales, quantum mechanics introduces uncertainty ΔEΔt ≥ ħ/2.  Relativity intertwines time with space: time dilates with velocity and gravitational potential, verified by GPS satellite clock offsets.  Epoch systems (Unix time, Julian day) provide absolute references, while calendars convert solar time to civil usage.  Frequency standards cascade from primary cesium fountains to hydrogen masers and quartz oscillators, disseminated by NTP, PTP, and GPS.  Coordinated Universal Time (UTC) inserts leap seconds to keep civil time within ±0.9 s of UT1.  Attosecond lasers create time stamps enabling observation of electron dynamics.  Economists analyse time‑series data; biologists study circadian rhythms entrained by light.  Historians partition eras, while philosophers debate time’s arrow versus block‑universe.  In computing, algorithm complexity expresses run‑time growth, and garbage collectors track object lifetimes.  Project managers apply critical‑path timing, whereas musicians rely on tempo (beats per minute).  Accurate timekeeping underlies power‑grid phase synchronisation, radio‑telescope interferometry, and secure communication through time‑based one‑time passwords."
    },
    {
      "id": "c26",
      "name": "viscosity",
      "logo": "🍯",
      "description": "Viscosity (η) measures a fluid’s internal resistance to shear; dynamic viscosity units are pascal‑seconds (Pa·s), though the centipoise (cP) persists in industry (1 cP = 1 mPa·s).  Newtonian fluids exhibit linear shear stress τ = η(du/dy); non‑Newtonian fluids like ketchup display shear‑thinning.  Kinematic viscosity ν = η/ρ appears in Reynolds number Re = ρvL/η, demarcating laminar and turbulent flow regimes.  Temperature strongly influences viscosity; Andrade’s equation frames exponential decay for liquids, and Sutherland’s formula models gases.  Rheometers—capillary, cone‑and‑plate, oscillatory—characterise complex moduli capturing both viscous and elastic behaviour (viscoelasticity).  Lubrication engineers minimise wear with oils graded by SAE viscosity.  Blood viscosity affects cardiovascular health; elevated hematocrit increases thrombosis risk.  Magma viscosity dictates volcanic eruption style; rhyolitic magma’s high viscosity traps gases causing explosive eruptions.  Polymer processing monitors melt‑flow index, while inkjet printers rely on precise low viscosities to form droplets.  HVAC designers incorporate condensate viscosity into heat‑exchanger pressure‑drop calculations.  Emerging bio‑inks tune shear‑thinning to facilitate 3‑D bioprinting.  Climate models include ocean‑eddy viscosity parametrisations for sub‑grid turbulence.  Viscosity thus permeates scales from nanoscale microfluidic channels to planetary mantle convection shaping tectonics."
    },
    {
      "id": "c27",
      "name": "voltage",
      "logo": "🎚️",
      "description": "Voltage, or electric potential difference, represents the energy per unit charge between two points, driving current in circuits.  It is measured in volts (V), where 1 V = 1 J C‑1.  Electromotive force from batteries, generators, or photovoltaic cells establishes open‑circuit voltage.  Kirchhoff’s voltage law states that directed sums of voltages around a closed loop equal zero, embodying energy conservation.  Semiconductor band‑gap sets diode forward voltage (~0.7 V for Si), vital for rectifiers and logic thresholds.  Alternating mains voltages (120 V/230 V RMS) supply households; RMS accounts for equivalent heating value of AC waveforms.  High‑voltage DC links (±800 kV) transmit gigawatts over continental distances with lower losses than AC.  Voltmeter design varies: potentiometric null, moving‑coil galvanometer, or digital integrating converter.  The Josephson effect realises a quantum voltage standard V = n h f/2e linking volts to fundamental constants.  Electrostatic discharge involves kilovolt potentials that can damage microelectronics, mitigated by ESD flooring and wrist straps.  Low‑power microcontrollers operate down to sub‑volt levels using DC–DC converters; over‑voltage transients are clamped by TVS diodes.  Voltage dividers scale signals, while operational‑amplifier gain equals feedback resistor ratio times input voltage.  Electric field strength relates to voltage gradient E = −∇V, shaping capacitor design and insulation clearances.  Reliable voltage control underpins stable, efficient, and safe electrical systems."
    },
    {
      "id": "c28",
      "name": "volume",
      "logo": "🥛",
      "description": "Volume quantifies the three‑dimensional space an object occupies, measured in cubic metres (m³) in SI, but litres (L) are accepted for everyday use (1 L = 10‑3 m³).  Geometric formulas—πr²h for cylinders, 4/3 πr³ for spheres—extend via triple integrals to irregular solids and numerical mesh integration in computer‑aided design.  Volume affects buoyancy (Archimedes’ principle), specific heat capacity (volumetric heat), and material cost estimations.  Thermodynamics defines specific volume ν = V/m, inverse of density, critical in steam tables for power‑plant cycles.  Chemical stoichiometry applies molar volume (~22.414 L mol‑1 at STP for ideal gases).  Flow calculations integrate volume over time (Q = dV/dt).  Medicine doses intravenous fluids in millilitres; pulmonology measures tidal lung volumes.  Oceanography tracks volume transport of currents (Sverdrups).  3‑D‑printing slicers compute filament volume to predict build time.  Cryogenic storage accounts for thermal expansion coefficients to prevent over‑pressure.  Astronomers estimate planetary volumes from radius to compute mean density.  Manufacturing metrology uses coordinate‑measuring machines and CT scans to verify part volume against CAD.  Environmental science calculates reservoir and aquifer volumes for water‑resource management.  Whether packaging, dosing, or modelling, volume remains fundamental to engineering, science, and commerce."
    }
  ],
  "units": [
    {
      "id": "u1",
      "name": "yottameter",
      "shortName": "Ym",
      "categoryId": "c15",
      "conversions": {
        "u2": "(v)=>v*1000",
        "u3": "(v)=>v*1000000",
        "u4": "(v)=>v*1000000000",
        "u5": "(v)=>v*1000000000000",
        "u6": "(v)=>v*1e+15",
        "u7": "(v)=>v*1e+18",
        "u8": "(v)=>v*1e+21",
        "u9": "(v)=>v*1e+22",
        "u10": "(v)=>v*1e+23",
        "u11": "(v)=>v*1e+24",
        "u12": "(v)=>v*1e+25",
        "u13": "(v)=>v*1e+26",
        "u14": "(v)=>v*1e+27",
        "u15": "(v)=>v*1e+30",
        "u16": "(v)=>v*1e+33",
        "u17": "(v)=>v*1e+36",
        "u18": "(v)=>v*1e+39",
        "u19": "(v)=>v*1e+42",
        "u20": "(v)=>v*1e+45",
        "u21": "(v)=>v*1e+48",
        "u472": "(v)=>v*3.93700787401575e+25",
        "u473": "(v)=>v*3.28083989501312e+24",
        "u474": "(v)=>v*1.09361329833771e+24",
        "u475": "(v)=>v*6.21371192237334e+20",
        "u476": "(v)=>v*5.39956803455724e+20",
        "u477": "(v)=>v*1e+34",
        "u478": "(v)=>v*6684587122268.45",
        "u479": "(v)=>v*105700423.8587"
      },
      "description": "A yottameter (Ym) is an SI unit of length applying the yotta‑ prefix (10^24). One yottameter equals 1e+24 meters. The yotta prefix denotes a factor of 10^24, so 1 yottameter equals 10^24 metres. Such immensely large magnitudes are primarily encountered in astronomical and cosmological calculations. Yottameter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottameter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottameter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottameter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottameter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottameter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottameter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottameter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u2",
      "name": "zettameter",
      "shortName": "Zm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*0.001",
        "u3": "(v)=>v*1000",
        "u4": "(v)=>v*1000000",
        "u5": "(v)=>v*1000000000",
        "u6": "(v)=>v*1000000000000",
        "u7": "(v)=>v*1e+15",
        "u8": "(v)=>v*1e+18",
        "u9": "(v)=>v*1e+19",
        "u10": "(v)=>v*1e+20",
        "u11": "(v)=>v*1e+21",
        "u12": "(v)=>v*1e+22",
        "u13": "(v)=>v*1e+23",
        "u14": "(v)=>v*1e+24",
        "u15": "(v)=>v*1e+27",
        "u16": "(v)=>v*1e+30",
        "u17": "(v)=>v*1e+33",
        "u18": "(v)=>v*1e+36",
        "u19": "(v)=>v*1e+39",
        "u20": "(v)=>v*1e+42",
        "u21": "(v)=>v*1e+45",
        "u472": "(v)=>v*3.93700787401575e+22",
        "u473": "(v)=>v*3.28083989501312e+21",
        "u474": "(v)=>v*1.09361329833771e+21",
        "u475": "(v)=>v*6.21371192237334e+17",
        "u476": "(v)=>v*5.39956803455724e+17",
        "u477": "(v)=>v*1e+31",
        "u478": "(v)=>v*6684587122.26845",
        "u479": "(v)=>v*105700.4238587"
      },
      "description": "A zettameter (Zm) is an SI unit of length applying the zetta‑ prefix (10^21). One zettameter equals 1e+21 meters. The zetta prefix denotes a factor of 10^21, so 1 zettameter equals 10^21 metres. Such immensely large magnitudes are primarily encountered in astronomical and cosmological calculations. Zettameter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettameter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettameter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettameter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettameter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettameter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettameter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettameter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u3",
      "name": "exameter",
      "shortName": "Em",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-06",
        "u2": "(v)=>v*0.001",
        "u4": "(v)=>v*1000",
        "u5": "(v)=>v*1000000",
        "u6": "(v)=>v*1000000000",
        "u7": "(v)=>v*1000000000000",
        "u8": "(v)=>v*1e+15",
        "u9": "(v)=>v*1e+16",
        "u10": "(v)=>v*1e+17",
        "u11": "(v)=>v*1e+18",
        "u12": "(v)=>v*1e+19",
        "u13": "(v)=>v*1e+20",
        "u14": "(v)=>v*1e+21",
        "u15": "(v)=>v*1e+24",
        "u16": "(v)=>v*1e+27",
        "u17": "(v)=>v*1e+30",
        "u18": "(v)=>v*1e+33",
        "u19": "(v)=>v*1e+36",
        "u20": "(v)=>v*1e+39",
        "u21": "(v)=>v*1e+42",
        "u472": "(v)=>v*3.93700787401575e+19",
        "u473": "(v)=>v*3.28083989501312e+18",
        "u474": "(v)=>v*1.09361329833771e+18",
        "u475": "(v)=>v*621371192237334",
        "u476": "(v)=>v*539956803455724",
        "u477": "(v)=>v*1e+28",
        "u478": "(v)=>v*6684587.12226845",
        "u479": "(v)=>v*105.7004238587"
      },
      "description": "A exameter (Em) is an SI unit of length applying the exa‑ prefix (10^18). One exameter equals 1e+18 meters. The exa prefix denotes a factor of 10^18, so 1 exameter equals 10^18 metres. Such immensely large magnitudes are primarily encountered in astronomical and cosmological calculations. Exameter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exameter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exameter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exameter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exameter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exameter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exameter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exameter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u4",
      "name": "petameter",
      "shortName": "Pm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-09",
        "u2": "(v)=>v*1e-06",
        "u3": "(v)=>v*0.001",
        "u5": "(v)=>v*1000",
        "u6": "(v)=>v*1000000",
        "u7": "(v)=>v*1000000000",
        "u8": "(v)=>v*1000000000000",
        "u9": "(v)=>v*10000000000000",
        "u10": "(v)=>v*100000000000000",
        "u11": "(v)=>v*1e+15",
        "u12": "(v)=>v*1e+16",
        "u13": "(v)=>v*1e+17",
        "u14": "(v)=>v*1e+18",
        "u15": "(v)=>v*1e+21",
        "u16": "(v)=>v*1e+24",
        "u17": "(v)=>v*1e+27",
        "u18": "(v)=>v*1e+30",
        "u19": "(v)=>v*1e+33",
        "u20": "(v)=>v*1e+36",
        "u21": "(v)=>v*1e+39",
        "u472": "(v)=>v*3.93700787401575e+16",
        "u473": "(v)=>v*3.28083989501312e+15",
        "u474": "(v)=>v*1.09361329833771e+15",
        "u475": "(v)=>v*621371192237.334",
        "u476": "(v)=>v*539956803455.724",
        "u477": "(v)=>v*1e+25",
        "u478": "(v)=>v*6684.58712226845",
        "u479": "(v)=>v*0.1057004238587"
      },
      "description": "A petameter (Pm) is an SI unit of length applying the peta‑ prefix (10^15). One petameter equals 1e+15 meters. The peta prefix denotes a factor of 10^15, so 1 petameter equals 10^15 metres. Such immensely large magnitudes are primarily encountered in astronomical and cosmological calculations. Petameter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petameter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petameter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petameter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petameter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petameter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petameter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petameter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u5",
      "name": "terameter",
      "shortName": "Tm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-12",
        "u2": "(v)=>v*1e-09",
        "u3": "(v)=>v*1e-06",
        "u4": "(v)=>v*0.001",
        "u6": "(v)=>v*1000",
        "u7": "(v)=>v*1000000",
        "u8": "(v)=>v*1000000000",
        "u9": "(v)=>v*10000000000",
        "u10": "(v)=>v*100000000000",
        "u11": "(v)=>v*1000000000000",
        "u12": "(v)=>v*10000000000000",
        "u13": "(v)=>v*100000000000000",
        "u14": "(v)=>v*1e+15",
        "u15": "(v)=>v*1e+18",
        "u16": "(v)=>v*1e+21",
        "u17": "(v)=>v*1e+24",
        "u18": "(v)=>v*1e+27",
        "u19": "(v)=>v*1e+30",
        "u20": "(v)=>v*1e+33",
        "u21": "(v)=>v*1e+36",
        "u472": "(v)=>v*39370078740157.5",
        "u473": "(v)=>v*3280839895013.12",
        "u474": "(v)=>v*1093613298337.71",
        "u475": "(v)=>v*621371192.237334",
        "u476": "(v)=>v*539956803.455724",
        "u477": "(v)=>v*1e+22",
        "u478": "(v)=>v*6.68458712226845",
        "u479": "(v)=>v*0.0001057004238587"
      },
      "description": "A terameter (Tm) is an SI unit of length applying the tera‑ prefix (10^12). One terameter equals 1e+12 meters. The tera prefix denotes a factor of 10^12, so 1 terameter equals 10^12 metres. Such immensely large magnitudes are primarily encountered in astronomical and cosmological calculations. Terameter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terameter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terameter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terameter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terameter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terameter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terameter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terameter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u6",
      "name": "gigameter",
      "shortName": "Gm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-15",
        "u2": "(v)=>v*1e-12",
        "u3": "(v)=>v*1e-09",
        "u4": "(v)=>v*1e-06",
        "u5": "(v)=>v*0.001",
        "u7": "(v)=>v*1000",
        "u8": "(v)=>v*1000000",
        "u9": "(v)=>v*10000000",
        "u10": "(v)=>v*100000000",
        "u11": "(v)=>v*1000000000",
        "u12": "(v)=>v*10000000000",
        "u13": "(v)=>v*100000000000",
        "u14": "(v)=>v*1000000000000",
        "u15": "(v)=>v*1e+15",
        "u16": "(v)=>v*1e+18",
        "u17": "(v)=>v*1e+21",
        "u18": "(v)=>v*1e+24",
        "u19": "(v)=>v*1e+27",
        "u20": "(v)=>v*1e+30",
        "u21": "(v)=>v*1e+33",
        "u472": "(v)=>v*39370078740.1575",
        "u473": "(v)=>v*3280839895.01312",
        "u474": "(v)=>v*1093613298.33771",
        "u475": "(v)=>v*621371.192237334",
        "u476": "(v)=>v*539956.803455724",
        "u477": "(v)=>v*1e+19",
        "u478": "(v)=>v*0.00668458712226845",
        "u479": "(v)=>v*1.057004238587e-07"
      },
      "description": "A gigameter (Gm) is an SI unit of length applying the giga‑ prefix (10^9). One gigameter equals 1000000000 meters. The giga prefix denotes a factor of 10^9, so 1 gigameter equals 10^9 metres. Such very large magnitudes are primarily encountered in planetary‑scale geoscience and space‑flight trajectory work. Gigameter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigameter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigameter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigameter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigameter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigameter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigameter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigameter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u7",
      "name": "megameter",
      "shortName": "Mm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-18",
        "u2": "(v)=>v*1e-15",
        "u3": "(v)=>v*1e-12",
        "u4": "(v)=>v*1e-09",
        "u5": "(v)=>v*1e-06",
        "u6": "(v)=>v*0.001",
        "u8": "(v)=>v*1000",
        "u9": "(v)=>v*10000",
        "u10": "(v)=>v*100000",
        "u11": "(v)=>v*1000000",
        "u12": "(v)=>v*10000000",
        "u13": "(v)=>v*100000000",
        "u14": "(v)=>v*1000000000",
        "u15": "(v)=>v*1000000000000",
        "u16": "(v)=>v*1e+15",
        "u17": "(v)=>v*1e+18",
        "u18": "(v)=>v*1e+21",
        "u19": "(v)=>v*1e+24",
        "u20": "(v)=>v*1e+27",
        "u21": "(v)=>v*1e+30",
        "u472": "(v)=>v*39370078.7401575",
        "u473": "(v)=>v*3280839.89501312",
        "u474": "(v)=>v*1093613.29833771",
        "u475": "(v)=>v*621.371192237334",
        "u476": "(v)=>v*539.956803455724",
        "u477": "(v)=>v*1e+16",
        "u478": "(v)=>v*6.68458712226845e-06",
        "u479": "(v)=>v*1.057004238587e-10"
      },
      "description": "A megameter (Mm) is an SI unit of length applying the mega‑ prefix (10^6). One megameter equals 1000000 meters. The mega prefix denotes a factor of 10^6, so 1 megameter equals 10^6 metres. Such very large magnitudes are primarily encountered in planetary‑scale geoscience and space‑flight trajectory work. Megameter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megameter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megameter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megameter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megameter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megameter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megameter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megameter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u8",
      "name": "kilometer",
      "shortName": "km",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-21",
        "u2": "(v)=>v*1e-18",
        "u3": "(v)=>v*1e-15",
        "u4": "(v)=>v*1e-12",
        "u5": "(v)=>v*1e-09",
        "u6": "(v)=>v*1e-06",
        "u7": "(v)=>v*0.001",
        "u9": "(v)=>v*10",
        "u10": "(v)=>v*100",
        "u11": "(v)=>v*1000",
        "u12": "(v)=>v*10000",
        "u13": "(v)=>v*100000",
        "u14": "(v)=>v*1000000",
        "u15": "(v)=>v*1000000000",
        "u16": "(v)=>v*1000000000000",
        "u17": "(v)=>v*1e+15",
        "u18": "(v)=>v*1e+18",
        "u19": "(v)=>v*1e+21",
        "u20": "(v)=>v*1e+24",
        "u21": "(v)=>v*1e+27",
        "u472": "(v)=>v*39370.0787401575",
        "u473": "(v)=>v*3280.83989501312",
        "u474": "(v)=>v*1093.61329833771",
        "u475": "(v)=>v*0.621371192237334",
        "u476": "(v)=>v*0.539956803455723",
        "u477": "(v)=>v*10000000000000",
        "u478": "(v)=>v*6.68458712226845e-09",
        "u479": "(v)=>v*1.057004238587e-13"
      },
      "description": "**Kilometre (kilometer) – symbol km**  \nA kilometre is exactly **1 000 metres**, making it the most convenient unit for expressing everyday medium‑scale distances. Road networks, running races, hiking maps, and aviation flight levels all rely heavily on the kilometre because the round base‑10 factor meshes cleanly with SI prefixes.\n\n**Historical context & standardization**  \nAdopted during the French metric reform in the late 18th century, the kilometre quickly replaced traditional leagues and furlongs across continental Europe. Today it is the official road‑sign distance unit in every country except the United States, United Kingdom, and a handful of others.\n\n**Key equivalences & SEO‑friendly facts**  \n• 1 km = 0.621 371 192 24 statute miles  \n• 5 km = popular “parkrun” distance  \n• 42.195 km = full marathon length  \n• 10 000 km ≈ quarter of Earth’s circumference  \nBecause it bridges the gap between metres and larger geodesic units, the kilometre dominates GPS navigation, fitness trackers, automotive odometers, and scientific reporting of planetary diameters.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u9",
      "name": "hectometer",
      "shortName": "hm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-22",
        "u2": "(v)=>v*1e-19",
        "u3": "(v)=>v*1e-16",
        "u4": "(v)=>v*1e-13",
        "u5": "(v)=>v*1e-10",
        "u6": "(v)=>v*1e-07",
        "u7": "(v)=>v*0.0001",
        "u8": "(v)=>v*0.1",
        "u10": "(v)=>v*10",
        "u11": "(v)=>v*100",
        "u12": "(v)=>v*1000",
        "u13": "(v)=>v*10000",
        "u14": "(v)=>v*100000",
        "u15": "(v)=>v*100000000",
        "u16": "(v)=>v*100000000000",
        "u17": "(v)=>v*100000000000000",
        "u18": "(v)=>v*1e+17",
        "u19": "(v)=>v*1e+20",
        "u20": "(v)=>v*1e+23",
        "u21": "(v)=>v*1e+26",
        "u472": "(v)=>v*3937.00787401575",
        "u473": "(v)=>v*328.083989501312",
        "u474": "(v)=>v*109.361329833771",
        "u475": "(v)=>v*0.0621371192237334",
        "u476": "(v)=>v*0.0539956803455724",
        "u477": "(v)=>v*1000000000000",
        "u478": "(v)=>v*6.68458712226845e-10",
        "u479": "(v)=>v*1.057004238587e-14"
      },
      "description": "A hectometer (hm) is an SI unit of length applying the hecto‑ prefix (10^2). One hectometer equals 100 meters. The hecto prefix denotes a factor of 10^2, so 1 hectometer equals 10^2 metres. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Hectometer belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectometer often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectometer as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectometer is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectometer values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectometer has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectometer metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectometer fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u10",
      "name": "decameter",
      "shortName": "dam",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-23",
        "u2": "(v)=>v*1e-20",
        "u3": "(v)=>v*1e-17",
        "u4": "(v)=>v*1e-14",
        "u5": "(v)=>v*1e-11",
        "u6": "(v)=>v*1e-08",
        "u7": "(v)=>v*1e-05",
        "u8": "(v)=>v*0.01",
        "u9": "(v)=>v*0.1",
        "u11": "(v)=>v*10",
        "u12": "(v)=>v*100",
        "u13": "(v)=>v*1000",
        "u14": "(v)=>v*10000",
        "u15": "(v)=>v*10000000",
        "u16": "(v)=>v*10000000000",
        "u17": "(v)=>v*10000000000000",
        "u18": "(v)=>v*1e+16",
        "u19": "(v)=>v*1e+19",
        "u20": "(v)=>v*1e+22",
        "u21": "(v)=>v*1e+25",
        "u472": "(v)=>v*393.700787401575",
        "u473": "(v)=>v*32.8083989501312",
        "u474": "(v)=>v*10.9361329833771",
        "u475": "(v)=>v*0.00621371192237334",
        "u476": "(v)=>v*0.00539956803455724",
        "u477": "(v)=>v*100000000000",
        "u478": "(v)=>v*6.68458712226845e-11",
        "u479": "(v)=>v*1.057004238587e-15"
      },
      "description": "A decameter (dam) is an SI unit of length applying the deca‑ prefix (10^1). One decameter equals 10 meters. The deca prefix denotes a factor of 10^1, so 1 decameter equals 10^1 metres. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Decameter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decameter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decameter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decameter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decameter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decameter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decameter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decameter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u11",
      "name": "meter",
      "shortName": "m",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-24",
        "u2": "(v)=>v*1e-21",
        "u3": "(v)=>v*1e-18",
        "u4": "(v)=>v*1e-15",
        "u5": "(v)=>v*1e-12",
        "u6": "(v)=>v*1e-09",
        "u7": "(v)=>v*1e-06",
        "u8": "(v)=>v*0.001",
        "u9": "(v)=>v*0.01",
        "u10": "(v)=>v*0.1",
        "u12": "(v)=>v*10",
        "u13": "(v)=>v*100",
        "u14": "(v)=>v*1000",
        "u15": "(v)=>v*1000000",
        "u16": "(v)=>v*1000000000",
        "u17": "(v)=>v*1000000000000",
        "u18": "(v)=>v*1e+15",
        "u19": "(v)=>v*1e+18",
        "u20": "(v)=>v*1e+21",
        "u21": "(v)=>v*1e+24",
        "u472": "(v)=>v*39.3700787401575",
        "u473": "(v)=>v*3.28083989501312",
        "u474": "(v)=>v*1.09361329833771",
        "u475": "(v)=>v*0.000621371192237334",
        "u476": "(v)=>v*0.000539956803455724",
        "u477": "(v)=>v*10000000000",
        "u478": "(v)=>v*6.68458712226845e-12",
        "u479": "(v)=>v*1.057004238587e-16"
      },
      "description": "**Meter (metre) – symbol m**  \nThe metre is the internationally accepted base unit of length in the International System of Units (SI). Since 1983 it has been defined with exquisite precision as *the distance travelled by light in vacuum in 1/299 792 458 of a second*. Because the speed of light is a universal constant, this ties the metre to the fundamental fabric of physics and allows laboratories anywhere on Earth (or in space) to realise the unit with lasers and an accurate atomic clock.\n\nHistorically the metre has evolved from a fraction of Earth’s meridian (1790s), through platinum‑iridium prototype bars (1889), to interferometer wavelengths of krypton‑86 (1960), culminating in the current light‑based definition. Whatever spelling you choose—*meter* (US) or *metre* (UK/Commonwealth)—the value is identical.\n\n**Quick conversions & use‑cases**  \n• 1 m ≈ 39.370 inches (3 ft 3 3⁄8 in)  \n• 100 m ≈ the length of a soccer pitch  \n• 1 000 m = 1 kilometre  \nFrom civil engineering and athletics (“100‑metre dash”) to nanoscale chip fabrication (1 nm = 1 × 10‑9 m), the metre underpins every modern length measurement.",
      "standard": [
        "SI-base",
        "metric"
      ]
    },
    {
      "id": "u12",
      "name": "decimeter",
      "shortName": "dm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-25",
        "u2": "(v)=>v*1e-22",
        "u3": "(v)=>v*1e-19",
        "u4": "(v)=>v*1e-16",
        "u5": "(v)=>v*1e-13",
        "u6": "(v)=>v*1e-10",
        "u7": "(v)=>v*1e-07",
        "u8": "(v)=>v*0.0001",
        "u9": "(v)=>v*0.001",
        "u10": "(v)=>v*0.01",
        "u11": "(v)=>v*0.1",
        "u13": "(v)=>v*10",
        "u14": "(v)=>v*100",
        "u15": "(v)=>v*100000",
        "u16": "(v)=>v*100000000",
        "u17": "(v)=>v*100000000000",
        "u18": "(v)=>v*100000000000000",
        "u19": "(v)=>v*1e+17",
        "u20": "(v)=>v*1e+20",
        "u21": "(v)=>v*1e+23",
        "u472": "(v)=>v*3.93700787401575",
        "u473": "(v)=>v*0.328083989501312",
        "u474": "(v)=>v*0.109361329833771",
        "u475": "(v)=>v*6.21371192237334e-05",
        "u476": "(v)=>v*5.39956803455724e-05",
        "u477": "(v)=>v*1000000000",
        "u478": "(v)=>v*6.68458712226845e-13",
        "u479": "(v)=>v*1.057004238587e-17"
      },
      "description": "A decimeter (dm) is an SI unit of length applying the deci‑ prefix (10^-1). One decimeter equals 0.1 meters. The deci prefix denotes a factor of 10^-1, so 1 decimeter equals 10^-1 metres. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Decimeter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decimeter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decimeter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decimeter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decimeter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decimeter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decimeter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decimeter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u13",
      "name": "centimeter",
      "shortName": "cm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-26",
        "u2": "(v)=>v*1e-23",
        "u3": "(v)=>v*1e-20",
        "u4": "(v)=>v*1e-17",
        "u5": "(v)=>v*1e-14",
        "u6": "(v)=>v*1e-11",
        "u7": "(v)=>v*1e-08",
        "u8": "(v)=>v*1e-05",
        "u9": "(v)=>v*0.0001",
        "u10": "(v)=>v*0.001",
        "u11": "(v)=>v*0.01",
        "u12": "(v)=>v*0.1",
        "u14": "(v)=>v*10",
        "u15": "(v)=>v*10000",
        "u16": "(v)=>v*10000000",
        "u17": "(v)=>v*10000000000",
        "u18": "(v)=>v*10000000000000",
        "u19": "(v)=>v*1e+16",
        "u20": "(v)=>v*1e+19",
        "u21": "(v)=>v*1e+22",
        "u472": "(v)=>v*0.393700787401575",
        "u473": "(v)=>v*0.0328083989501312",
        "u474": "(v)=>v*0.0109361329833771",
        "u475": "(v)=>v*6.21371192237334e-06",
        "u476": "(v)=>v*5.39956803455724e-06",
        "u477": "(v)=>v*100000000",
        "u478": "(v)=>v*6.68458712226845e-14",
        "u479": "(v)=>v*1.057004238587e-18"
      },
      "description": "A centimeter (cm) is an SI unit of length applying the centi‑ prefix (10^-2). One centimeter equals 0.01 meters. The centi prefix denotes a factor of 10^-2, so 1 centimeter equals 10^-2 metres. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Centimeter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centimeter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centimeter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centimeter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centimeter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centimeter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centimeter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centimeter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u14",
      "name": "millimeter",
      "shortName": "mm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-27",
        "u2": "(v)=>v*1e-24",
        "u3": "(v)=>v*1e-21",
        "u4": "(v)=>v*1e-18",
        "u5": "(v)=>v*1e-15",
        "u6": "(v)=>v*1e-12",
        "u7": "(v)=>v*1e-09",
        "u8": "(v)=>v*1e-06",
        "u9": "(v)=>v*1e-05",
        "u10": "(v)=>v*0.0001",
        "u11": "(v)=>v*0.001",
        "u12": "(v)=>v*0.01",
        "u13": "(v)=>v*0.1",
        "u15": "(v)=>v*1000",
        "u16": "(v)=>v*1000000",
        "u17": "(v)=>v*1000000000",
        "u18": "(v)=>v*1000000000000",
        "u19": "(v)=>v*1e+15",
        "u20": "(v)=>v*1e+18",
        "u21": "(v)=>v*1e+21",
        "u472": "(v)=>v*0.0393700787401575",
        "u473": "(v)=>v*0.00328083989501312",
        "u474": "(v)=>v*0.00109361329833771",
        "u475": "(v)=>v*6.21371192237334e-07",
        "u476": "(v)=>v*5.39956803455724e-07",
        "u477": "(v)=>v*10000000",
        "u478": "(v)=>v*6.68458712226845e-15",
        "u479": "(v)=>v*1.057004238587e-19"
      },
      "description": "A millimeter (mm) is an SI unit of length applying the milli‑ prefix (10^-3). One millimeter equals 0.001 meters. The milli prefix denotes a factor of 10^-3, so 1 millimeter equals 10^-3 metres. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Millimeter belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millimeter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millimeter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millimeter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millimeter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millimeter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millimeter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millimeter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u15",
      "name": "micrometer",
      "shortName": "μm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-30",
        "u2": "(v)=>v*1e-27",
        "u3": "(v)=>v*1e-24",
        "u4": "(v)=>v*1e-21",
        "u5": "(v)=>v*1e-18",
        "u6": "(v)=>v*1e-15",
        "u7": "(v)=>v*1e-12",
        "u8": "(v)=>v*1e-09",
        "u9": "(v)=>v*1e-08",
        "u10": "(v)=>v*1e-07",
        "u11": "(v)=>v*1e-06",
        "u12": "(v)=>v*1e-05",
        "u13": "(v)=>v*0.0001",
        "u14": "(v)=>v*0.001",
        "u16": "(v)=>v*1000",
        "u17": "(v)=>v*1000000",
        "u18": "(v)=>v*1000000000",
        "u19": "(v)=>v*1000000000000",
        "u20": "(v)=>v*1e+15",
        "u21": "(v)=>v*1e+18",
        "u472": "(v)=>v*3.93700787401575e-05",
        "u473": "(v)=>v*3.28083989501312e-06",
        "u474": "(v)=>v*1.09361329833771e-06",
        "u475": "(v)=>v*6.21371192237334e-10",
        "u476": "(v)=>v*5.39956803455723e-10",
        "u477": "(v)=>v*10000",
        "u478": "(v)=>v*6.68458712226845e-18",
        "u479": "(v)=>v*1.057004238587e-22"
      },
      "description": "A micrometer (μm) is an SI unit of length applying the micro‑ prefix (10^-6). One micrometer equals 1e-06 meters. The micro prefix denotes a factor of 10^-6, so 1 micrometer equals 10^-6 metres. Such very small magnitudes are primarily encountered in nanotechnology and materials science. Micrometer belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of micrometer often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent micrometer as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, micrometer is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when micrometer values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding micrometer has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed micrometer metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of micrometer fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u16",
      "name": "nanometer",
      "shortName": "nm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-33",
        "u2": "(v)=>v*1e-30",
        "u3": "(v)=>v*1e-27",
        "u4": "(v)=>v*1e-24",
        "u5": "(v)=>v*1e-21",
        "u6": "(v)=>v*1e-18",
        "u7": "(v)=>v*1e-15",
        "u8": "(v)=>v*1e-12",
        "u9": "(v)=>v*1e-11",
        "u10": "(v)=>v*1e-10",
        "u11": "(v)=>v*1e-09",
        "u12": "(v)=>v*1e-08",
        "u13": "(v)=>v*1e-07",
        "u14": "(v)=>v*1e-06",
        "u15": "(v)=>v*0.001",
        "u17": "(v)=>v*1000",
        "u18": "(v)=>v*1000000",
        "u19": "(v)=>v*1000000000",
        "u20": "(v)=>v*1000000000000",
        "u21": "(v)=>v*1e+15",
        "u472": "(v)=>v*3.93700787401575e-08",
        "u473": "(v)=>v*3.28083989501312e-09",
        "u474": "(v)=>v*1.09361329833771e-09",
        "u475": "(v)=>v*6.21371192237334e-13",
        "u476": "(v)=>v*5.39956803455724e-13",
        "u477": "(v)=>v*10",
        "u478": "(v)=>v*6.68458712226845e-21",
        "u479": "(v)=>v*1.057004238587e-25"
      },
      "description": "A nanometer (nm) is an SI unit of length applying the nano‑ prefix (10^-9). One nanometer equals 1e-09 meters. The nano prefix denotes a factor of 10^-9, so 1 nanometer equals 10^-9 metres. Such very small magnitudes are primarily encountered in nanotechnology and materials science. Nanometer belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanometer often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanometer as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanometer is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanometer values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanometer has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanometer metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanometer fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u17",
      "name": "picometer",
      "shortName": "pm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-36",
        "u2": "(v)=>v*1e-33",
        "u3": "(v)=>v*1e-30",
        "u4": "(v)=>v*1e-27",
        "u5": "(v)=>v*1e-24",
        "u6": "(v)=>v*1e-21",
        "u7": "(v)=>v*1e-18",
        "u8": "(v)=>v*1e-15",
        "u9": "(v)=>v*1e-14",
        "u10": "(v)=>v*1e-13",
        "u11": "(v)=>v*1e-12",
        "u12": "(v)=>v*1e-11",
        "u13": "(v)=>v*1e-10",
        "u14": "(v)=>v*1e-09",
        "u15": "(v)=>v*1e-06",
        "u16": "(v)=>v*0.001",
        "u18": "(v)=>v*1000",
        "u19": "(v)=>v*1000000",
        "u20": "(v)=>v*1000000000",
        "u21": "(v)=>v*1000000000000",
        "u472": "(v)=>v*3.93700787401575e-11",
        "u473": "(v)=>v*3.28083989501312e-12",
        "u474": "(v)=>v*1.09361329833771e-12",
        "u475": "(v)=>v*6.21371192237334e-16",
        "u476": "(v)=>v*5.39956803455724e-16",
        "u477": "(v)=>v*0.01",
        "u478": "(v)=>v*6.68458712226845e-24",
        "u479": "(v)=>v*1.057004238587e-28"
      },
      "description": "A picometer (pm) is an SI unit of length applying the pico‑ prefix (10^-12). One picometer equals 1e-12 meters. The pico prefix denotes a factor of 10^-12, so 1 picometer equals 10^-12 metres. Such extremely small magnitudes are primarily encountered in particle‑physics and quantum‑scale modelling. Picometer belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picometer often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picometer as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picometer is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picometer values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picometer has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picometer metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picometer fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u18",
      "name": "femtometer",
      "shortName": "fm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-39",
        "u2": "(v)=>v*1e-36",
        "u3": "(v)=>v*1e-33",
        "u4": "(v)=>v*1e-30",
        "u5": "(v)=>v*1e-27",
        "u6": "(v)=>v*1e-24",
        "u7": "(v)=>v*1e-21",
        "u8": "(v)=>v*1e-18",
        "u9": "(v)=>v*1e-17",
        "u10": "(v)=>v*1e-16",
        "u11": "(v)=>v*1e-15",
        "u12": "(v)=>v*1e-14",
        "u13": "(v)=>v*1e-13",
        "u14": "(v)=>v*1e-12",
        "u15": "(v)=>v*1e-09",
        "u16": "(v)=>v*1e-06",
        "u17": "(v)=>v*0.001",
        "u19": "(v)=>v*1000",
        "u20": "(v)=>v*1000000",
        "u21": "(v)=>v*1000000000",
        "u472": "(v)=>v*3.93700787401575e-14",
        "u473": "(v)=>v*3.28083989501312e-15",
        "u474": "(v)=>v*1.09361329833771e-15",
        "u475": "(v)=>v*6.21371192237334e-19",
        "u476": "(v)=>v*5.39956803455724e-19",
        "u477": "(v)=>v*1e-05",
        "u478": "(v)=>v*6.68458712226845e-27",
        "u479": "(v)=>v*1.057004238587e-31"
      },
      "description": "A femtometer (fm) is an SI unit of length applying the femto‑ prefix (10^-15). One femtometer equals 1e-15 meters. The femto prefix denotes a factor of 10^-15, so 1 femtometer equals 10^-15 metres. Such extremely small magnitudes are primarily encountered in particle‑physics and quantum‑scale modelling. Femtometer belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtometer often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtometer as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtometer is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtometer values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtometer has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtometer metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtometer fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u19",
      "name": "attometer",
      "shortName": "am",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-42",
        "u2": "(v)=>v*1e-39",
        "u3": "(v)=>v*1e-36",
        "u4": "(v)=>v*1e-33",
        "u5": "(v)=>v*1e-30",
        "u6": "(v)=>v*1e-27",
        "u7": "(v)=>v*1e-24",
        "u8": "(v)=>v*1e-21",
        "u9": "(v)=>v*1e-20",
        "u10": "(v)=>v*1e-19",
        "u11": "(v)=>v*1e-18",
        "u12": "(v)=>v*1e-17",
        "u13": "(v)=>v*1e-16",
        "u14": "(v)=>v*1e-15",
        "u15": "(v)=>v*1e-12",
        "u16": "(v)=>v*1e-09",
        "u17": "(v)=>v*1e-06",
        "u18": "(v)=>v*0.001",
        "u20": "(v)=>v*1000",
        "u21": "(v)=>v*1000000",
        "u472": "(v)=>v*3.93700787401575e-17",
        "u473": "(v)=>v*3.28083989501312e-18",
        "u474": "(v)=>v*1.09361329833771e-18",
        "u475": "(v)=>v*6.21371192237334e-22",
        "u476": "(v)=>v*5.39956803455724e-22",
        "u477": "(v)=>v*1e-08",
        "u478": "(v)=>v*6.68458712226845e-30",
        "u479": "(v)=>v*1.057004238587e-34"
      },
      "description": "A attometer (am) is an SI unit of length applying the atto‑ prefix (10^-18). One attometer equals 1e-18 meters. The atto prefix denotes a factor of 10^-18, so 1 attometer equals 10^-18 metres. Such extremely small magnitudes are primarily encountered in particle‑physics and quantum‑scale modelling. Attometer belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attometer often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attometer as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attometer is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attometer values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attometer has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attometer metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attometer fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u20",
      "name": "zeptometer",
      "shortName": "zm",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-45",
        "u2": "(v)=>v*1e-42",
        "u3": "(v)=>v*1e-39",
        "u4": "(v)=>v*1e-36",
        "u5": "(v)=>v*1e-33",
        "u6": "(v)=>v*1e-30",
        "u7": "(v)=>v*1e-27",
        "u8": "(v)=>v*1e-24",
        "u9": "(v)=>v*1e-23",
        "u10": "(v)=>v*1e-22",
        "u11": "(v)=>v*1e-21",
        "u12": "(v)=>v*1e-20",
        "u13": "(v)=>v*1e-19",
        "u14": "(v)=>v*1e-18",
        "u15": "(v)=>v*1e-15",
        "u16": "(v)=>v*1e-12",
        "u17": "(v)=>v*1e-09",
        "u18": "(v)=>v*1e-06",
        "u19": "(v)=>v*0.001",
        "u21": "(v)=>v*1000",
        "u472": "(v)=>v*3.93700787401575e-20",
        "u473": "(v)=>v*3.28083989501312e-21",
        "u474": "(v)=>v*1.09361329833771e-21",
        "u475": "(v)=>v*6.21371192237334e-25",
        "u476": "(v)=>v*5.39956803455724e-25",
        "u477": "(v)=>v*1e-11",
        "u478": "(v)=>v*6.68458712226844e-33",
        "u479": "(v)=>v*1.057004238587e-37"
      },
      "description": "A zeptometer (zm) is an SI unit of length applying the zepto‑ prefix (10^-21). One zeptometer equals 1e-21 meters. The zepto prefix denotes a factor of 10^-21, so 1 zeptometer equals 10^-21 metres. Such extremely small magnitudes are primarily encountered in particle‑physics and quantum‑scale modelling. Zeptometer belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptometer often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptometer as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptometer is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptometer values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptometer has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptometer metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptometer fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u21",
      "name": "yoctometer",
      "shortName": "ym",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-48",
        "u2": "(v)=>v*1e-45",
        "u3": "(v)=>v*1e-42",
        "u4": "(v)=>v*1e-39",
        "u5": "(v)=>v*1e-36",
        "u6": "(v)=>v*1e-33",
        "u7": "(v)=>v*1e-30",
        "u8": "(v)=>v*1e-27",
        "u9": "(v)=>v*1e-26",
        "u10": "(v)=>v*1e-25",
        "u11": "(v)=>v*1e-24",
        "u12": "(v)=>v*1e-23",
        "u13": "(v)=>v*1e-22",
        "u14": "(v)=>v*1e-21",
        "u15": "(v)=>v*1e-18",
        "u16": "(v)=>v*1e-15",
        "u17": "(v)=>v*1e-12",
        "u18": "(v)=>v*1e-09",
        "u19": "(v)=>v*1e-06",
        "u20": "(v)=>v*0.001",
        "u472": "(v)=>v*3.93700787401575e-23",
        "u473": "(v)=>v*3.28083989501312e-24",
        "u474": "(v)=>v*1.09361329833771e-24",
        "u475": "(v)=>v*6.21371192237334e-28",
        "u476": "(v)=>v*5.39956803455724e-28",
        "u477": "(v)=>v*1e-14",
        "u478": "(v)=>v*6.68458712226844e-36",
        "u479": "(v)=>v*1.057004238587e-40"
      },
      "description": "A yoctometer (ym) is an SI unit of length applying the yocto‑ prefix (10^-24). One yoctometer equals 1e-24 meters. The yocto prefix denotes a factor of 10^-24, so 1 yoctometer equals 10^-24 metres. Such extremely small magnitudes are primarily encountered in particle‑physics and quantum‑scale modelling. Yoctometer belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctometer often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctometer as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctometer is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctometer values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctometer has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctometer metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctometer fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u22",
      "name": "yottagram",
      "shortName": "Yg",
      "categoryId": "c19",
      "conversions": {
        "u23": "(v)=>v*1000",
        "u24": "(v)=>v*1000000",
        "u25": "(v)=>v*1000000000",
        "u26": "(v)=>v*1000000000000",
        "u27": "(v)=>v*1e+15",
        "u28": "(v)=>v*1e+18",
        "u29": "(v)=>v*1e+21",
        "u30": "(v)=>v*1e+22",
        "u31": "(v)=>v*1e+23",
        "u32": "(v)=>v*1e+24",
        "u33": "(v)=>v*1e+25",
        "u34": "(v)=>v*1e+26",
        "u35": "(v)=>v*1e+27",
        "u36": "(v)=>v*1e+30",
        "u37": "(v)=>v*1e+33",
        "u38": "(v)=>v*1e+36",
        "u39": "(v)=>v*1e+39",
        "u40": "(v)=>v*1e+42",
        "u41": "(v)=>v*1e+45",
        "u42": "(v)=>v*1e+48",
        "u492": "(v)=>v*3.52739619495804e+25",
        "u493": "(v)=>v*2.20462262184878e+24",
        "u494": "(v)=>v*1.5747304441777e+23",
        "u495": "(v)=>v*1.10231131092439e+21",
        "u496": "(v)=>v*9.84206527611061e+20",
        "u497": "(v)=>v*5e+27"
      },
      "description": "A yottagram (Yg) is an SI unit of mass applying the yotta‑ prefix (10^24). One yottagram equals 1e+24 grams. The yotta prefix denotes a factor of 10^24, so 1 yottagram equals 10^24 grams. Such immensely large magnitudes are primarily encountered in planetary science and astrophysics. Yottagram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottagram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottagram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottagram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottagram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottagram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottagram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottagram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u23",
      "name": "zettagram",
      "shortName": "Zg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*0.001",
        "u24": "(v)=>v*1000",
        "u25": "(v)=>v*1000000",
        "u26": "(v)=>v*1000000000",
        "u27": "(v)=>v*1000000000000",
        "u28": "(v)=>v*1e+15",
        "u29": "(v)=>v*1e+18",
        "u30": "(v)=>v*1e+19",
        "u31": "(v)=>v*1e+20",
        "u32": "(v)=>v*1e+21",
        "u33": "(v)=>v*1e+22",
        "u34": "(v)=>v*1e+23",
        "u35": "(v)=>v*1e+24",
        "u36": "(v)=>v*1e+27",
        "u37": "(v)=>v*1e+30",
        "u38": "(v)=>v*1e+33",
        "u39": "(v)=>v*1e+36",
        "u40": "(v)=>v*1e+39",
        "u41": "(v)=>v*1e+42",
        "u42": "(v)=>v*1e+45",
        "u492": "(v)=>v*3.52739619495804e+22",
        "u493": "(v)=>v*2.20462262184878e+21",
        "u494": "(v)=>v*1.5747304441777e+20",
        "u495": "(v)=>v*1.10231131092439e+18",
        "u496": "(v)=>v*9.84206527611061e+17",
        "u497": "(v)=>v*5e+24"
      },
      "description": "A zettagram (Zg) is an SI unit of mass applying the zetta‑ prefix (10^21). One zettagram equals 1e+21 grams. The zetta prefix denotes a factor of 10^21, so 1 zettagram equals 10^21 grams. Such immensely large magnitudes are primarily encountered in planetary science and astrophysics. Zettagram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettagram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettagram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettagram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettagram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettagram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettagram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettagram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u24",
      "name": "exagram",
      "shortName": "Eg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-06",
        "u23": "(v)=>v*0.001",
        "u25": "(v)=>v*1000",
        "u26": "(v)=>v*1000000",
        "u27": "(v)=>v*1000000000",
        "u28": "(v)=>v*1000000000000",
        "u29": "(v)=>v*1e+15",
        "u30": "(v)=>v*1e+16",
        "u31": "(v)=>v*1e+17",
        "u32": "(v)=>v*1e+18",
        "u33": "(v)=>v*1e+19",
        "u34": "(v)=>v*1e+20",
        "u35": "(v)=>v*1e+21",
        "u36": "(v)=>v*1e+24",
        "u37": "(v)=>v*1e+27",
        "u38": "(v)=>v*1e+30",
        "u39": "(v)=>v*1e+33",
        "u40": "(v)=>v*1e+36",
        "u41": "(v)=>v*1e+39",
        "u42": "(v)=>v*1e+42",
        "u492": "(v)=>v*3.52739619495804e+19",
        "u493": "(v)=>v*2.20462262184878e+18",
        "u494": "(v)=>v*1.5747304441777e+17",
        "u495": "(v)=>v*1.10231131092439e+15",
        "u496": "(v)=>v*984206527611061",
        "u497": "(v)=>v*5e+21"
      },
      "description": "A exagram (Eg) is an SI unit of mass applying the exa‑ prefix (10^18). One exagram equals 1e+18 grams. The exa prefix denotes a factor of 10^18, so 1 exagram equals 10^18 grams. Such immensely large magnitudes are primarily encountered in planetary science and astrophysics. Exagram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exagram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exagram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exagram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exagram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exagram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exagram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exagram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u25",
      "name": "petagram",
      "shortName": "Pg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-09",
        "u23": "(v)=>v*1e-06",
        "u24": "(v)=>v*0.001",
        "u26": "(v)=>v*1000",
        "u27": "(v)=>v*1000000",
        "u28": "(v)=>v*1000000000",
        "u29": "(v)=>v*1000000000000",
        "u30": "(v)=>v*10000000000000",
        "u31": "(v)=>v*100000000000000",
        "u32": "(v)=>v*1e+15",
        "u33": "(v)=>v*1e+16",
        "u34": "(v)=>v*1e+17",
        "u35": "(v)=>v*1e+18",
        "u36": "(v)=>v*1e+21",
        "u37": "(v)=>v*1e+24",
        "u38": "(v)=>v*1e+27",
        "u39": "(v)=>v*1e+30",
        "u40": "(v)=>v*1e+33",
        "u41": "(v)=>v*1e+36",
        "u42": "(v)=>v*1e+39",
        "u492": "(v)=>v*3.52739619495804e+16",
        "u493": "(v)=>v*2.20462262184878e+15",
        "u494": "(v)=>v*157473044417770",
        "u495": "(v)=>v*1102311310924.39",
        "u496": "(v)=>v*984206527611.061",
        "u497": "(v)=>v*5e+18"
      },
      "description": "A petagram (Pg) is an SI unit of mass applying the peta‑ prefix (10^15). One petagram equals 1e+15 grams. The peta prefix denotes a factor of 10^15, so 1 petagram equals 10^15 grams. Such immensely large magnitudes are primarily encountered in planetary science and astrophysics. Petagram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petagram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petagram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petagram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petagram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petagram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petagram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petagram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u26",
      "name": "teragram",
      "shortName": "Tg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-12",
        "u23": "(v)=>v*1e-09",
        "u24": "(v)=>v*1e-06",
        "u25": "(v)=>v*0.001",
        "u27": "(v)=>v*1000",
        "u28": "(v)=>v*1000000",
        "u29": "(v)=>v*1000000000",
        "u30": "(v)=>v*10000000000",
        "u31": "(v)=>v*100000000000",
        "u32": "(v)=>v*1000000000000",
        "u33": "(v)=>v*10000000000000",
        "u34": "(v)=>v*100000000000000",
        "u35": "(v)=>v*1e+15",
        "u36": "(v)=>v*1e+18",
        "u37": "(v)=>v*1e+21",
        "u38": "(v)=>v*1e+24",
        "u39": "(v)=>v*1e+27",
        "u40": "(v)=>v*1e+30",
        "u41": "(v)=>v*1e+33",
        "u42": "(v)=>v*1e+36",
        "u492": "(v)=>v*35273961949580.4",
        "u493": "(v)=>v*2204622621848.78",
        "u494": "(v)=>v*157473044417.77",
        "u495": "(v)=>v*1102311310.92439",
        "u496": "(v)=>v*984206527.611061",
        "u497": "(v)=>v*5e+15"
      },
      "description": "A teragram (Tg) is an SI unit of mass applying the tera‑ prefix (10^12). One teragram equals 1e+12 grams. The tera prefix denotes a factor of 10^12, so 1 teragram equals 10^12 grams. Such immensely large magnitudes are primarily encountered in planetary science and astrophysics. Teragram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teragram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teragram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teragram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teragram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teragram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teragram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teragram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u27",
      "name": "gigagram",
      "shortName": "Gg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-15",
        "u23": "(v)=>v*1e-12",
        "u24": "(v)=>v*1e-09",
        "u25": "(v)=>v*1e-06",
        "u26": "(v)=>v*0.001",
        "u28": "(v)=>v*1000",
        "u29": "(v)=>v*1000000",
        "u30": "(v)=>v*10000000",
        "u31": "(v)=>v*100000000",
        "u32": "(v)=>v*1000000000",
        "u33": "(v)=>v*10000000000",
        "u34": "(v)=>v*100000000000",
        "u35": "(v)=>v*1000000000000",
        "u36": "(v)=>v*1e+15",
        "u37": "(v)=>v*1e+18",
        "u38": "(v)=>v*1e+21",
        "u39": "(v)=>v*1e+24",
        "u40": "(v)=>v*1e+27",
        "u41": "(v)=>v*1e+30",
        "u42": "(v)=>v*1e+33",
        "u492": "(v)=>v*35273961949.5804",
        "u493": "(v)=>v*2204622621.84878",
        "u494": "(v)=>v*157473044.41777",
        "u495": "(v)=>v*1102311.31092439",
        "u496": "(v)=>v*984206.527611061",
        "u497": "(v)=>v*5000000000000"
      },
      "description": "A gigagram (Gg) is an SI unit of mass applying the giga‑ prefix (10^9). One gigagram equals 1000000000 grams. The giga prefix denotes a factor of 10^9, so 1 gigagram equals 10^9 grams. Such very large magnitudes are primarily encountered in large‑scale industrial and environmental studies. Gigagram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigagram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigagram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigagram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigagram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigagram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigagram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigagram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u28",
      "name": "megagram",
      "shortName": "Mg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-18",
        "u23": "(v)=>v*1e-15",
        "u24": "(v)=>v*1e-12",
        "u25": "(v)=>v*1e-09",
        "u26": "(v)=>v*1e-06",
        "u27": "(v)=>v*0.001",
        "u29": "(v)=>v*1000",
        "u30": "(v)=>v*10000",
        "u31": "(v)=>v*100000",
        "u32": "(v)=>v*1000000",
        "u33": "(v)=>v*10000000",
        "u34": "(v)=>v*100000000",
        "u35": "(v)=>v*1000000000",
        "u36": "(v)=>v*1000000000000",
        "u37": "(v)=>v*1e+15",
        "u38": "(v)=>v*1e+18",
        "u39": "(v)=>v*1e+21",
        "u40": "(v)=>v*1e+24",
        "u41": "(v)=>v*1e+27",
        "u42": "(v)=>v*1e+30",
        "u492": "(v)=>v*35273961.9495804",
        "u493": "(v)=>v*2204622.62184878",
        "u494": "(v)=>v*157473.04441777",
        "u495": "(v)=>v*1102.31131092439",
        "u496": "(v)=>v*984.206527611061",
        "u497": "(v)=>v*5000000000"
      },
      "description": "A megagram (Mg) is an SI unit of mass applying the mega‑ prefix (10^6). One megagram equals 1000000 grams. The mega prefix denotes a factor of 10^6, so 1 megagram equals 10^6 grams. Such very large magnitudes are primarily encountered in large‑scale industrial and environmental studies. Megagram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megagram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megagram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megagram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megagram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megagram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megagram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megagram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u29",
      "name": "kilogram",
      "shortName": "kg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-21",
        "u23": "(v)=>v*1e-18",
        "u24": "(v)=>v*1e-15",
        "u25": "(v)=>v*1e-12",
        "u26": "(v)=>v*1e-09",
        "u27": "(v)=>v*1e-06",
        "u28": "(v)=>v*0.001",
        "u30": "(v)=>v*10",
        "u31": "(v)=>v*100",
        "u32": "(v)=>v*1000",
        "u33": "(v)=>v*10000",
        "u34": "(v)=>v*100000",
        "u35": "(v)=>v*1000000",
        "u36": "(v)=>v*1000000000",
        "u37": "(v)=>v*1000000000000",
        "u38": "(v)=>v*1e+15",
        "u39": "(v)=>v*1e+18",
        "u40": "(v)=>v*1e+21",
        "u41": "(v)=>v*1e+24",
        "u42": "(v)=>v*1e+27",
        "u492": "(v)=>v*35273.9619495804",
        "u493": "(v)=>v*2204.62262184878",
        "u494": "(v)=>v*157.47304441777",
        "u495": "(v)=>v*1.10231131092439",
        "u496": "(v)=>v*0.984206527611061",
        "u497": "(v)=>v*5000000"
      },
      "description": "**Kilogram – symbol kg**  \nThe kilogram is the SI base unit of mass and the only one demoted from a physical artefact to a pure constant of nature. Since 20 May 2019 (World Metrology Day) the kilogram has been defined by fixing the numerical value of Planck’s constant *h* to exactly 6.626 070 15 × 10‑34 J·s. In practice a sophisticated electromechanical **Kibble balance** equates mechanical power to electrical power traceable to quantum Hall and Josephson effects, realising the kilogram anywhere electricity and an atomic clock are available.\n\n**Evolution in a nutshell**  \n• 1795: defined as the mass of 1 dm³ of water at the melting point of ice  \n• 1889–2019: international prototype kilogram (IPK) – a platinum‑iridium cylinder kept near Paris  \n• 2019–present: constant‑of‑nature definition removing dependency on any material object\n\n**Everyday anchors & conversions**  \n• 1 kg ≈ 2.204 622 621 85 pounds (lb)  \n• 500 g = 0.5 kg (standard butter block)  \n• 1 000 kg = 1 tonne (t, metric ton)  \nThe kilogram powers commerce (grocery scales), health (body‑mass index), engineering (load calculations), and international trade documentation.",
      "standard": [
        "SI-base",
        "metric"
      ]
    },
    {
      "id": "u30",
      "name": "hectogram",
      "shortName": "hg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-22",
        "u23": "(v)=>v*1e-19",
        "u24": "(v)=>v*1e-16",
        "u25": "(v)=>v*1e-13",
        "u26": "(v)=>v*1e-10",
        "u27": "(v)=>v*1e-07",
        "u28": "(v)=>v*0.0001",
        "u29": "(v)=>v*0.1",
        "u31": "(v)=>v*10",
        "u32": "(v)=>v*100",
        "u33": "(v)=>v*1000",
        "u34": "(v)=>v*10000",
        "u35": "(v)=>v*100000",
        "u36": "(v)=>v*100000000",
        "u37": "(v)=>v*100000000000",
        "u38": "(v)=>v*100000000000000",
        "u39": "(v)=>v*1e+17",
        "u40": "(v)=>v*1e+20",
        "u41": "(v)=>v*1e+23",
        "u42": "(v)=>v*1e+26",
        "u492": "(v)=>v*3527.39619495804",
        "u493": "(v)=>v*220.462262184878",
        "u494": "(v)=>v*15.747304441777",
        "u495": "(v)=>v*0.110231131092439",
        "u496": "(v)=>v*0.0984206527611061",
        "u497": "(v)=>v*500000"
      },
      "description": "A hectogram (hg) is an SI unit of mass applying the hecto‑ prefix (10^2). One hectogram equals 100 grams. The hecto prefix denotes a factor of 10^2, so 1 hectogram equals 10^2 grams. Such scaled magnitudes are primarily encountered in routine laboratory and commercial practice. Hectogram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectogram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectogram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectogram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectogram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectogram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectogram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectogram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u31",
      "name": "decagram",
      "shortName": "dag",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-23",
        "u23": "(v)=>v*1e-20",
        "u24": "(v)=>v*1e-17",
        "u25": "(v)=>v*1e-14",
        "u26": "(v)=>v*1e-11",
        "u27": "(v)=>v*1e-08",
        "u28": "(v)=>v*1e-05",
        "u29": "(v)=>v*0.01",
        "u30": "(v)=>v*0.1",
        "u32": "(v)=>v*10",
        "u33": "(v)=>v*100",
        "u34": "(v)=>v*1000",
        "u35": "(v)=>v*10000",
        "u36": "(v)=>v*10000000",
        "u37": "(v)=>v*10000000000",
        "u38": "(v)=>v*10000000000000",
        "u39": "(v)=>v*1e+16",
        "u40": "(v)=>v*1e+19",
        "u41": "(v)=>v*1e+22",
        "u42": "(v)=>v*1e+25",
        "u492": "(v)=>v*352.739619495804",
        "u493": "(v)=>v*22.0462262184878",
        "u494": "(v)=>v*1.5747304441777",
        "u495": "(v)=>v*0.0110231131092439",
        "u496": "(v)=>v*0.00984206527611061",
        "u497": "(v)=>v*50000"
      },
      "description": "A decagram (dag) is an SI unit of mass applying the deca‑ prefix (10^1). One decagram equals 10 grams. The deca prefix denotes a factor of 10^1, so 1 decagram equals 10^1 grams. Such scaled magnitudes are primarily encountered in routine laboratory and commercial practice. Decagram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decagram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decagram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decagram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decagram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decagram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decagram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decagram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u32",
      "name": "gram",
      "shortName": "g",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-24",
        "u23": "(v)=>v*1e-21",
        "u24": "(v)=>v*1e-18",
        "u25": "(v)=>v*1e-15",
        "u26": "(v)=>v*1e-12",
        "u27": "(v)=>v*1e-09",
        "u28": "(v)=>v*1e-06",
        "u29": "(v)=>v*0.001",
        "u30": "(v)=>v*0.01",
        "u31": "(v)=>v*0.1",
        "u33": "(v)=>v*10",
        "u34": "(v)=>v*100",
        "u35": "(v)=>v*1000",
        "u36": "(v)=>v*1000000",
        "u37": "(v)=>v*1000000000",
        "u38": "(v)=>v*1000000000000",
        "u39": "(v)=>v*1e+15",
        "u40": "(v)=>v*1e+18",
        "u41": "(v)=>v*1e+21",
        "u42": "(v)=>v*1e+24",
        "u492": "(v)=>v*35.2739619495804",
        "u493": "(v)=>v*2.20462262184878",
        "u494": "(v)=>v*0.15747304441777",
        "u495": "(v)=>v*0.00110231131092439",
        "u496": "(v)=>v*0.000984206527611061",
        "u497": "(v)=>v*5000"
      },
      "description": "The gram (g) is a metric unit of mass equal to one‑thousandth of a kilogram. Gram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u33",
      "name": "decigram",
      "shortName": "dg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-25",
        "u23": "(v)=>v*1e-22",
        "u24": "(v)=>v*1e-19",
        "u25": "(v)=>v*1e-16",
        "u26": "(v)=>v*1e-13",
        "u27": "(v)=>v*1e-10",
        "u28": "(v)=>v*1e-07",
        "u29": "(v)=>v*0.0001",
        "u30": "(v)=>v*0.001",
        "u31": "(v)=>v*0.01",
        "u32": "(v)=>v*0.1",
        "u34": "(v)=>v*10",
        "u35": "(v)=>v*100",
        "u36": "(v)=>v*100000",
        "u37": "(v)=>v*100000000",
        "u38": "(v)=>v*100000000000",
        "u39": "(v)=>v*100000000000000",
        "u40": "(v)=>v*1e+17",
        "u41": "(v)=>v*1e+20",
        "u42": "(v)=>v*1e+23",
        "u492": "(v)=>v*3.52739619495804",
        "u493": "(v)=>v*0.220462262184878",
        "u494": "(v)=>v*0.015747304441777",
        "u495": "(v)=>v*0.000110231131092439",
        "u496": "(v)=>v*9.84206527611061e-05",
        "u497": "(v)=>v*500"
      },
      "description": "A decigram (dg) is an SI unit of mass applying the deci‑ prefix (10^-1). One decigram equals 0.1 grams. The deci prefix denotes a factor of 10^-1, so 1 decigram equals 10^-1 grams. Such scaled magnitudes are primarily encountered in routine laboratory and commercial practice. Decigram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decigram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decigram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decigram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decigram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decigram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decigram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decigram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u34",
      "name": "centigram",
      "shortName": "cg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-26",
        "u23": "(v)=>v*1e-23",
        "u24": "(v)=>v*1e-20",
        "u25": "(v)=>v*1e-17",
        "u26": "(v)=>v*1e-14",
        "u27": "(v)=>v*1e-11",
        "u28": "(v)=>v*1e-08",
        "u29": "(v)=>v*1e-05",
        "u30": "(v)=>v*0.0001",
        "u31": "(v)=>v*0.001",
        "u32": "(v)=>v*0.01",
        "u33": "(v)=>v*0.1",
        "u35": "(v)=>v*10",
        "u36": "(v)=>v*10000",
        "u37": "(v)=>v*10000000",
        "u38": "(v)=>v*10000000000",
        "u39": "(v)=>v*10000000000000",
        "u40": "(v)=>v*1e+16",
        "u41": "(v)=>v*1e+19",
        "u42": "(v)=>v*1e+22",
        "u492": "(v)=>v*0.352739619495804",
        "u493": "(v)=>v*0.0220462262184878",
        "u494": "(v)=>v*0.0015747304441777",
        "u495": "(v)=>v*1.10231131092439e-05",
        "u496": "(v)=>v*9.84206527611061e-06",
        "u497": "(v)=>v*50"
      },
      "description": "A centigram (cg) is an SI unit of mass applying the centi‑ prefix (10^-2). One centigram equals 0.01 grams. The centi prefix denotes a factor of 10^-2, so 1 centigram equals 10^-2 grams. Such scaled magnitudes are primarily encountered in routine laboratory and commercial practice. Centigram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centigram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centigram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centigram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centigram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centigram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centigram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centigram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u35",
      "name": "milligram",
      "shortName": "mg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-27",
        "u23": "(v)=>v*1e-24",
        "u24": "(v)=>v*1e-21",
        "u25": "(v)=>v*1e-18",
        "u26": "(v)=>v*1e-15",
        "u27": "(v)=>v*1e-12",
        "u28": "(v)=>v*1e-09",
        "u29": "(v)=>v*1e-06",
        "u30": "(v)=>v*1e-05",
        "u31": "(v)=>v*0.0001",
        "u32": "(v)=>v*0.001",
        "u33": "(v)=>v*0.01",
        "u34": "(v)=>v*0.1",
        "u36": "(v)=>v*1000",
        "u37": "(v)=>v*1000000",
        "u38": "(v)=>v*1000000000",
        "u39": "(v)=>v*1000000000000",
        "u40": "(v)=>v*1e+15",
        "u41": "(v)=>v*1e+18",
        "u42": "(v)=>v*1e+21",
        "u492": "(v)=>v*0.0352739619495804",
        "u493": "(v)=>v*0.00220462262184878",
        "u494": "(v)=>v*0.00015747304441777",
        "u495": "(v)=>v*1.10231131092439e-06",
        "u496": "(v)=>v*9.84206527611061e-07",
        "u497": "(v)=>v*5"
      },
      "description": "A milligram (mg) is an SI unit of mass applying the milli‑ prefix (10^-3). One milligram equals 0.001 grams. The milli prefix denotes a factor of 10^-3, so 1 milligram equals 10^-3 grams. Such scaled magnitudes are primarily encountered in routine laboratory and commercial practice. Milligram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of milligram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent milligram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, milligram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when milligram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding milligram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed milligram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of milligram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u36",
      "name": "microgram",
      "shortName": "μg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-30",
        "u23": "(v)=>v*1e-27",
        "u24": "(v)=>v*1e-24",
        "u25": "(v)=>v*1e-21",
        "u26": "(v)=>v*1e-18",
        "u27": "(v)=>v*1e-15",
        "u28": "(v)=>v*1e-12",
        "u29": "(v)=>v*1e-09",
        "u30": "(v)=>v*1e-08",
        "u31": "(v)=>v*1e-07",
        "u32": "(v)=>v*1e-06",
        "u33": "(v)=>v*1e-05",
        "u34": "(v)=>v*0.0001",
        "u35": "(v)=>v*0.001",
        "u37": "(v)=>v*1000",
        "u38": "(v)=>v*1000000",
        "u39": "(v)=>v*1000000000",
        "u40": "(v)=>v*1000000000000",
        "u41": "(v)=>v*1e+15",
        "u42": "(v)=>v*1e+18",
        "u492": "(v)=>v*3.52739619495804e-05",
        "u493": "(v)=>v*2.20462262184878e-06",
        "u494": "(v)=>v*1.5747304441777e-07",
        "u495": "(v)=>v*1.10231131092439e-09",
        "u496": "(v)=>v*9.84206527611061e-10",
        "u497": "(v)=>v*0.005"
      },
      "description": "A microgram (μg) is an SI unit of mass applying the micro‑ prefix (10^-6). One microgram equals 1e-06 grams. The micro prefix denotes a factor of 10^-6, so 1 microgram equals 10^-6 grams. Such very small magnitudes are primarily encountered in microbiology and analytical chemistry. Microgram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microgram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microgram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microgram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microgram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microgram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microgram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microgram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u37",
      "name": "nanogram",
      "shortName": "ng",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-33",
        "u23": "(v)=>v*1e-30",
        "u24": "(v)=>v*1e-27",
        "u25": "(v)=>v*1e-24",
        "u26": "(v)=>v*1e-21",
        "u27": "(v)=>v*1e-18",
        "u28": "(v)=>v*1e-15",
        "u29": "(v)=>v*1e-12",
        "u30": "(v)=>v*1e-11",
        "u31": "(v)=>v*1e-10",
        "u32": "(v)=>v*1e-09",
        "u33": "(v)=>v*1e-08",
        "u34": "(v)=>v*1e-07",
        "u35": "(v)=>v*1e-06",
        "u36": "(v)=>v*0.001",
        "u38": "(v)=>v*1000",
        "u39": "(v)=>v*1000000",
        "u40": "(v)=>v*1000000000",
        "u41": "(v)=>v*1000000000000",
        "u42": "(v)=>v*1e+15",
        "u492": "(v)=>v*3.52739619495804e-08",
        "u493": "(v)=>v*2.20462262184878e-09",
        "u494": "(v)=>v*1.5747304441777e-10",
        "u495": "(v)=>v*1.10231131092439e-12",
        "u496": "(v)=>v*9.84206527611061e-13",
        "u497": "(v)=>v*5e-06"
      },
      "description": "A nanogram (ng) is an SI unit of mass applying the nano‑ prefix (10^-9). One nanogram equals 1e-09 grams. The nano prefix denotes a factor of 10^-9, so 1 nanogram equals 10^-9 grams. Such very small magnitudes are primarily encountered in microbiology and analytical chemistry. Nanogram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanogram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanogram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanogram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanogram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanogram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanogram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanogram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u38",
      "name": "picogram",
      "shortName": "pg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-36",
        "u23": "(v)=>v*1e-33",
        "u24": "(v)=>v*1e-30",
        "u25": "(v)=>v*1e-27",
        "u26": "(v)=>v*1e-24",
        "u27": "(v)=>v*1e-21",
        "u28": "(v)=>v*1e-18",
        "u29": "(v)=>v*1e-15",
        "u30": "(v)=>v*1e-14",
        "u31": "(v)=>v*1e-13",
        "u32": "(v)=>v*1e-12",
        "u33": "(v)=>v*1e-11",
        "u34": "(v)=>v*1e-10",
        "u35": "(v)=>v*1e-09",
        "u36": "(v)=>v*1e-06",
        "u37": "(v)=>v*0.001",
        "u39": "(v)=>v*1000",
        "u40": "(v)=>v*1000000",
        "u41": "(v)=>v*1000000000",
        "u42": "(v)=>v*1000000000000",
        "u492": "(v)=>v*3.52739619495804e-11",
        "u493": "(v)=>v*2.20462262184878e-12",
        "u494": "(v)=>v*1.5747304441777e-13",
        "u495": "(v)=>v*1.10231131092439e-15",
        "u496": "(v)=>v*9.84206527611061e-16",
        "u497": "(v)=>v*5e-09"
      },
      "description": "A picogram (pg) is an SI unit of mass applying the pico‑ prefix (10^-12). One picogram equals 1e-12 grams. The pico prefix denotes a factor of 10^-12, so 1 picogram equals 10^-12 grams. Such extremely small magnitudes are primarily encountered in pharmaceutical and molecular research. Picogram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picogram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picogram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picogram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picogram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picogram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picogram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picogram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u39",
      "name": "femtogram",
      "shortName": "fg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-39",
        "u23": "(v)=>v*1e-36",
        "u24": "(v)=>v*1e-33",
        "u25": "(v)=>v*1e-30",
        "u26": "(v)=>v*1e-27",
        "u27": "(v)=>v*1e-24",
        "u28": "(v)=>v*1e-21",
        "u29": "(v)=>v*1e-18",
        "u30": "(v)=>v*1e-17",
        "u31": "(v)=>v*1e-16",
        "u32": "(v)=>v*1e-15",
        "u33": "(v)=>v*1e-14",
        "u34": "(v)=>v*1e-13",
        "u35": "(v)=>v*1e-12",
        "u36": "(v)=>v*1e-09",
        "u37": "(v)=>v*1e-06",
        "u38": "(v)=>v*0.001",
        "u40": "(v)=>v*1000",
        "u41": "(v)=>v*1000000",
        "u42": "(v)=>v*1000000000",
        "u492": "(v)=>v*3.52739619495804e-14",
        "u493": "(v)=>v*2.20462262184878e-15",
        "u494": "(v)=>v*1.5747304441777e-16",
        "u495": "(v)=>v*1.10231131092439e-18",
        "u496": "(v)=>v*9.84206527611061e-19",
        "u497": "(v)=>v*5e-12"
      },
      "description": "A femtogram (fg) is an SI unit of mass applying the femto‑ prefix (10^-15). One femtogram equals 1e-15 grams. The femto prefix denotes a factor of 10^-15, so 1 femtogram equals 10^-15 grams. Such extremely small magnitudes are primarily encountered in pharmaceutical and molecular research. Femtogram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtogram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtogram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtogram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtogram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtogram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtogram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtogram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u40",
      "name": "attogram",
      "shortName": "ag",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-42",
        "u23": "(v)=>v*1e-39",
        "u24": "(v)=>v*1e-36",
        "u25": "(v)=>v*1e-33",
        "u26": "(v)=>v*1e-30",
        "u27": "(v)=>v*1e-27",
        "u28": "(v)=>v*1e-24",
        "u29": "(v)=>v*1e-21",
        "u30": "(v)=>v*1e-20",
        "u31": "(v)=>v*1e-19",
        "u32": "(v)=>v*1e-18",
        "u33": "(v)=>v*1e-17",
        "u34": "(v)=>v*1e-16",
        "u35": "(v)=>v*1e-15",
        "u36": "(v)=>v*1e-12",
        "u37": "(v)=>v*1e-09",
        "u38": "(v)=>v*1e-06",
        "u39": "(v)=>v*0.001",
        "u41": "(v)=>v*1000",
        "u42": "(v)=>v*1000000",
        "u492": "(v)=>v*3.52739619495804e-17",
        "u493": "(v)=>v*2.20462262184878e-18",
        "u494": "(v)=>v*1.5747304441777e-19",
        "u495": "(v)=>v*1.10231131092439e-21",
        "u496": "(v)=>v*9.84206527611061e-22",
        "u497": "(v)=>v*5e-15"
      },
      "description": "A attogram (ag) is an SI unit of mass applying the atto‑ prefix (10^-18). One attogram equals 1e-18 grams. The atto prefix denotes a factor of 10^-18, so 1 attogram equals 10^-18 grams. Such extremely small magnitudes are primarily encountered in pharmaceutical and molecular research. Attogram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attogram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attogram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attogram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attogram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attogram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attogram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attogram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u41",
      "name": "zeptogram",
      "shortName": "zg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-45",
        "u23": "(v)=>v*1e-42",
        "u24": "(v)=>v*1e-39",
        "u25": "(v)=>v*1e-36",
        "u26": "(v)=>v*1e-33",
        "u27": "(v)=>v*1e-30",
        "u28": "(v)=>v*1e-27",
        "u29": "(v)=>v*1e-24",
        "u30": "(v)=>v*1e-23",
        "u31": "(v)=>v*1e-22",
        "u32": "(v)=>v*1e-21",
        "u33": "(v)=>v*1e-20",
        "u34": "(v)=>v*1e-19",
        "u35": "(v)=>v*1e-18",
        "u36": "(v)=>v*1e-15",
        "u37": "(v)=>v*1e-12",
        "u38": "(v)=>v*1e-09",
        "u39": "(v)=>v*1e-06",
        "u40": "(v)=>v*0.001",
        "u42": "(v)=>v*1000",
        "u492": "(v)=>v*3.52739619495804e-20",
        "u493": "(v)=>v*2.20462262184878e-21",
        "u494": "(v)=>v*1.5747304441777e-22",
        "u495": "(v)=>v*1.10231131092439e-24",
        "u496": "(v)=>v*9.84206527611061e-25",
        "u497": "(v)=>v*5e-18"
      },
      "description": "A zeptogram (zg) is an SI unit of mass applying the zepto‑ prefix (10^-21). One zeptogram equals 1e-21 grams. The zepto prefix denotes a factor of 10^-21, so 1 zeptogram equals 10^-21 grams. Such extremely small magnitudes are primarily encountered in pharmaceutical and molecular research. Zeptogram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptogram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptogram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptogram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptogram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptogram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptogram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptogram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u42",
      "name": "yoctogram",
      "shortName": "yg",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1e-48",
        "u23": "(v)=>v*1e-45",
        "u24": "(v)=>v*1e-42",
        "u25": "(v)=>v*1e-39",
        "u26": "(v)=>v*1e-36",
        "u27": "(v)=>v*1e-33",
        "u28": "(v)=>v*1e-30",
        "u29": "(v)=>v*1e-27",
        "u30": "(v)=>v*1e-26",
        "u31": "(v)=>v*1e-25",
        "u32": "(v)=>v*1e-24",
        "u33": "(v)=>v*1e-23",
        "u34": "(v)=>v*1e-22",
        "u35": "(v)=>v*1e-21",
        "u36": "(v)=>v*1e-18",
        "u37": "(v)=>v*1e-15",
        "u38": "(v)=>v*1e-12",
        "u39": "(v)=>v*1e-09",
        "u40": "(v)=>v*1e-06",
        "u41": "(v)=>v*0.001",
        "u492": "(v)=>v*3.52739619495804e-23",
        "u493": "(v)=>v*2.20462262184878e-24",
        "u494": "(v)=>v*1.5747304441777e-25",
        "u495": "(v)=>v*1.10231131092439e-27",
        "u496": "(v)=>v*9.84206527611061e-28",
        "u497": "(v)=>v*5e-21"
      },
      "description": "A yoctogram (yg) is an SI unit of mass applying the yocto‑ prefix (10^-24). One yoctogram equals 1e-24 grams. The yocto prefix denotes a factor of 10^-24, so 1 yoctogram equals 10^-24 grams. Such extremely small magnitudes are primarily encountered in pharmaceutical and molecular research. Yoctogram belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctogram often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctogram as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctogram is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctogram values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctogram has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctogram metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctogram fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u43",
      "name": "yottaliter",
      "shortName": "YL",
      "categoryId": "c28",
      "conversions": {
        "u44": "(v)=>v*1000",
        "u45": "(v)=>v*1000000",
        "u46": "(v)=>v*1000000000",
        "u47": "(v)=>v*1000000000000",
        "u48": "(v)=>v*1e+15",
        "u49": "(v)=>v*1e+18",
        "u50": "(v)=>v*1e+21",
        "u51": "(v)=>v*1e+22",
        "u52": "(v)=>v*1e+23",
        "u53": "(v)=>v*1e+24",
        "u54": "(v)=>v*1e+25",
        "u55": "(v)=>v*1e+26",
        "u56": "(v)=>v*1e+27",
        "u57": "(v)=>v*1e+30",
        "u58": "(v)=>v*1e+33",
        "u59": "(v)=>v*1e+36",
        "u60": "(v)=>v*1e+39",
        "u61": "(v)=>v*1e+42",
        "u62": "(v)=>v*1e+45",
        "u63": "(v)=>v*1e+48",
        "u486": "(v)=>v*2.64172052358148e+23",
        "u487": "(v)=>v*1.05668820943259e+24",
        "u488": "(v)=>v*2.11337641886519e+24",
        "u489": "(v)=>v*4.22675283773037e+24",
        "u490": "(v)=>v*6.7628045403686e+25",
        "u491": "(v)=>v*2.02884136211058e+26"
      },
      "description": "A yottaliter (YL) is an SI unit of volume applying the yotta‑ prefix (10^24). One yottaliter equals 1e+24 liters. The yotta prefix denotes a factor of 10^24, so 1 yottaliter equals 10^24 liters. Such immensely large magnitudes are primarily encountered in astronomical and cosmological calculations. Yottaliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottaliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottaliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottaliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottaliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottaliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottaliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottaliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u44",
      "name": "zettaliter",
      "shortName": "ZL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*0.001",
        "u45": "(v)=>v*1000",
        "u46": "(v)=>v*1000000",
        "u47": "(v)=>v*1000000000",
        "u48": "(v)=>v*1000000000000",
        "u49": "(v)=>v*1e+15",
        "u50": "(v)=>v*1e+18",
        "u51": "(v)=>v*1e+19",
        "u52": "(v)=>v*1e+20",
        "u53": "(v)=>v*1e+21",
        "u54": "(v)=>v*1e+22",
        "u55": "(v)=>v*1e+23",
        "u56": "(v)=>v*1e+24",
        "u57": "(v)=>v*1e+27",
        "u58": "(v)=>v*1e+30",
        "u59": "(v)=>v*1e+33",
        "u60": "(v)=>v*1e+36",
        "u61": "(v)=>v*1e+39",
        "u62": "(v)=>v*1e+42",
        "u63": "(v)=>v*1e+45",
        "u486": "(v)=>v*2.64172052358148e+20",
        "u487": "(v)=>v*1.05668820943259e+21",
        "u488": "(v)=>v*2.11337641886519e+21",
        "u489": "(v)=>v*4.22675283773037e+21",
        "u490": "(v)=>v*6.7628045403686e+22",
        "u491": "(v)=>v*2.02884136211058e+23"
      },
      "description": "A zettaliter (ZL) is an SI unit of volume applying the zetta‑ prefix (10^21). One zettaliter equals 1e+21 liters. The zetta prefix denotes a factor of 10^21, so 1 zettaliter equals 10^21 liters. Such immensely large magnitudes are primarily encountered in astronomical and cosmological calculations. Zettaliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettaliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettaliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettaliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettaliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettaliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettaliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettaliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u45",
      "name": "exaliter",
      "shortName": "EL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-06",
        "u44": "(v)=>v*0.001",
        "u46": "(v)=>v*1000",
        "u47": "(v)=>v*1000000",
        "u48": "(v)=>v*1000000000",
        "u49": "(v)=>v*1000000000000",
        "u50": "(v)=>v*1e+15",
        "u51": "(v)=>v*1e+16",
        "u52": "(v)=>v*1e+17",
        "u53": "(v)=>v*1e+18",
        "u54": "(v)=>v*1e+19",
        "u55": "(v)=>v*1e+20",
        "u56": "(v)=>v*1e+21",
        "u57": "(v)=>v*1e+24",
        "u58": "(v)=>v*1e+27",
        "u59": "(v)=>v*1e+30",
        "u60": "(v)=>v*1e+33",
        "u61": "(v)=>v*1e+36",
        "u62": "(v)=>v*1e+39",
        "u63": "(v)=>v*1e+42",
        "u486": "(v)=>v*2.64172052358148e+17",
        "u487": "(v)=>v*1.05668820943259e+18",
        "u488": "(v)=>v*2.11337641886519e+18",
        "u489": "(v)=>v*4.22675283773037e+18",
        "u490": "(v)=>v*6.7628045403686e+19",
        "u491": "(v)=>v*2.02884136211058e+20"
      },
      "description": "A exaliter (EL) is an SI unit of volume applying the exa‑ prefix (10^18). One exaliter equals 1e+18 liters. The exa prefix denotes a factor of 10^18, so 1 exaliter equals 10^18 liters. Such immensely large magnitudes are primarily encountered in astronomical and cosmological calculations. Exaliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exaliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exaliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exaliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exaliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exaliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exaliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exaliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u46",
      "name": "petaliter",
      "shortName": "PL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-09",
        "u44": "(v)=>v*1e-06",
        "u45": "(v)=>v*0.001",
        "u47": "(v)=>v*1000",
        "u48": "(v)=>v*1000000",
        "u49": "(v)=>v*1000000000",
        "u50": "(v)=>v*1000000000000",
        "u51": "(v)=>v*10000000000000",
        "u52": "(v)=>v*100000000000000",
        "u53": "(v)=>v*1e+15",
        "u54": "(v)=>v*1e+16",
        "u55": "(v)=>v*1e+17",
        "u56": "(v)=>v*1e+18",
        "u57": "(v)=>v*1e+21",
        "u58": "(v)=>v*1e+24",
        "u59": "(v)=>v*1e+27",
        "u60": "(v)=>v*1e+30",
        "u61": "(v)=>v*1e+33",
        "u62": "(v)=>v*1e+36",
        "u63": "(v)=>v*1e+39",
        "u486": "(v)=>v*264172052358148",
        "u487": "(v)=>v*1.05668820943259e+15",
        "u488": "(v)=>v*2.11337641886519e+15",
        "u489": "(v)=>v*4.22675283773038e+15",
        "u490": "(v)=>v*6.7628045403686e+16",
        "u491": "(v)=>v*2.02884136211058e+17"
      },
      "description": "A petaliter (PL) is an SI unit of volume applying the peta‑ prefix (10^15). One petaliter equals 1e+15 liters. The peta prefix denotes a factor of 10^15, so 1 petaliter equals 10^15 liters. Such immensely large magnitudes are primarily encountered in astronomical and cosmological calculations. Petaliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petaliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petaliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petaliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petaliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petaliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petaliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petaliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u47",
      "name": "teraliter",
      "shortName": "TL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-12",
        "u44": "(v)=>v*1e-09",
        "u45": "(v)=>v*1e-06",
        "u46": "(v)=>v*0.001",
        "u48": "(v)=>v*1000",
        "u49": "(v)=>v*1000000",
        "u50": "(v)=>v*1000000000",
        "u51": "(v)=>v*10000000000",
        "u52": "(v)=>v*100000000000",
        "u53": "(v)=>v*1000000000000",
        "u54": "(v)=>v*10000000000000",
        "u55": "(v)=>v*100000000000000",
        "u56": "(v)=>v*1e+15",
        "u57": "(v)=>v*1e+18",
        "u58": "(v)=>v*1e+21",
        "u59": "(v)=>v*1e+24",
        "u60": "(v)=>v*1e+27",
        "u61": "(v)=>v*1e+30",
        "u62": "(v)=>v*1e+33",
        "u63": "(v)=>v*1e+36",
        "u486": "(v)=>v*264172052358.148",
        "u487": "(v)=>v*1056688209432.59",
        "u488": "(v)=>v*2113376418865.19",
        "u489": "(v)=>v*4226752837730.38",
        "u490": "(v)=>v*67628045403686",
        "u491": "(v)=>v*202884136211058"
      },
      "description": "A teraliter (TL) is an SI unit of volume applying the tera‑ prefix (10^12). One teraliter equals 1e+12 liters. The tera prefix denotes a factor of 10^12, so 1 teraliter equals 10^12 liters. Such immensely large magnitudes are primarily encountered in astronomical and cosmological calculations. Teraliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teraliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teraliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teraliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teraliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teraliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teraliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teraliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u48",
      "name": "gigaliter",
      "shortName": "GL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-15",
        "u44": "(v)=>v*1e-12",
        "u45": "(v)=>v*1e-09",
        "u46": "(v)=>v*1e-06",
        "u47": "(v)=>v*0.001",
        "u49": "(v)=>v*1000",
        "u50": "(v)=>v*1000000",
        "u51": "(v)=>v*10000000",
        "u52": "(v)=>v*100000000",
        "u53": "(v)=>v*1000000000",
        "u54": "(v)=>v*10000000000",
        "u55": "(v)=>v*100000000000",
        "u56": "(v)=>v*1000000000000",
        "u57": "(v)=>v*1e+15",
        "u58": "(v)=>v*1e+18",
        "u59": "(v)=>v*1e+21",
        "u60": "(v)=>v*1e+24",
        "u61": "(v)=>v*1e+27",
        "u62": "(v)=>v*1e+30",
        "u63": "(v)=>v*1e+33",
        "u486": "(v)=>v*264172052.358148",
        "u487": "(v)=>v*1056688209.43259",
        "u488": "(v)=>v*2113376418.86519",
        "u489": "(v)=>v*4226752837.73037",
        "u490": "(v)=>v*67628045403.686",
        "u491": "(v)=>v*202884136211.058"
      },
      "description": "A gigaliter (GL) is an SI unit of volume applying the giga‑ prefix (10^9). One gigaliter equals 1000000000 liters. The giga prefix denotes a factor of 10^9, so 1 gigaliter equals 10^9 liters. Such very large magnitudes are primarily encountered in planetary‑scale geoscience and space‑flight trajectory work. Gigaliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigaliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigaliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigaliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigaliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigaliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigaliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigaliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u49",
      "name": "megaliter",
      "shortName": "ML",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-18",
        "u44": "(v)=>v*1e-15",
        "u45": "(v)=>v*1e-12",
        "u46": "(v)=>v*1e-09",
        "u47": "(v)=>v*1e-06",
        "u48": "(v)=>v*0.001",
        "u50": "(v)=>v*1000",
        "u51": "(v)=>v*10000",
        "u52": "(v)=>v*100000",
        "u53": "(v)=>v*1000000",
        "u54": "(v)=>v*10000000",
        "u55": "(v)=>v*100000000",
        "u56": "(v)=>v*1000000000",
        "u57": "(v)=>v*1000000000000",
        "u58": "(v)=>v*1e+15",
        "u59": "(v)=>v*1e+18",
        "u60": "(v)=>v*1e+21",
        "u61": "(v)=>v*1e+24",
        "u62": "(v)=>v*1e+27",
        "u63": "(v)=>v*1e+30",
        "u486": "(v)=>v*264172.052358148",
        "u487": "(v)=>v*1056688.20943259",
        "u488": "(v)=>v*2113376.41886519",
        "u489": "(v)=>v*4226752.83773038",
        "u490": "(v)=>v*67628045.403686",
        "u491": "(v)=>v*202884136.211058"
      },
      "description": "A megaliter (ML) is an SI unit of volume applying the mega‑ prefix (10^6). One megaliter equals 1000000 liters. The mega prefix denotes a factor of 10^6, so 1 megaliter equals 10^6 liters. Such very large magnitudes are primarily encountered in planetary‑scale geoscience and space‑flight trajectory work. Megaliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megaliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megaliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megaliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megaliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megaliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megaliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megaliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u50",
      "name": "kiloliter",
      "shortName": "kL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-21",
        "u44": "(v)=>v*1e-18",
        "u45": "(v)=>v*1e-15",
        "u46": "(v)=>v*1e-12",
        "u47": "(v)=>v*1e-09",
        "u48": "(v)=>v*1e-06",
        "u49": "(v)=>v*0.001",
        "u51": "(v)=>v*10",
        "u52": "(v)=>v*100",
        "u53": "(v)=>v*1000",
        "u54": "(v)=>v*10000",
        "u55": "(v)=>v*100000",
        "u56": "(v)=>v*1000000",
        "u57": "(v)=>v*1000000000",
        "u58": "(v)=>v*1000000000000",
        "u59": "(v)=>v*1e+15",
        "u60": "(v)=>v*1e+18",
        "u61": "(v)=>v*1e+21",
        "u62": "(v)=>v*1e+24",
        "u63": "(v)=>v*1e+27",
        "u486": "(v)=>v*264.172052358148",
        "u487": "(v)=>v*1056.68820943259",
        "u488": "(v)=>v*2113.37641886519",
        "u489": "(v)=>v*4226.75283773038",
        "u490": "(v)=>v*67628.045403686",
        "u491": "(v)=>v*202884.136211058"
      },
      "description": "A kiloliter (kL) is an SI unit of volume applying the kilo‑ prefix (10^3). One kiloliter equals 1000 liters. The kilo prefix denotes a factor of 10^3, so 1 kiloliter equals 10^3 liters. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Kiloliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kiloliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kiloliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kiloliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kiloliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kiloliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kiloliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kiloliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u51",
      "name": "hectoliter",
      "shortName": "hL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-22",
        "u44": "(v)=>v*1e-19",
        "u45": "(v)=>v*1e-16",
        "u46": "(v)=>v*1e-13",
        "u47": "(v)=>v*1e-10",
        "u48": "(v)=>v*1e-07",
        "u49": "(v)=>v*0.0001",
        "u50": "(v)=>v*0.1",
        "u52": "(v)=>v*10",
        "u53": "(v)=>v*100",
        "u54": "(v)=>v*1000",
        "u55": "(v)=>v*10000",
        "u56": "(v)=>v*100000",
        "u57": "(v)=>v*100000000",
        "u58": "(v)=>v*100000000000",
        "u59": "(v)=>v*100000000000000",
        "u60": "(v)=>v*1e+17",
        "u61": "(v)=>v*1e+20",
        "u62": "(v)=>v*1e+23",
        "u63": "(v)=>v*1e+26",
        "u486": "(v)=>v*26.4172052358148",
        "u487": "(v)=>v*105.668820943259",
        "u488": "(v)=>v*211.337641886519",
        "u489": "(v)=>v*422.675283773037",
        "u490": "(v)=>v*6762.8045403686",
        "u491": "(v)=>v*20288.4136211058"
      },
      "description": "A hectoliter (hL) is an SI unit of volume applying the hecto‑ prefix (10^2). One hectoliter equals 100 liters. The hecto prefix denotes a factor of 10^2, so 1 hectoliter equals 10^2 liters. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Hectoliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectoliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectoliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectoliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectoliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectoliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectoliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectoliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u52",
      "name": "decaliter",
      "shortName": "daL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-23",
        "u44": "(v)=>v*1e-20",
        "u45": "(v)=>v*1e-17",
        "u46": "(v)=>v*1e-14",
        "u47": "(v)=>v*1e-11",
        "u48": "(v)=>v*1e-08",
        "u49": "(v)=>v*1e-05",
        "u50": "(v)=>v*0.01",
        "u51": "(v)=>v*0.1",
        "u53": "(v)=>v*10",
        "u54": "(v)=>v*100",
        "u55": "(v)=>v*1000",
        "u56": "(v)=>v*10000",
        "u57": "(v)=>v*10000000",
        "u58": "(v)=>v*10000000000",
        "u59": "(v)=>v*10000000000000",
        "u60": "(v)=>v*1e+16",
        "u61": "(v)=>v*1e+19",
        "u62": "(v)=>v*1e+22",
        "u63": "(v)=>v*1e+25",
        "u486": "(v)=>v*2.64172052358148",
        "u487": "(v)=>v*10.5668820943259",
        "u488": "(v)=>v*21.1337641886519",
        "u489": "(v)=>v*42.2675283773037",
        "u490": "(v)=>v*676.28045403686",
        "u491": "(v)=>v*2028.84136211058"
      },
      "description": "A decaliter (daL) is an SI unit of volume applying the deca‑ prefix (10^1). One decaliter equals 10 liters. The deca prefix denotes a factor of 10^1, so 1 decaliter equals 10^1 liters. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Decaliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decaliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decaliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decaliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decaliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decaliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decaliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decaliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u53",
      "name": "liter",
      "shortName": "L",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-24",
        "u44": "(v)=>v*1e-21",
        "u45": "(v)=>v*1e-18",
        "u46": "(v)=>v*1e-15",
        "u47": "(v)=>v*1e-12",
        "u48": "(v)=>v*1e-09",
        "u49": "(v)=>v*1e-06",
        "u50": "(v)=>v*0.001",
        "u51": "(v)=>v*0.01",
        "u52": "(v)=>v*0.1",
        "u54": "(v)=>v*10",
        "u55": "(v)=>v*100",
        "u56": "(v)=>v*1000",
        "u57": "(v)=>v*1000000",
        "u58": "(v)=>v*1000000000",
        "u59": "(v)=>v*1000000000000",
        "u60": "(v)=>v*1e+15",
        "u61": "(v)=>v*1e+18",
        "u62": "(v)=>v*1e+21",
        "u63": "(v)=>v*1e+24",
        "u486": "(v)=>v*0.264172052358148",
        "u487": "(v)=>v*1.05668820943259",
        "u488": "(v)=>v*2.11337641886519",
        "u489": "(v)=>v*4.22675283773038",
        "u490": "(v)=>v*67.628045403686",
        "u491": "(v)=>v*202.884136211058"
      },
      "description": "The litre (L) is a non‑SI unit of volume accepted for use with the SI, equal to one cubic decimetre (0.001 m³). Liter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of liter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent liter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, liter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when liter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding liter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed liter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of liter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted"
      ]
    },
    {
      "id": "u54",
      "name": "deciliter",
      "shortName": "dL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-25",
        "u44": "(v)=>v*1e-22",
        "u45": "(v)=>v*1e-19",
        "u46": "(v)=>v*1e-16",
        "u47": "(v)=>v*1e-13",
        "u48": "(v)=>v*1e-10",
        "u49": "(v)=>v*1e-07",
        "u50": "(v)=>v*0.0001",
        "u51": "(v)=>v*0.001",
        "u52": "(v)=>v*0.01",
        "u53": "(v)=>v*0.1",
        "u55": "(v)=>v*10",
        "u56": "(v)=>v*100",
        "u57": "(v)=>v*100000",
        "u58": "(v)=>v*100000000",
        "u59": "(v)=>v*100000000000",
        "u60": "(v)=>v*100000000000000",
        "u61": "(v)=>v*1e+17",
        "u62": "(v)=>v*1e+20",
        "u63": "(v)=>v*1e+23",
        "u486": "(v)=>v*0.0264172052358148",
        "u487": "(v)=>v*0.105668820943259",
        "u488": "(v)=>v*0.211337641886519",
        "u489": "(v)=>v*0.422675283773037",
        "u490": "(v)=>v*6.7628045403686",
        "u491": "(v)=>v*20.2884136211058"
      },
      "description": "A deciliter (dL) is an SI unit of volume applying the deci‑ prefix (10^-1). One deciliter equals 0.1 liters. The deci prefix denotes a factor of 10^-1, so 1 deciliter equals 10^-1 liters. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Deciliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of deciliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent deciliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, deciliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when deciliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding deciliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed deciliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of deciliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u55",
      "name": "centiliter",
      "shortName": "cL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-26",
        "u44": "(v)=>v*1e-23",
        "u45": "(v)=>v*1e-20",
        "u46": "(v)=>v*1e-17",
        "u47": "(v)=>v*1e-14",
        "u48": "(v)=>v*1e-11",
        "u49": "(v)=>v*1e-08",
        "u50": "(v)=>v*1e-05",
        "u51": "(v)=>v*0.0001",
        "u52": "(v)=>v*0.001",
        "u53": "(v)=>v*0.01",
        "u54": "(v)=>v*0.1",
        "u56": "(v)=>v*10",
        "u57": "(v)=>v*10000",
        "u58": "(v)=>v*10000000",
        "u59": "(v)=>v*10000000000",
        "u60": "(v)=>v*10000000000000",
        "u61": "(v)=>v*1e+16",
        "u62": "(v)=>v*1e+19",
        "u63": "(v)=>v*1e+22",
        "u486": "(v)=>v*0.00264172052358148",
        "u487": "(v)=>v*0.0105668820943259",
        "u488": "(v)=>v*0.0211337641886519",
        "u489": "(v)=>v*0.0422675283773037",
        "u490": "(v)=>v*0.67628045403686",
        "u491": "(v)=>v*2.02884136211058"
      },
      "description": "A centiliter (cL) is an SI unit of volume applying the centi‑ prefix (10^-2). One centiliter equals 0.01 liters. The centi prefix denotes a factor of 10^-2, so 1 centiliter equals 10^-2 liters. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Centiliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centiliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centiliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centiliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centiliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centiliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centiliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centiliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u56",
      "name": "milliliter",
      "shortName": "mL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-27",
        "u44": "(v)=>v*1e-24",
        "u45": "(v)=>v*1e-21",
        "u46": "(v)=>v*1e-18",
        "u47": "(v)=>v*1e-15",
        "u48": "(v)=>v*1e-12",
        "u49": "(v)=>v*1e-09",
        "u50": "(v)=>v*1e-06",
        "u51": "(v)=>v*1e-05",
        "u52": "(v)=>v*0.0001",
        "u53": "(v)=>v*0.001",
        "u54": "(v)=>v*0.01",
        "u55": "(v)=>v*0.1",
        "u57": "(v)=>v*1000",
        "u58": "(v)=>v*1000000",
        "u59": "(v)=>v*1000000000",
        "u60": "(v)=>v*1000000000000",
        "u61": "(v)=>v*1e+15",
        "u62": "(v)=>v*1e+18",
        "u63": "(v)=>v*1e+21",
        "u486": "(v)=>v*0.000264172052358148",
        "u487": "(v)=>v*0.00105668820943259",
        "u488": "(v)=>v*0.00211337641886519",
        "u489": "(v)=>v*0.00422675283773037",
        "u490": "(v)=>v*0.067628045403686",
        "u491": "(v)=>v*0.202884136211058"
      },
      "description": "A milliliter (mL) is an SI unit of volume applying the milli‑ prefix (10^-3). One milliliter equals 0.001 liters. The milli prefix denotes a factor of 10^-3, so 1 milliliter equals 10^-3 liters. Such scaled magnitudes are primarily encountered in everyday engineering and surveying. Milliliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of milliliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent milliliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, milliliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when milliliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding milliliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed milliliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of milliliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u57",
      "name": "microliter",
      "shortName": "μL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-30",
        "u44": "(v)=>v*1e-27",
        "u45": "(v)=>v*1e-24",
        "u46": "(v)=>v*1e-21",
        "u47": "(v)=>v*1e-18",
        "u48": "(v)=>v*1e-15",
        "u49": "(v)=>v*1e-12",
        "u50": "(v)=>v*1e-09",
        "u51": "(v)=>v*1e-08",
        "u52": "(v)=>v*1e-07",
        "u53": "(v)=>v*1e-06",
        "u54": "(v)=>v*1e-05",
        "u55": "(v)=>v*0.0001",
        "u56": "(v)=>v*0.001",
        "u58": "(v)=>v*1000",
        "u59": "(v)=>v*1000000",
        "u60": "(v)=>v*1000000000",
        "u61": "(v)=>v*1000000000000",
        "u62": "(v)=>v*1e+15",
        "u63": "(v)=>v*1e+18",
        "u486": "(v)=>v*2.64172052358148e-07",
        "u487": "(v)=>v*1.05668820943259e-06",
        "u488": "(v)=>v*2.11337641886519e-06",
        "u489": "(v)=>v*4.22675283773037e-06",
        "u490": "(v)=>v*6.7628045403686e-05",
        "u491": "(v)=>v*0.000202884136211058"
      },
      "description": "A microliter (μL) is an SI unit of volume applying the micro‑ prefix (10^-6). One microliter equals 1e-06 liters. The micro prefix denotes a factor of 10^-6, so 1 microliter equals 10^-6 liters. Such very small magnitudes are primarily encountered in nanotechnology and materials science. Microliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u58",
      "name": "nanoliter",
      "shortName": "nL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-33",
        "u44": "(v)=>v*1e-30",
        "u45": "(v)=>v*1e-27",
        "u46": "(v)=>v*1e-24",
        "u47": "(v)=>v*1e-21",
        "u48": "(v)=>v*1e-18",
        "u49": "(v)=>v*1e-15",
        "u50": "(v)=>v*1e-12",
        "u51": "(v)=>v*1e-11",
        "u52": "(v)=>v*1e-10",
        "u53": "(v)=>v*1e-09",
        "u54": "(v)=>v*1e-08",
        "u55": "(v)=>v*1e-07",
        "u56": "(v)=>v*1e-06",
        "u57": "(v)=>v*0.001",
        "u59": "(v)=>v*1000",
        "u60": "(v)=>v*1000000",
        "u61": "(v)=>v*1000000000",
        "u62": "(v)=>v*1000000000000",
        "u63": "(v)=>v*1e+15",
        "u486": "(v)=>v*2.64172052358148e-10",
        "u487": "(v)=>v*1.05668820943259e-09",
        "u488": "(v)=>v*2.11337641886519e-09",
        "u489": "(v)=>v*4.22675283773037e-09",
        "u490": "(v)=>v*6.7628045403686e-08",
        "u491": "(v)=>v*2.02884136211058e-07"
      },
      "description": "A nanoliter (nL) is an SI unit of volume applying the nano‑ prefix (10^-9). One nanoliter equals 1e-09 liters. The nano prefix denotes a factor of 10^-9, so 1 nanoliter equals 10^-9 liters. Such very small magnitudes are primarily encountered in nanotechnology and materials science. Nanoliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanoliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanoliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanoliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanoliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanoliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanoliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanoliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u59",
      "name": "picoliter",
      "shortName": "pL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-36",
        "u44": "(v)=>v*1e-33",
        "u45": "(v)=>v*1e-30",
        "u46": "(v)=>v*1e-27",
        "u47": "(v)=>v*1e-24",
        "u48": "(v)=>v*1e-21",
        "u49": "(v)=>v*1e-18",
        "u50": "(v)=>v*1e-15",
        "u51": "(v)=>v*1e-14",
        "u52": "(v)=>v*1e-13",
        "u53": "(v)=>v*1e-12",
        "u54": "(v)=>v*1e-11",
        "u55": "(v)=>v*1e-10",
        "u56": "(v)=>v*1e-09",
        "u57": "(v)=>v*1e-06",
        "u58": "(v)=>v*0.001",
        "u60": "(v)=>v*1000",
        "u61": "(v)=>v*1000000",
        "u62": "(v)=>v*1000000000",
        "u63": "(v)=>v*1000000000000",
        "u486": "(v)=>v*2.64172052358148e-13",
        "u487": "(v)=>v*1.05668820943259e-12",
        "u488": "(v)=>v*2.11337641886519e-12",
        "u489": "(v)=>v*4.22675283773038e-12",
        "u490": "(v)=>v*6.7628045403686e-11",
        "u491": "(v)=>v*2.02884136211058e-10"
      },
      "description": "A picoliter (pL) is an SI unit of volume applying the pico‑ prefix (10^-12). One picoliter equals 1e-12 liters. The pico prefix denotes a factor of 10^-12, so 1 picoliter equals 10^-12 liters. Such extremely small magnitudes are primarily encountered in particle‑physics and quantum‑scale modelling. Picoliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picoliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picoliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picoliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picoliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picoliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picoliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picoliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u60",
      "name": "femtoliter",
      "shortName": "fL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-39",
        "u44": "(v)=>v*1e-36",
        "u45": "(v)=>v*1e-33",
        "u46": "(v)=>v*1e-30",
        "u47": "(v)=>v*1e-27",
        "u48": "(v)=>v*1e-24",
        "u49": "(v)=>v*1e-21",
        "u50": "(v)=>v*1e-18",
        "u51": "(v)=>v*1e-17",
        "u52": "(v)=>v*1e-16",
        "u53": "(v)=>v*1e-15",
        "u54": "(v)=>v*1e-14",
        "u55": "(v)=>v*1e-13",
        "u56": "(v)=>v*1e-12",
        "u57": "(v)=>v*1e-09",
        "u58": "(v)=>v*1e-06",
        "u59": "(v)=>v*0.001",
        "u61": "(v)=>v*1000",
        "u62": "(v)=>v*1000000",
        "u63": "(v)=>v*1000000000",
        "u486": "(v)=>v*2.64172052358148e-16",
        "u487": "(v)=>v*1.05668820943259e-15",
        "u488": "(v)=>v*2.11337641886519e-15",
        "u489": "(v)=>v*4.22675283773038e-15",
        "u490": "(v)=>v*6.7628045403686e-14",
        "u491": "(v)=>v*2.02884136211058e-13"
      },
      "description": "A femtoliter (fL) is an SI unit of volume applying the femto‑ prefix (10^-15). One femtoliter equals 1e-15 liters. The femto prefix denotes a factor of 10^-15, so 1 femtoliter equals 10^-15 liters. Such extremely small magnitudes are primarily encountered in particle‑physics and quantum‑scale modelling. Femtoliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtoliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtoliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtoliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtoliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtoliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtoliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtoliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u61",
      "name": "attoliter",
      "shortName": "aL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-42",
        "u44": "(v)=>v*1e-39",
        "u45": "(v)=>v*1e-36",
        "u46": "(v)=>v*1e-33",
        "u47": "(v)=>v*1e-30",
        "u48": "(v)=>v*1e-27",
        "u49": "(v)=>v*1e-24",
        "u50": "(v)=>v*1e-21",
        "u51": "(v)=>v*1e-20",
        "u52": "(v)=>v*1e-19",
        "u53": "(v)=>v*1e-18",
        "u54": "(v)=>v*1e-17",
        "u55": "(v)=>v*1e-16",
        "u56": "(v)=>v*1e-15",
        "u57": "(v)=>v*1e-12",
        "u58": "(v)=>v*1e-09",
        "u59": "(v)=>v*1e-06",
        "u60": "(v)=>v*0.001",
        "u62": "(v)=>v*1000",
        "u63": "(v)=>v*1000000",
        "u486": "(v)=>v*2.64172052358148e-19",
        "u487": "(v)=>v*1.05668820943259e-18",
        "u488": "(v)=>v*2.11337641886519e-18",
        "u489": "(v)=>v*4.22675283773038e-18",
        "u490": "(v)=>v*6.7628045403686e-17",
        "u491": "(v)=>v*2.02884136211058e-16"
      },
      "description": "A attoliter (aL) is an SI unit of volume applying the atto‑ prefix (10^-18). One attoliter equals 1e-18 liters. The atto prefix denotes a factor of 10^-18, so 1 attoliter equals 10^-18 liters. Such extremely small magnitudes are primarily encountered in particle‑physics and quantum‑scale modelling. Attoliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attoliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attoliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attoliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attoliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attoliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attoliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attoliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u62",
      "name": "zeptoliter",
      "shortName": "zL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-45",
        "u44": "(v)=>v*1e-42",
        "u45": "(v)=>v*1e-39",
        "u46": "(v)=>v*1e-36",
        "u47": "(v)=>v*1e-33",
        "u48": "(v)=>v*1e-30",
        "u49": "(v)=>v*1e-27",
        "u50": "(v)=>v*1e-24",
        "u51": "(v)=>v*1e-23",
        "u52": "(v)=>v*1e-22",
        "u53": "(v)=>v*1e-21",
        "u54": "(v)=>v*1e-20",
        "u55": "(v)=>v*1e-19",
        "u56": "(v)=>v*1e-18",
        "u57": "(v)=>v*1e-15",
        "u58": "(v)=>v*1e-12",
        "u59": "(v)=>v*1e-09",
        "u60": "(v)=>v*1e-06",
        "u61": "(v)=>v*0.001",
        "u63": "(v)=>v*1000",
        "u486": "(v)=>v*2.64172052358148e-22",
        "u487": "(v)=>v*1.05668820943259e-21",
        "u488": "(v)=>v*2.11337641886519e-21",
        "u489": "(v)=>v*4.22675283773037e-21",
        "u490": "(v)=>v*6.7628045403686e-20",
        "u491": "(v)=>v*2.02884136211058e-19"
      },
      "description": "A zeptoliter (zL) is an SI unit of volume applying the zepto‑ prefix (10^-21). One zeptoliter equals 1e-21 liters. The zepto prefix denotes a factor of 10^-21, so 1 zeptoliter equals 10^-21 liters. Such extremely small magnitudes are primarily encountered in particle‑physics and quantum‑scale modelling. Zeptoliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptoliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptoliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptoliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptoliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptoliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptoliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptoliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u63",
      "name": "yoctoliter",
      "shortName": "yL",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1e-48",
        "u44": "(v)=>v*1e-45",
        "u45": "(v)=>v*1e-42",
        "u46": "(v)=>v*1e-39",
        "u47": "(v)=>v*1e-36",
        "u48": "(v)=>v*1e-33",
        "u49": "(v)=>v*1e-30",
        "u50": "(v)=>v*1e-27",
        "u51": "(v)=>v*1e-26",
        "u52": "(v)=>v*1e-25",
        "u53": "(v)=>v*1e-24",
        "u54": "(v)=>v*1e-23",
        "u55": "(v)=>v*1e-22",
        "u56": "(v)=>v*1e-21",
        "u57": "(v)=>v*1e-18",
        "u58": "(v)=>v*1e-15",
        "u59": "(v)=>v*1e-12",
        "u60": "(v)=>v*1e-09",
        "u61": "(v)=>v*1e-06",
        "u62": "(v)=>v*0.001",
        "u486": "(v)=>v*2.64172052358148e-25",
        "u487": "(v)=>v*1.05668820943259e-24",
        "u488": "(v)=>v*2.11337641886519e-24",
        "u489": "(v)=>v*4.22675283773037e-24",
        "u490": "(v)=>v*6.7628045403686e-23",
        "u491": "(v)=>v*2.02884136211058e-22"
      },
      "description": "A yoctoliter (yL) is an SI unit of volume applying the yocto‑ prefix (10^-24). One yoctoliter equals 1e-24 liters. The yocto prefix denotes a factor of 10^-24, so 1 yoctoliter equals 10^-24 liters. Such extremely small magnitudes are primarily encountered in particle‑physics and quantum‑scale modelling. Yoctoliter belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctoliter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctoliter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctoliter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctoliter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctoliter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctoliter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctoliter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-accepted",
        "SI-prefix"
      ]
    },
    {
      "id": "u64",
      "name": "yottapascal",
      "shortName": "YPa",
      "categoryId": "c21",
      "conversions": {
        "u65": "(v)=>v*1000",
        "u66": "(v)=>v*1000000",
        "u67": "(v)=>v*1000000000",
        "u68": "(v)=>v*1000000000000",
        "u69": "(v)=>v*1e+15",
        "u70": "(v)=>v*1e+18",
        "u71": "(v)=>v*1e+21",
        "u72": "(v)=>v*1e+22",
        "u73": "(v)=>v*1e+23",
        "u74": "(v)=>v*1e+24",
        "u75": "(v)=>v*1e+25",
        "u76": "(v)=>v*1e+26",
        "u77": "(v)=>v*1e+27",
        "u78": "(v)=>v*1e+30",
        "u79": "(v)=>v*1e+33",
        "u80": "(v)=>v*1e+36",
        "u81": "(v)=>v*1e+39",
        "u82": "(v)=>v*1e+42",
        "u83": "(v)=>v*1e+45",
        "u84": "(v)=>v*1e+48",
        "u514": "(v)=>v*9.86923266716013e+18",
        "u515": "(v)=>v*1e+19",
        "u516": "(v)=>v*1.45037737796859e+20",
        "u517": "(v)=>v*7.5006168507298e+21"
      },
      "description": "A yottapascal (YPa) is an SI unit of pressure applying the yotta‑ prefix (10^24). One yottapascal equals 1e+24 pascals. The yotta prefix denotes a factor of 10^24, so 1 yottapascal equals 10^24 pascals. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottapascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottapascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottapascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottapascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottapascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottapascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottapascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottapascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u65",
      "name": "zettapascal",
      "shortName": "ZPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*0.001",
        "u66": "(v)=>v*1000",
        "u67": "(v)=>v*1000000",
        "u68": "(v)=>v*1000000000",
        "u69": "(v)=>v*1000000000000",
        "u70": "(v)=>v*1e+15",
        "u71": "(v)=>v*1e+18",
        "u72": "(v)=>v*1e+19",
        "u73": "(v)=>v*1e+20",
        "u74": "(v)=>v*1e+21",
        "u75": "(v)=>v*1e+22",
        "u76": "(v)=>v*1e+23",
        "u77": "(v)=>v*1e+24",
        "u78": "(v)=>v*1e+27",
        "u79": "(v)=>v*1e+30",
        "u80": "(v)=>v*1e+33",
        "u81": "(v)=>v*1e+36",
        "u82": "(v)=>v*1e+39",
        "u83": "(v)=>v*1e+42",
        "u84": "(v)=>v*1e+45",
        "u514": "(v)=>v*9.86923266716013e+15",
        "u515": "(v)=>v*1e+16",
        "u516": "(v)=>v*1.45037737796859e+17",
        "u517": "(v)=>v*7.5006168507298e+18"
      },
      "description": "A zettapascal (ZPa) is an SI unit of pressure applying the zetta‑ prefix (10^21). One zettapascal equals 1e+21 pascals. The zetta prefix denotes a factor of 10^21, so 1 zettapascal equals 10^21 pascals. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettapascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettapascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettapascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettapascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettapascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettapascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettapascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettapascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u66",
      "name": "exapascal",
      "shortName": "EPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-06",
        "u65": "(v)=>v*0.001",
        "u67": "(v)=>v*1000",
        "u68": "(v)=>v*1000000",
        "u69": "(v)=>v*1000000000",
        "u70": "(v)=>v*1000000000000",
        "u71": "(v)=>v*1e+15",
        "u72": "(v)=>v*1e+16",
        "u73": "(v)=>v*1e+17",
        "u74": "(v)=>v*1e+18",
        "u75": "(v)=>v*1e+19",
        "u76": "(v)=>v*1e+20",
        "u77": "(v)=>v*1e+21",
        "u78": "(v)=>v*1e+24",
        "u79": "(v)=>v*1e+27",
        "u80": "(v)=>v*1e+30",
        "u81": "(v)=>v*1e+33",
        "u82": "(v)=>v*1e+36",
        "u83": "(v)=>v*1e+39",
        "u84": "(v)=>v*1e+42",
        "u514": "(v)=>v*9869232667160.13",
        "u515": "(v)=>v*10000000000000",
        "u516": "(v)=>v*145037737796859",
        "u517": "(v)=>v*7.5006168507298e+15"
      },
      "description": "A exapascal (EPa) is an SI unit of pressure applying the exa‑ prefix (10^18). One exapascal equals 1e+18 pascals. The exa prefix denotes a factor of 10^18, so 1 exapascal equals 10^18 pascals. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exapascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exapascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exapascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exapascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exapascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exapascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exapascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exapascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u67",
      "name": "petapascal",
      "shortName": "PPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-09",
        "u65": "(v)=>v*1e-06",
        "u66": "(v)=>v*0.001",
        "u68": "(v)=>v*1000",
        "u69": "(v)=>v*1000000",
        "u70": "(v)=>v*1000000000",
        "u71": "(v)=>v*1000000000000",
        "u72": "(v)=>v*10000000000000",
        "u73": "(v)=>v*100000000000000",
        "u74": "(v)=>v*1e+15",
        "u75": "(v)=>v*1e+16",
        "u76": "(v)=>v*1e+17",
        "u77": "(v)=>v*1e+18",
        "u78": "(v)=>v*1e+21",
        "u79": "(v)=>v*1e+24",
        "u80": "(v)=>v*1e+27",
        "u81": "(v)=>v*1e+30",
        "u82": "(v)=>v*1e+33",
        "u83": "(v)=>v*1e+36",
        "u84": "(v)=>v*1e+39",
        "u514": "(v)=>v*9869232667.16013",
        "u515": "(v)=>v*10000000000",
        "u516": "(v)=>v*145037737796.859",
        "u517": "(v)=>v*7500616850729.8"
      },
      "description": "A petapascal (PPa) is an SI unit of pressure applying the peta‑ prefix (10^15). One petapascal equals 1e+15 pascals. The peta prefix denotes a factor of 10^15, so 1 petapascal equals 10^15 pascals. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petapascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petapascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petapascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petapascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petapascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petapascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petapascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petapascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u68",
      "name": "terapascal",
      "shortName": "TPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-12",
        "u65": "(v)=>v*1e-09",
        "u66": "(v)=>v*1e-06",
        "u67": "(v)=>v*0.001",
        "u69": "(v)=>v*1000",
        "u70": "(v)=>v*1000000",
        "u71": "(v)=>v*1000000000",
        "u72": "(v)=>v*10000000000",
        "u73": "(v)=>v*100000000000",
        "u74": "(v)=>v*1000000000000",
        "u75": "(v)=>v*10000000000000",
        "u76": "(v)=>v*100000000000000",
        "u77": "(v)=>v*1e+15",
        "u78": "(v)=>v*1e+18",
        "u79": "(v)=>v*1e+21",
        "u80": "(v)=>v*1e+24",
        "u81": "(v)=>v*1e+27",
        "u82": "(v)=>v*1e+30",
        "u83": "(v)=>v*1e+33",
        "u84": "(v)=>v*1e+36",
        "u514": "(v)=>v*9869232.66716013",
        "u515": "(v)=>v*10000000",
        "u516": "(v)=>v*145037737.796859",
        "u517": "(v)=>v*7500616850.7298"
      },
      "description": "A terapascal (TPa) is an SI unit of pressure applying the tera‑ prefix (10^12). One terapascal equals 1e+12 pascals. The tera prefix denotes a factor of 10^12, so 1 terapascal equals 10^12 pascals. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Terapascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terapascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terapascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terapascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terapascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terapascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terapascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terapascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u69",
      "name": "gigapascal",
      "shortName": "GPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-15",
        "u65": "(v)=>v*1e-12",
        "u66": "(v)=>v*1e-09",
        "u67": "(v)=>v*1e-06",
        "u68": "(v)=>v*0.001",
        "u70": "(v)=>v*1000",
        "u71": "(v)=>v*1000000",
        "u72": "(v)=>v*10000000",
        "u73": "(v)=>v*100000000",
        "u74": "(v)=>v*1000000000",
        "u75": "(v)=>v*10000000000",
        "u76": "(v)=>v*100000000000",
        "u77": "(v)=>v*1000000000000",
        "u78": "(v)=>v*1e+15",
        "u79": "(v)=>v*1e+18",
        "u80": "(v)=>v*1e+21",
        "u81": "(v)=>v*1e+24",
        "u82": "(v)=>v*1e+27",
        "u83": "(v)=>v*1e+30",
        "u84": "(v)=>v*1e+33",
        "u514": "(v)=>v*9869.23266716013",
        "u515": "(v)=>v*10000",
        "u516": "(v)=>v*145037.737796859",
        "u517": "(v)=>v*7500616.8507298"
      },
      "description": "A gigapascal (GPa) is an SI unit of pressure applying the giga‑ prefix (10^9). One gigapascal equals 1000000000 pascals. The giga prefix denotes a factor of 10^9, so 1 gigapascal equals 10^9 pascals. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigapascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigapascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigapascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigapascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigapascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigapascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigapascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigapascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u70",
      "name": "megapascal",
      "shortName": "MPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-18",
        "u65": "(v)=>v*1e-15",
        "u66": "(v)=>v*1e-12",
        "u67": "(v)=>v*1e-09",
        "u68": "(v)=>v*1e-06",
        "u69": "(v)=>v*0.001",
        "u71": "(v)=>v*1000",
        "u72": "(v)=>v*10000",
        "u73": "(v)=>v*100000",
        "u74": "(v)=>v*1000000",
        "u75": "(v)=>v*10000000",
        "u76": "(v)=>v*100000000",
        "u77": "(v)=>v*1000000000",
        "u78": "(v)=>v*1000000000000",
        "u79": "(v)=>v*1e+15",
        "u80": "(v)=>v*1e+18",
        "u81": "(v)=>v*1e+21",
        "u82": "(v)=>v*1e+24",
        "u83": "(v)=>v*1e+27",
        "u84": "(v)=>v*1e+30",
        "u514": "(v)=>v*9.86923266716013",
        "u515": "(v)=>v*10",
        "u516": "(v)=>v*145.037737796859",
        "u517": "(v)=>v*7500.6168507298"
      },
      "description": "A megapascal (MPa) is an SI unit of pressure applying the mega‑ prefix (10^6). One megapascal equals 1000000 pascals. The mega prefix denotes a factor of 10^6, so 1 megapascal equals 10^6 pascals. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megapascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megapascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megapascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megapascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megapascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megapascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megapascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megapascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u71",
      "name": "kilopascal",
      "shortName": "kPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-21",
        "u65": "(v)=>v*1e-18",
        "u66": "(v)=>v*1e-15",
        "u67": "(v)=>v*1e-12",
        "u68": "(v)=>v*1e-09",
        "u69": "(v)=>v*1e-06",
        "u70": "(v)=>v*0.001",
        "u72": "(v)=>v*10",
        "u73": "(v)=>v*100",
        "u74": "(v)=>v*1000",
        "u75": "(v)=>v*10000",
        "u76": "(v)=>v*100000",
        "u77": "(v)=>v*1000000",
        "u78": "(v)=>v*1000000000",
        "u79": "(v)=>v*1000000000000",
        "u80": "(v)=>v*1e+15",
        "u81": "(v)=>v*1e+18",
        "u82": "(v)=>v*1e+21",
        "u83": "(v)=>v*1e+24",
        "u84": "(v)=>v*1e+27",
        "u514": "(v)=>v*0.00986923266716013",
        "u515": "(v)=>v*0.01",
        "u516": "(v)=>v*0.145037737796859",
        "u517": "(v)=>v*7.5006168507298"
      },
      "description": "A kilopascal (kPa) is an SI unit of pressure applying the kilo‑ prefix (10^3). One kilopascal equals 1000 pascals. The kilo prefix denotes a factor of 10^3, so 1 kilopascal equals 10^3 pascals. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilopascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilopascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilopascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilopascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilopascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilopascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilopascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilopascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u72",
      "name": "hectopascal",
      "shortName": "hPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-22",
        "u65": "(v)=>v*1e-19",
        "u66": "(v)=>v*1e-16",
        "u67": "(v)=>v*1e-13",
        "u68": "(v)=>v*1e-10",
        "u69": "(v)=>v*1e-07",
        "u70": "(v)=>v*0.0001",
        "u71": "(v)=>v*0.1",
        "u73": "(v)=>v*10",
        "u74": "(v)=>v*100",
        "u75": "(v)=>v*1000",
        "u76": "(v)=>v*10000",
        "u77": "(v)=>v*100000",
        "u78": "(v)=>v*100000000",
        "u79": "(v)=>v*100000000000",
        "u80": "(v)=>v*100000000000000",
        "u81": "(v)=>v*1e+17",
        "u82": "(v)=>v*1e+20",
        "u83": "(v)=>v*1e+23",
        "u84": "(v)=>v*1e+26",
        "u514": "(v)=>v*0.000986923266716013",
        "u515": "(v)=>v*0.001",
        "u516": "(v)=>v*0.0145037737796859",
        "u517": "(v)=>v*0.75006168507298"
      },
      "description": "A hectopascal (hPa) is an SI unit of pressure applying the hecto‑ prefix (10^2). One hectopascal equals 100 pascals. The hecto prefix denotes a factor of 10^2, so 1 hectopascal equals 10^2 pascals. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectopascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectopascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectopascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectopascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectopascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectopascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectopascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectopascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u73",
      "name": "decapascal",
      "shortName": "daPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-23",
        "u65": "(v)=>v*1e-20",
        "u66": "(v)=>v*1e-17",
        "u67": "(v)=>v*1e-14",
        "u68": "(v)=>v*1e-11",
        "u69": "(v)=>v*1e-08",
        "u70": "(v)=>v*1e-05",
        "u71": "(v)=>v*0.01",
        "u72": "(v)=>v*0.1",
        "u74": "(v)=>v*10",
        "u75": "(v)=>v*100",
        "u76": "(v)=>v*1000",
        "u77": "(v)=>v*10000",
        "u78": "(v)=>v*10000000",
        "u79": "(v)=>v*10000000000",
        "u80": "(v)=>v*10000000000000",
        "u81": "(v)=>v*1e+16",
        "u82": "(v)=>v*1e+19",
        "u83": "(v)=>v*1e+22",
        "u84": "(v)=>v*1e+25",
        "u514": "(v)=>v*9.86923266716013e-05",
        "u515": "(v)=>v*0.0001",
        "u516": "(v)=>v*0.00145037737796859",
        "u517": "(v)=>v*0.075006168507298"
      },
      "description": "A decapascal (daPa) is an SI unit of pressure applying the deca‑ prefix (10^1). One decapascal equals 10 pascals. The deca prefix denotes a factor of 10^1, so 1 decapascal equals 10^1 pascals. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decapascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decapascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decapascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decapascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decapascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decapascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decapascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decapascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u74",
      "name": "pascal",
      "shortName": "Pa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-24",
        "u65": "(v)=>v*1e-21",
        "u66": "(v)=>v*1e-18",
        "u67": "(v)=>v*1e-15",
        "u68": "(v)=>v*1e-12",
        "u69": "(v)=>v*1e-09",
        "u70": "(v)=>v*1e-06",
        "u71": "(v)=>v*0.001",
        "u72": "(v)=>v*0.01",
        "u73": "(v)=>v*0.1",
        "u75": "(v)=>v*10",
        "u76": "(v)=>v*100",
        "u77": "(v)=>v*1000",
        "u78": "(v)=>v*1000000",
        "u79": "(v)=>v*1000000000",
        "u80": "(v)=>v*1000000000000",
        "u81": "(v)=>v*1e+15",
        "u82": "(v)=>v*1e+18",
        "u83": "(v)=>v*1e+21",
        "u84": "(v)=>v*1e+24",
        "u514": "(v)=>v*9.86923266716013e-06",
        "u515": "(v)=>v*1e-05",
        "u516": "(v)=>v*0.000145037737796859",
        "u517": "(v)=>v*0.0075006168507298"
      },
      "description": "The pascal (Pa) is the SI derived unit of pressure, defined as one newton per square metre. Pascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of pascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent pascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, pascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when pascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding pascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed pascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of pascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u75",
      "name": "decipascal",
      "shortName": "dPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-25",
        "u65": "(v)=>v*1e-22",
        "u66": "(v)=>v*1e-19",
        "u67": "(v)=>v*1e-16",
        "u68": "(v)=>v*1e-13",
        "u69": "(v)=>v*1e-10",
        "u70": "(v)=>v*1e-07",
        "u71": "(v)=>v*0.0001",
        "u72": "(v)=>v*0.001",
        "u73": "(v)=>v*0.01",
        "u74": "(v)=>v*0.1",
        "u76": "(v)=>v*10",
        "u77": "(v)=>v*100",
        "u78": "(v)=>v*100000",
        "u79": "(v)=>v*100000000",
        "u80": "(v)=>v*100000000000",
        "u81": "(v)=>v*100000000000000",
        "u82": "(v)=>v*1e+17",
        "u83": "(v)=>v*1e+20",
        "u84": "(v)=>v*1e+23",
        "u514": "(v)=>v*9.86923266716013e-07",
        "u515": "(v)=>v*1e-06",
        "u516": "(v)=>v*1.45037737796859e-05",
        "u517": "(v)=>v*0.00075006168507298"
      },
      "description": "A decipascal (dPa) is an SI unit of pressure applying the deci‑ prefix (10^-1). One decipascal equals 0.1 pascals. The deci prefix denotes a factor of 10^-1, so 1 decipascal equals 10^-1 pascals. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decipascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decipascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decipascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decipascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decipascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decipascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decipascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decipascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u76",
      "name": "centipascal",
      "shortName": "cPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-26",
        "u65": "(v)=>v*1e-23",
        "u66": "(v)=>v*1e-20",
        "u67": "(v)=>v*1e-17",
        "u68": "(v)=>v*1e-14",
        "u69": "(v)=>v*1e-11",
        "u70": "(v)=>v*1e-08",
        "u71": "(v)=>v*1e-05",
        "u72": "(v)=>v*0.0001",
        "u73": "(v)=>v*0.001",
        "u74": "(v)=>v*0.01",
        "u75": "(v)=>v*0.1",
        "u77": "(v)=>v*10",
        "u78": "(v)=>v*10000",
        "u79": "(v)=>v*10000000",
        "u80": "(v)=>v*10000000000",
        "u81": "(v)=>v*10000000000000",
        "u82": "(v)=>v*1e+16",
        "u83": "(v)=>v*1e+19",
        "u84": "(v)=>v*1e+22",
        "u514": "(v)=>v*9.86923266716013e-08",
        "u515": "(v)=>v*1e-07",
        "u516": "(v)=>v*1.45037737796859e-06",
        "u517": "(v)=>v*7.5006168507298e-05"
      },
      "description": "A centipascal (cPa) is an SI unit of pressure applying the centi‑ prefix (10^-2). One centipascal equals 0.01 pascals. The centi prefix denotes a factor of 10^-2, so 1 centipascal equals 10^-2 pascals. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centipascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centipascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centipascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centipascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centipascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centipascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centipascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centipascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u77",
      "name": "millipascal",
      "shortName": "mPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-27",
        "u65": "(v)=>v*1e-24",
        "u66": "(v)=>v*1e-21",
        "u67": "(v)=>v*1e-18",
        "u68": "(v)=>v*1e-15",
        "u69": "(v)=>v*1e-12",
        "u70": "(v)=>v*1e-09",
        "u71": "(v)=>v*1e-06",
        "u72": "(v)=>v*1e-05",
        "u73": "(v)=>v*0.0001",
        "u74": "(v)=>v*0.001",
        "u75": "(v)=>v*0.01",
        "u76": "(v)=>v*0.1",
        "u78": "(v)=>v*1000",
        "u79": "(v)=>v*1000000",
        "u80": "(v)=>v*1000000000",
        "u81": "(v)=>v*1000000000000",
        "u82": "(v)=>v*1e+15",
        "u83": "(v)=>v*1e+18",
        "u84": "(v)=>v*1e+21",
        "u514": "(v)=>v*9.86923266716013e-09",
        "u515": "(v)=>v*1e-08",
        "u516": "(v)=>v*1.45037737796859e-07",
        "u517": "(v)=>v*7.5006168507298e-06"
      },
      "description": "A millipascal (mPa) is an SI unit of pressure applying the milli‑ prefix (10^-3). One millipascal equals 0.001 pascals. The milli prefix denotes a factor of 10^-3, so 1 millipascal equals 10^-3 pascals. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millipascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millipascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millipascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millipascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millipascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millipascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millipascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millipascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u78",
      "name": "micropascal",
      "shortName": "μPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-30",
        "u65": "(v)=>v*1e-27",
        "u66": "(v)=>v*1e-24",
        "u67": "(v)=>v*1e-21",
        "u68": "(v)=>v*1e-18",
        "u69": "(v)=>v*1e-15",
        "u70": "(v)=>v*1e-12",
        "u71": "(v)=>v*1e-09",
        "u72": "(v)=>v*1e-08",
        "u73": "(v)=>v*1e-07",
        "u74": "(v)=>v*1e-06",
        "u75": "(v)=>v*1e-05",
        "u76": "(v)=>v*0.0001",
        "u77": "(v)=>v*0.001",
        "u79": "(v)=>v*1000",
        "u80": "(v)=>v*1000000",
        "u81": "(v)=>v*1000000000",
        "u82": "(v)=>v*1000000000000",
        "u83": "(v)=>v*1e+15",
        "u84": "(v)=>v*1e+18",
        "u514": "(v)=>v*9.86923266716013e-12",
        "u515": "(v)=>v*1e-11",
        "u516": "(v)=>v*1.45037737796859e-10",
        "u517": "(v)=>v*7.5006168507298e-09"
      },
      "description": "A micropascal (μPa) is an SI unit of pressure applying the micro‑ prefix (10^-6). One micropascal equals 1e-06 pascals. The micro prefix denotes a factor of 10^-6, so 1 micropascal equals 10^-6 pascals. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Micropascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of micropascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent micropascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, micropascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when micropascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding micropascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed micropascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of micropascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u79",
      "name": "nanopascal",
      "shortName": "nPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-33",
        "u65": "(v)=>v*1e-30",
        "u66": "(v)=>v*1e-27",
        "u67": "(v)=>v*1e-24",
        "u68": "(v)=>v*1e-21",
        "u69": "(v)=>v*1e-18",
        "u70": "(v)=>v*1e-15",
        "u71": "(v)=>v*1e-12",
        "u72": "(v)=>v*1e-11",
        "u73": "(v)=>v*1e-10",
        "u74": "(v)=>v*1e-09",
        "u75": "(v)=>v*1e-08",
        "u76": "(v)=>v*1e-07",
        "u77": "(v)=>v*1e-06",
        "u78": "(v)=>v*0.001",
        "u80": "(v)=>v*1000",
        "u81": "(v)=>v*1000000",
        "u82": "(v)=>v*1000000000",
        "u83": "(v)=>v*1000000000000",
        "u84": "(v)=>v*1e+15",
        "u514": "(v)=>v*9.86923266716013e-15",
        "u515": "(v)=>v*1e-14",
        "u516": "(v)=>v*1.45037737796859e-13",
        "u517": "(v)=>v*7.5006168507298e-12"
      },
      "description": "A nanopascal (nPa) is an SI unit of pressure applying the nano‑ prefix (10^-9). One nanopascal equals 1e-09 pascals. The nano prefix denotes a factor of 10^-9, so 1 nanopascal equals 10^-9 pascals. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanopascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanopascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanopascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanopascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanopascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanopascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanopascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanopascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u80",
      "name": "picopascal",
      "shortName": "pPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-36",
        "u65": "(v)=>v*1e-33",
        "u66": "(v)=>v*1e-30",
        "u67": "(v)=>v*1e-27",
        "u68": "(v)=>v*1e-24",
        "u69": "(v)=>v*1e-21",
        "u70": "(v)=>v*1e-18",
        "u71": "(v)=>v*1e-15",
        "u72": "(v)=>v*1e-14",
        "u73": "(v)=>v*1e-13",
        "u74": "(v)=>v*1e-12",
        "u75": "(v)=>v*1e-11",
        "u76": "(v)=>v*1e-10",
        "u77": "(v)=>v*1e-09",
        "u78": "(v)=>v*1e-06",
        "u79": "(v)=>v*0.001",
        "u81": "(v)=>v*1000",
        "u82": "(v)=>v*1000000",
        "u83": "(v)=>v*1000000000",
        "u84": "(v)=>v*1000000000000",
        "u514": "(v)=>v*9.86923266716013e-18",
        "u515": "(v)=>v*1e-17",
        "u516": "(v)=>v*1.45037737796859e-16",
        "u517": "(v)=>v*7.5006168507298e-15"
      },
      "description": "A picopascal (pPa) is an SI unit of pressure applying the pico‑ prefix (10^-12). One picopascal equals 1e-12 pascals. The pico prefix denotes a factor of 10^-12, so 1 picopascal equals 10^-12 pascals. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picopascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picopascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picopascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picopascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picopascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picopascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picopascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picopascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u81",
      "name": "femtopascal",
      "shortName": "fPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-39",
        "u65": "(v)=>v*1e-36",
        "u66": "(v)=>v*1e-33",
        "u67": "(v)=>v*1e-30",
        "u68": "(v)=>v*1e-27",
        "u69": "(v)=>v*1e-24",
        "u70": "(v)=>v*1e-21",
        "u71": "(v)=>v*1e-18",
        "u72": "(v)=>v*1e-17",
        "u73": "(v)=>v*1e-16",
        "u74": "(v)=>v*1e-15",
        "u75": "(v)=>v*1e-14",
        "u76": "(v)=>v*1e-13",
        "u77": "(v)=>v*1e-12",
        "u78": "(v)=>v*1e-09",
        "u79": "(v)=>v*1e-06",
        "u80": "(v)=>v*0.001",
        "u82": "(v)=>v*1000",
        "u83": "(v)=>v*1000000",
        "u84": "(v)=>v*1000000000",
        "u514": "(v)=>v*9.86923266716013e-21",
        "u515": "(v)=>v*1e-20",
        "u516": "(v)=>v*1.45037737796859e-19",
        "u517": "(v)=>v*7.5006168507298e-18"
      },
      "description": "A femtopascal (fPa) is an SI unit of pressure applying the femto‑ prefix (10^-15). One femtopascal equals 1e-15 pascals. The femto prefix denotes a factor of 10^-15, so 1 femtopascal equals 10^-15 pascals. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtopascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtopascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtopascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtopascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtopascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtopascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtopascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtopascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u82",
      "name": "attopascal",
      "shortName": "aPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-42",
        "u65": "(v)=>v*1e-39",
        "u66": "(v)=>v*1e-36",
        "u67": "(v)=>v*1e-33",
        "u68": "(v)=>v*1e-30",
        "u69": "(v)=>v*1e-27",
        "u70": "(v)=>v*1e-24",
        "u71": "(v)=>v*1e-21",
        "u72": "(v)=>v*1e-20",
        "u73": "(v)=>v*1e-19",
        "u74": "(v)=>v*1e-18",
        "u75": "(v)=>v*1e-17",
        "u76": "(v)=>v*1e-16",
        "u77": "(v)=>v*1e-15",
        "u78": "(v)=>v*1e-12",
        "u79": "(v)=>v*1e-09",
        "u80": "(v)=>v*1e-06",
        "u81": "(v)=>v*0.001",
        "u83": "(v)=>v*1000",
        "u84": "(v)=>v*1000000",
        "u514": "(v)=>v*9.86923266716013e-24",
        "u515": "(v)=>v*1e-23",
        "u516": "(v)=>v*1.45037737796859e-22",
        "u517": "(v)=>v*7.5006168507298e-21"
      },
      "description": "A attopascal (aPa) is an SI unit of pressure applying the atto‑ prefix (10^-18). One attopascal equals 1e-18 pascals. The atto prefix denotes a factor of 10^-18, so 1 attopascal equals 10^-18 pascals. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attopascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attopascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attopascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attopascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attopascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attopascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attopascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attopascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u83",
      "name": "zeptopascal",
      "shortName": "zPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-45",
        "u65": "(v)=>v*1e-42",
        "u66": "(v)=>v*1e-39",
        "u67": "(v)=>v*1e-36",
        "u68": "(v)=>v*1e-33",
        "u69": "(v)=>v*1e-30",
        "u70": "(v)=>v*1e-27",
        "u71": "(v)=>v*1e-24",
        "u72": "(v)=>v*1e-23",
        "u73": "(v)=>v*1e-22",
        "u74": "(v)=>v*1e-21",
        "u75": "(v)=>v*1e-20",
        "u76": "(v)=>v*1e-19",
        "u77": "(v)=>v*1e-18",
        "u78": "(v)=>v*1e-15",
        "u79": "(v)=>v*1e-12",
        "u80": "(v)=>v*1e-09",
        "u81": "(v)=>v*1e-06",
        "u82": "(v)=>v*0.001",
        "u84": "(v)=>v*1000",
        "u514": "(v)=>v*9.86923266716013e-27",
        "u515": "(v)=>v*1e-26",
        "u516": "(v)=>v*1.45037737796859e-25",
        "u517": "(v)=>v*7.5006168507298e-24"
      },
      "description": "A zeptopascal (zPa) is an SI unit of pressure applying the zepto‑ prefix (10^-21). One zeptopascal equals 1e-21 pascals. The zepto prefix denotes a factor of 10^-21, so 1 zeptopascal equals 10^-21 pascals. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptopascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptopascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptopascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptopascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptopascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptopascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptopascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptopascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u84",
      "name": "yoctopascal",
      "shortName": "yPa",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-48",
        "u65": "(v)=>v*1e-45",
        "u66": "(v)=>v*1e-42",
        "u67": "(v)=>v*1e-39",
        "u68": "(v)=>v*1e-36",
        "u69": "(v)=>v*1e-33",
        "u70": "(v)=>v*1e-30",
        "u71": "(v)=>v*1e-27",
        "u72": "(v)=>v*1e-26",
        "u73": "(v)=>v*1e-25",
        "u74": "(v)=>v*1e-24",
        "u75": "(v)=>v*1e-23",
        "u76": "(v)=>v*1e-22",
        "u77": "(v)=>v*1e-21",
        "u78": "(v)=>v*1e-18",
        "u79": "(v)=>v*1e-15",
        "u80": "(v)=>v*1e-12",
        "u81": "(v)=>v*1e-09",
        "u82": "(v)=>v*1e-06",
        "u83": "(v)=>v*0.001",
        "u514": "(v)=>v*9.86923266716013e-30",
        "u515": "(v)=>v*1e-29",
        "u516": "(v)=>v*1.45037737796859e-28",
        "u517": "(v)=>v*7.5006168507298e-27"
      },
      "description": "A yoctopascal (yPa) is an SI unit of pressure applying the yocto‑ prefix (10^-24). One yoctopascal equals 1e-24 pascals. The yocto prefix denotes a factor of 10^-24, so 1 yoctopascal equals 10^-24 pascals. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctopascal belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctopascal often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctopascal as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctopascal is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctopascal values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctopascal has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctopascal metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctopascal fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u85",
      "name": "yottajoule",
      "shortName": "YJ",
      "categoryId": "c9",
      "conversions": {
        "u86": "(v)=>v*1000",
        "u87": "(v)=>v*1000000",
        "u88": "(v)=>v*1000000000",
        "u89": "(v)=>v*1000000000000",
        "u90": "(v)=>v*1e+15",
        "u91": "(v)=>v*1e+18",
        "u92": "(v)=>v*1e+21",
        "u93": "(v)=>v*1e+22",
        "u94": "(v)=>v*1e+23",
        "u95": "(v)=>v*1e+24",
        "u96": "(v)=>v*1e+25",
        "u97": "(v)=>v*1e+26",
        "u98": "(v)=>v*1e+27",
        "u99": "(v)=>v*1e+30",
        "u100": "(v)=>v*1e+33",
        "u101": "(v)=>v*1e+36",
        "u102": "(v)=>v*1e+39",
        "u103": "(v)=>v*1e+42",
        "u104": "(v)=>v*1e+45",
        "u105": "(v)=>v*1e+48",
        "u518": "(v)=>v*2.39005736137667e+23",
        "u519": "(v)=>v*2.39005736137667e+20",
        "u520": "(v)=>v*2.77777777777778e+17",
        "u521": "(v)=>v*9.47817120313317e+20"
      },
      "description": "A yottajoule (YJ) is an SI unit of energy applying the yotta‑ prefix (10^24). One yottajoule equals 1e+24 joules. The yotta prefix denotes a factor of 10^24, so 1 yottajoule equals 10^24 joules. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottajoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottajoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottajoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottajoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottajoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottajoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottajoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottajoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u86",
      "name": "zettajoule",
      "shortName": "ZJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*0.001",
        "u87": "(v)=>v*1000",
        "u88": "(v)=>v*1000000",
        "u89": "(v)=>v*1000000000",
        "u90": "(v)=>v*1000000000000",
        "u91": "(v)=>v*1e+15",
        "u92": "(v)=>v*1e+18",
        "u93": "(v)=>v*1e+19",
        "u94": "(v)=>v*1e+20",
        "u95": "(v)=>v*1e+21",
        "u96": "(v)=>v*1e+22",
        "u97": "(v)=>v*1e+23",
        "u98": "(v)=>v*1e+24",
        "u99": "(v)=>v*1e+27",
        "u100": "(v)=>v*1e+30",
        "u101": "(v)=>v*1e+33",
        "u102": "(v)=>v*1e+36",
        "u103": "(v)=>v*1e+39",
        "u104": "(v)=>v*1e+42",
        "u105": "(v)=>v*1e+45",
        "u518": "(v)=>v*2.39005736137667e+20",
        "u519": "(v)=>v*2.39005736137667e+17",
        "u520": "(v)=>v*277777777777778",
        "u521": "(v)=>v*9.47817120313317e+17"
      },
      "description": "A zettajoule (ZJ) is an SI unit of energy applying the zetta‑ prefix (10^21). One zettajoule equals 1e+21 joules. The zetta prefix denotes a factor of 10^21, so 1 zettajoule equals 10^21 joules. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettajoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettajoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettajoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettajoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettajoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettajoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettajoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettajoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u87",
      "name": "exajoule",
      "shortName": "EJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-06",
        "u86": "(v)=>v*0.001",
        "u88": "(v)=>v*1000",
        "u89": "(v)=>v*1000000",
        "u90": "(v)=>v*1000000000",
        "u91": "(v)=>v*1000000000000",
        "u92": "(v)=>v*1e+15",
        "u93": "(v)=>v*1e+16",
        "u94": "(v)=>v*1e+17",
        "u95": "(v)=>v*1e+18",
        "u96": "(v)=>v*1e+19",
        "u97": "(v)=>v*1e+20",
        "u98": "(v)=>v*1e+21",
        "u99": "(v)=>v*1e+24",
        "u100": "(v)=>v*1e+27",
        "u101": "(v)=>v*1e+30",
        "u102": "(v)=>v*1e+33",
        "u103": "(v)=>v*1e+36",
        "u104": "(v)=>v*1e+39",
        "u105": "(v)=>v*1e+42",
        "u518": "(v)=>v*2.39005736137667e+17",
        "u519": "(v)=>v*239005736137667",
        "u520": "(v)=>v*277777777777.778",
        "u521": "(v)=>v*947817120313317"
      },
      "description": "A exajoule (EJ) is an SI unit of energy applying the exa‑ prefix (10^18). One exajoule equals 1e+18 joules. The exa prefix denotes a factor of 10^18, so 1 exajoule equals 10^18 joules. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exajoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exajoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exajoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exajoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exajoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exajoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exajoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exajoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u88",
      "name": "petajoule",
      "shortName": "PJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-09",
        "u86": "(v)=>v*1e-06",
        "u87": "(v)=>v*0.001",
        "u89": "(v)=>v*1000",
        "u90": "(v)=>v*1000000",
        "u91": "(v)=>v*1000000000",
        "u92": "(v)=>v*1000000000000",
        "u93": "(v)=>v*10000000000000",
        "u94": "(v)=>v*100000000000000",
        "u95": "(v)=>v*1e+15",
        "u96": "(v)=>v*1e+16",
        "u97": "(v)=>v*1e+17",
        "u98": "(v)=>v*1e+18",
        "u99": "(v)=>v*1e+21",
        "u100": "(v)=>v*1e+24",
        "u101": "(v)=>v*1e+27",
        "u102": "(v)=>v*1e+30",
        "u103": "(v)=>v*1e+33",
        "u104": "(v)=>v*1e+36",
        "u105": "(v)=>v*1e+39",
        "u518": "(v)=>v*239005736137667",
        "u519": "(v)=>v*239005736137.667",
        "u520": "(v)=>v*277777777.777778",
        "u521": "(v)=>v*947817120313.317"
      },
      "description": "A petajoule (PJ) is an SI unit of energy applying the peta‑ prefix (10^15). One petajoule equals 1e+15 joules. The peta prefix denotes a factor of 10^15, so 1 petajoule equals 10^15 joules. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petajoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petajoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petajoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petajoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petajoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petajoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petajoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petajoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u89",
      "name": "terajoule",
      "shortName": "TJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-12",
        "u86": "(v)=>v*1e-09",
        "u87": "(v)=>v*1e-06",
        "u88": "(v)=>v*0.001",
        "u90": "(v)=>v*1000",
        "u91": "(v)=>v*1000000",
        "u92": "(v)=>v*1000000000",
        "u93": "(v)=>v*10000000000",
        "u94": "(v)=>v*100000000000",
        "u95": "(v)=>v*1000000000000",
        "u96": "(v)=>v*10000000000000",
        "u97": "(v)=>v*100000000000000",
        "u98": "(v)=>v*1e+15",
        "u99": "(v)=>v*1e+18",
        "u100": "(v)=>v*1e+21",
        "u101": "(v)=>v*1e+24",
        "u102": "(v)=>v*1e+27",
        "u103": "(v)=>v*1e+30",
        "u104": "(v)=>v*1e+33",
        "u105": "(v)=>v*1e+36",
        "u518": "(v)=>v*239005736137.667",
        "u519": "(v)=>v*239005736.137667",
        "u520": "(v)=>v*277777.777777778",
        "u521": "(v)=>v*947817120.313317"
      },
      "description": "A terajoule (TJ) is an SI unit of energy applying the tera‑ prefix (10^12). One terajoule equals 1e+12 joules. The tera prefix denotes a factor of 10^12, so 1 terajoule equals 10^12 joules. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Terajoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terajoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terajoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terajoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terajoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terajoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terajoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terajoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u90",
      "name": "gigajoule",
      "shortName": "GJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-15",
        "u86": "(v)=>v*1e-12",
        "u87": "(v)=>v*1e-09",
        "u88": "(v)=>v*1e-06",
        "u89": "(v)=>v*0.001",
        "u91": "(v)=>v*1000",
        "u92": "(v)=>v*1000000",
        "u93": "(v)=>v*10000000",
        "u94": "(v)=>v*100000000",
        "u95": "(v)=>v*1000000000",
        "u96": "(v)=>v*10000000000",
        "u97": "(v)=>v*100000000000",
        "u98": "(v)=>v*1000000000000",
        "u99": "(v)=>v*1e+15",
        "u100": "(v)=>v*1e+18",
        "u101": "(v)=>v*1e+21",
        "u102": "(v)=>v*1e+24",
        "u103": "(v)=>v*1e+27",
        "u104": "(v)=>v*1e+30",
        "u105": "(v)=>v*1e+33",
        "u518": "(v)=>v*239005736.137667",
        "u519": "(v)=>v*239005.736137667",
        "u520": "(v)=>v*277.777777777778",
        "u521": "(v)=>v*947817.120313317"
      },
      "description": "A gigajoule (GJ) is an SI unit of energy applying the giga‑ prefix (10^9). One gigajoule equals 1000000000 joules. The giga prefix denotes a factor of 10^9, so 1 gigajoule equals 10^9 joules. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigajoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigajoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigajoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigajoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigajoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigajoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigajoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigajoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u91",
      "name": "megajoule",
      "shortName": "MJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-18",
        "u86": "(v)=>v*1e-15",
        "u87": "(v)=>v*1e-12",
        "u88": "(v)=>v*1e-09",
        "u89": "(v)=>v*1e-06",
        "u90": "(v)=>v*0.001",
        "u92": "(v)=>v*1000",
        "u93": "(v)=>v*10000",
        "u94": "(v)=>v*100000",
        "u95": "(v)=>v*1000000",
        "u96": "(v)=>v*10000000",
        "u97": "(v)=>v*100000000",
        "u98": "(v)=>v*1000000000",
        "u99": "(v)=>v*1000000000000",
        "u100": "(v)=>v*1e+15",
        "u101": "(v)=>v*1e+18",
        "u102": "(v)=>v*1e+21",
        "u103": "(v)=>v*1e+24",
        "u104": "(v)=>v*1e+27",
        "u105": "(v)=>v*1e+30",
        "u518": "(v)=>v*239005.736137667",
        "u519": "(v)=>v*239.005736137667",
        "u520": "(v)=>v*0.277777777777778",
        "u521": "(v)=>v*947.817120313317"
      },
      "description": "A megajoule (MJ) is an SI unit of energy applying the mega‑ prefix (10^6). One megajoule equals 1000000 joules. The mega prefix denotes a factor of 10^6, so 1 megajoule equals 10^6 joules. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megajoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megajoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megajoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megajoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megajoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megajoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megajoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megajoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u92",
      "name": "kilojoule",
      "shortName": "kJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-21",
        "u86": "(v)=>v*1e-18",
        "u87": "(v)=>v*1e-15",
        "u88": "(v)=>v*1e-12",
        "u89": "(v)=>v*1e-09",
        "u90": "(v)=>v*1e-06",
        "u91": "(v)=>v*0.001",
        "u93": "(v)=>v*10",
        "u94": "(v)=>v*100",
        "u95": "(v)=>v*1000",
        "u96": "(v)=>v*10000",
        "u97": "(v)=>v*100000",
        "u98": "(v)=>v*1000000",
        "u99": "(v)=>v*1000000000",
        "u100": "(v)=>v*1000000000000",
        "u101": "(v)=>v*1e+15",
        "u102": "(v)=>v*1e+18",
        "u103": "(v)=>v*1e+21",
        "u104": "(v)=>v*1e+24",
        "u105": "(v)=>v*1e+27",
        "u518": "(v)=>v*239.005736137667",
        "u519": "(v)=>v*0.239005736137667",
        "u520": "(v)=>v*0.000277777777777778",
        "u521": "(v)=>v*0.947817120313317"
      },
      "description": "A kilojoule (kJ) is an SI unit of energy applying the kilo‑ prefix (10^3). One kilojoule equals 1000 joules. The kilo prefix denotes a factor of 10^3, so 1 kilojoule equals 10^3 joules. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilojoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilojoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilojoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilojoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilojoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilojoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilojoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilojoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u93",
      "name": "hectojoule",
      "shortName": "hJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-22",
        "u86": "(v)=>v*1e-19",
        "u87": "(v)=>v*1e-16",
        "u88": "(v)=>v*1e-13",
        "u89": "(v)=>v*1e-10",
        "u90": "(v)=>v*1e-07",
        "u91": "(v)=>v*0.0001",
        "u92": "(v)=>v*0.1",
        "u94": "(v)=>v*10",
        "u95": "(v)=>v*100",
        "u96": "(v)=>v*1000",
        "u97": "(v)=>v*10000",
        "u98": "(v)=>v*100000",
        "u99": "(v)=>v*100000000",
        "u100": "(v)=>v*100000000000",
        "u101": "(v)=>v*100000000000000",
        "u102": "(v)=>v*1e+17",
        "u103": "(v)=>v*1e+20",
        "u104": "(v)=>v*1e+23",
        "u105": "(v)=>v*1e+26",
        "u518": "(v)=>v*23.9005736137667",
        "u519": "(v)=>v*0.0239005736137667",
        "u520": "(v)=>v*2.77777777777778e-05",
        "u521": "(v)=>v*0.0947817120313317"
      },
      "description": "A hectojoule (hJ) is an SI unit of energy applying the hecto‑ prefix (10^2). One hectojoule equals 100 joules. The hecto prefix denotes a factor of 10^2, so 1 hectojoule equals 10^2 joules. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectojoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectojoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectojoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectojoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectojoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectojoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectojoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectojoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u94",
      "name": "decajoule",
      "shortName": "daJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-23",
        "u86": "(v)=>v*1e-20",
        "u87": "(v)=>v*1e-17",
        "u88": "(v)=>v*1e-14",
        "u89": "(v)=>v*1e-11",
        "u90": "(v)=>v*1e-08",
        "u91": "(v)=>v*1e-05",
        "u92": "(v)=>v*0.01",
        "u93": "(v)=>v*0.1",
        "u95": "(v)=>v*10",
        "u96": "(v)=>v*100",
        "u97": "(v)=>v*1000",
        "u98": "(v)=>v*10000",
        "u99": "(v)=>v*10000000",
        "u100": "(v)=>v*10000000000",
        "u101": "(v)=>v*10000000000000",
        "u102": "(v)=>v*1e+16",
        "u103": "(v)=>v*1e+19",
        "u104": "(v)=>v*1e+22",
        "u105": "(v)=>v*1e+25",
        "u518": "(v)=>v*2.39005736137667",
        "u519": "(v)=>v*0.00239005736137667",
        "u520": "(v)=>v*2.77777777777778e-06",
        "u521": "(v)=>v*0.00947817120313317"
      },
      "description": "A decajoule (daJ) is an SI unit of energy applying the deca‑ prefix (10^1). One decajoule equals 10 joules. The deca prefix denotes a factor of 10^1, so 1 decajoule equals 10^1 joules. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decajoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decajoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decajoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decajoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decajoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decajoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decajoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decajoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u95",
      "name": "joule",
      "shortName": "J",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-24",
        "u86": "(v)=>v*1e-21",
        "u87": "(v)=>v*1e-18",
        "u88": "(v)=>v*1e-15",
        "u89": "(v)=>v*1e-12",
        "u90": "(v)=>v*1e-09",
        "u91": "(v)=>v*1e-06",
        "u92": "(v)=>v*0.001",
        "u93": "(v)=>v*0.01",
        "u94": "(v)=>v*0.1",
        "u96": "(v)=>v*10",
        "u97": "(v)=>v*100",
        "u98": "(v)=>v*1000",
        "u99": "(v)=>v*1000000",
        "u100": "(v)=>v*1000000000",
        "u101": "(v)=>v*1000000000000",
        "u102": "(v)=>v*1e+15",
        "u103": "(v)=>v*1e+18",
        "u104": "(v)=>v*1e+21",
        "u105": "(v)=>v*1e+24",
        "u518": "(v)=>v*0.239005736137667",
        "u519": "(v)=>v*0.000239005736137667",
        "u520": "(v)=>v*2.77777777777778e-07",
        "u521": "(v)=>v*0.000947817120313317"
      },
      "description": "The joule (J) is the SI derived unit of energy; one joule is the work done when a force of one newton moves an object one metre. Joule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of joule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent joule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, joule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when joule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding joule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed joule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of joule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u96",
      "name": "decijoule",
      "shortName": "dJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-25",
        "u86": "(v)=>v*1e-22",
        "u87": "(v)=>v*1e-19",
        "u88": "(v)=>v*1e-16",
        "u89": "(v)=>v*1e-13",
        "u90": "(v)=>v*1e-10",
        "u91": "(v)=>v*1e-07",
        "u92": "(v)=>v*0.0001",
        "u93": "(v)=>v*0.001",
        "u94": "(v)=>v*0.01",
        "u95": "(v)=>v*0.1",
        "u97": "(v)=>v*10",
        "u98": "(v)=>v*100",
        "u99": "(v)=>v*100000",
        "u100": "(v)=>v*100000000",
        "u101": "(v)=>v*100000000000",
        "u102": "(v)=>v*100000000000000",
        "u103": "(v)=>v*1e+17",
        "u104": "(v)=>v*1e+20",
        "u105": "(v)=>v*1e+23",
        "u518": "(v)=>v*0.0239005736137667",
        "u519": "(v)=>v*2.39005736137667e-05",
        "u520": "(v)=>v*2.77777777777778e-08",
        "u521": "(v)=>v*9.47817120313317e-05"
      },
      "description": "A decijoule (dJ) is an SI unit of energy applying the deci‑ prefix (10^-1). One decijoule equals 0.1 joules. The deci prefix denotes a factor of 10^-1, so 1 decijoule equals 10^-1 joules. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decijoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decijoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decijoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decijoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decijoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decijoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decijoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decijoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u97",
      "name": "centijoule",
      "shortName": "cJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-26",
        "u86": "(v)=>v*1e-23",
        "u87": "(v)=>v*1e-20",
        "u88": "(v)=>v*1e-17",
        "u89": "(v)=>v*1e-14",
        "u90": "(v)=>v*1e-11",
        "u91": "(v)=>v*1e-08",
        "u92": "(v)=>v*1e-05",
        "u93": "(v)=>v*0.0001",
        "u94": "(v)=>v*0.001",
        "u95": "(v)=>v*0.01",
        "u96": "(v)=>v*0.1",
        "u98": "(v)=>v*10",
        "u99": "(v)=>v*10000",
        "u100": "(v)=>v*10000000",
        "u101": "(v)=>v*10000000000",
        "u102": "(v)=>v*10000000000000",
        "u103": "(v)=>v*1e+16",
        "u104": "(v)=>v*1e+19",
        "u105": "(v)=>v*1e+22",
        "u518": "(v)=>v*0.00239005736137667",
        "u519": "(v)=>v*2.39005736137667e-06",
        "u520": "(v)=>v*2.77777777777778e-09",
        "u521": "(v)=>v*9.47817120313317e-06"
      },
      "description": "A centijoule (cJ) is an SI unit of energy applying the centi‑ prefix (10^-2). One centijoule equals 0.01 joules. The centi prefix denotes a factor of 10^-2, so 1 centijoule equals 10^-2 joules. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centijoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centijoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centijoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centijoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centijoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centijoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centijoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centijoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u98",
      "name": "millijoule",
      "shortName": "mJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-27",
        "u86": "(v)=>v*1e-24",
        "u87": "(v)=>v*1e-21",
        "u88": "(v)=>v*1e-18",
        "u89": "(v)=>v*1e-15",
        "u90": "(v)=>v*1e-12",
        "u91": "(v)=>v*1e-09",
        "u92": "(v)=>v*1e-06",
        "u93": "(v)=>v*1e-05",
        "u94": "(v)=>v*0.0001",
        "u95": "(v)=>v*0.001",
        "u96": "(v)=>v*0.01",
        "u97": "(v)=>v*0.1",
        "u99": "(v)=>v*1000",
        "u100": "(v)=>v*1000000",
        "u101": "(v)=>v*1000000000",
        "u102": "(v)=>v*1000000000000",
        "u103": "(v)=>v*1e+15",
        "u104": "(v)=>v*1e+18",
        "u105": "(v)=>v*1e+21",
        "u518": "(v)=>v*0.000239005736137667",
        "u519": "(v)=>v*2.39005736137667e-07",
        "u520": "(v)=>v*2.77777777777778e-10",
        "u521": "(v)=>v*9.47817120313317e-07"
      },
      "description": "A millijoule (mJ) is an SI unit of energy applying the milli‑ prefix (10^-3). One millijoule equals 0.001 joules. The milli prefix denotes a factor of 10^-3, so 1 millijoule equals 10^-3 joules. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millijoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millijoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millijoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millijoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millijoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millijoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millijoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millijoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u99",
      "name": "microjoule",
      "shortName": "μJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-30",
        "u86": "(v)=>v*1e-27",
        "u87": "(v)=>v*1e-24",
        "u88": "(v)=>v*1e-21",
        "u89": "(v)=>v*1e-18",
        "u90": "(v)=>v*1e-15",
        "u91": "(v)=>v*1e-12",
        "u92": "(v)=>v*1e-09",
        "u93": "(v)=>v*1e-08",
        "u94": "(v)=>v*1e-07",
        "u95": "(v)=>v*1e-06",
        "u96": "(v)=>v*1e-05",
        "u97": "(v)=>v*0.0001",
        "u98": "(v)=>v*0.001",
        "u100": "(v)=>v*1000",
        "u101": "(v)=>v*1000000",
        "u102": "(v)=>v*1000000000",
        "u103": "(v)=>v*1000000000000",
        "u104": "(v)=>v*1e+15",
        "u105": "(v)=>v*1e+18",
        "u518": "(v)=>v*2.39005736137667e-07",
        "u519": "(v)=>v*2.39005736137667e-10",
        "u520": "(v)=>v*2.77777777777778e-13",
        "u521": "(v)=>v*9.47817120313317e-10"
      },
      "description": "A microjoule (μJ) is an SI unit of energy applying the micro‑ prefix (10^-6). One microjoule equals 1e-06 joules. The micro prefix denotes a factor of 10^-6, so 1 microjoule equals 10^-6 joules. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microjoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microjoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microjoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microjoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microjoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microjoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microjoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microjoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u100",
      "name": "nanojoule",
      "shortName": "nJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-33",
        "u86": "(v)=>v*1e-30",
        "u87": "(v)=>v*1e-27",
        "u88": "(v)=>v*1e-24",
        "u89": "(v)=>v*1e-21",
        "u90": "(v)=>v*1e-18",
        "u91": "(v)=>v*1e-15",
        "u92": "(v)=>v*1e-12",
        "u93": "(v)=>v*1e-11",
        "u94": "(v)=>v*1e-10",
        "u95": "(v)=>v*1e-09",
        "u96": "(v)=>v*1e-08",
        "u97": "(v)=>v*1e-07",
        "u98": "(v)=>v*1e-06",
        "u99": "(v)=>v*0.001",
        "u101": "(v)=>v*1000",
        "u102": "(v)=>v*1000000",
        "u103": "(v)=>v*1000000000",
        "u104": "(v)=>v*1000000000000",
        "u105": "(v)=>v*1e+15",
        "u518": "(v)=>v*2.39005736137667e-10",
        "u519": "(v)=>v*2.39005736137667e-13",
        "u520": "(v)=>v*2.77777777777778e-16",
        "u521": "(v)=>v*9.47817120313317e-13"
      },
      "description": "A nanojoule (nJ) is an SI unit of energy applying the nano‑ prefix (10^-9). One nanojoule equals 1e-09 joules. The nano prefix denotes a factor of 10^-9, so 1 nanojoule equals 10^-9 joules. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanojoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanojoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanojoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanojoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanojoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanojoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanojoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanojoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u101",
      "name": "picojoule",
      "shortName": "pJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-36",
        "u86": "(v)=>v*1e-33",
        "u87": "(v)=>v*1e-30",
        "u88": "(v)=>v*1e-27",
        "u89": "(v)=>v*1e-24",
        "u90": "(v)=>v*1e-21",
        "u91": "(v)=>v*1e-18",
        "u92": "(v)=>v*1e-15",
        "u93": "(v)=>v*1e-14",
        "u94": "(v)=>v*1e-13",
        "u95": "(v)=>v*1e-12",
        "u96": "(v)=>v*1e-11",
        "u97": "(v)=>v*1e-10",
        "u98": "(v)=>v*1e-09",
        "u99": "(v)=>v*1e-06",
        "u100": "(v)=>v*0.001",
        "u102": "(v)=>v*1000",
        "u103": "(v)=>v*1000000",
        "u104": "(v)=>v*1000000000",
        "u105": "(v)=>v*1000000000000",
        "u518": "(v)=>v*2.39005736137667e-13",
        "u519": "(v)=>v*2.39005736137667e-16",
        "u520": "(v)=>v*2.77777777777778e-19",
        "u521": "(v)=>v*9.47817120313317e-16"
      },
      "description": "A picojoule (pJ) is an SI unit of energy applying the pico‑ prefix (10^-12). One picojoule equals 1e-12 joules. The pico prefix denotes a factor of 10^-12, so 1 picojoule equals 10^-12 joules. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picojoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picojoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picojoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picojoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picojoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picojoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picojoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picojoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u102",
      "name": "femtojoule",
      "shortName": "fJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-39",
        "u86": "(v)=>v*1e-36",
        "u87": "(v)=>v*1e-33",
        "u88": "(v)=>v*1e-30",
        "u89": "(v)=>v*1e-27",
        "u90": "(v)=>v*1e-24",
        "u91": "(v)=>v*1e-21",
        "u92": "(v)=>v*1e-18",
        "u93": "(v)=>v*1e-17",
        "u94": "(v)=>v*1e-16",
        "u95": "(v)=>v*1e-15",
        "u96": "(v)=>v*1e-14",
        "u97": "(v)=>v*1e-13",
        "u98": "(v)=>v*1e-12",
        "u99": "(v)=>v*1e-09",
        "u100": "(v)=>v*1e-06",
        "u101": "(v)=>v*0.001",
        "u103": "(v)=>v*1000",
        "u104": "(v)=>v*1000000",
        "u105": "(v)=>v*1000000000",
        "u518": "(v)=>v*2.39005736137667e-16",
        "u519": "(v)=>v*2.39005736137667e-19",
        "u520": "(v)=>v*2.77777777777778e-22",
        "u521": "(v)=>v*9.47817120313317e-19"
      },
      "description": "A femtojoule (fJ) is an SI unit of energy applying the femto‑ prefix (10^-15). One femtojoule equals 1e-15 joules. The femto prefix denotes a factor of 10^-15, so 1 femtojoule equals 10^-15 joules. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtojoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtojoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtojoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtojoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtojoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtojoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtojoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtojoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u103",
      "name": "attojoule",
      "shortName": "aJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-42",
        "u86": "(v)=>v*1e-39",
        "u87": "(v)=>v*1e-36",
        "u88": "(v)=>v*1e-33",
        "u89": "(v)=>v*1e-30",
        "u90": "(v)=>v*1e-27",
        "u91": "(v)=>v*1e-24",
        "u92": "(v)=>v*1e-21",
        "u93": "(v)=>v*1e-20",
        "u94": "(v)=>v*1e-19",
        "u95": "(v)=>v*1e-18",
        "u96": "(v)=>v*1e-17",
        "u97": "(v)=>v*1e-16",
        "u98": "(v)=>v*1e-15",
        "u99": "(v)=>v*1e-12",
        "u100": "(v)=>v*1e-09",
        "u101": "(v)=>v*1e-06",
        "u102": "(v)=>v*0.001",
        "u104": "(v)=>v*1000",
        "u105": "(v)=>v*1000000",
        "u518": "(v)=>v*2.39005736137667e-19",
        "u519": "(v)=>v*2.39005736137667e-22",
        "u520": "(v)=>v*2.77777777777778e-25",
        "u521": "(v)=>v*9.47817120313317e-22"
      },
      "description": "A attojoule (aJ) is an SI unit of energy applying the atto‑ prefix (10^-18). One attojoule equals 1e-18 joules. The atto prefix denotes a factor of 10^-18, so 1 attojoule equals 10^-18 joules. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attojoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attojoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attojoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attojoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attojoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attojoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attojoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attojoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u104",
      "name": "zeptojoule",
      "shortName": "zJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-45",
        "u86": "(v)=>v*1e-42",
        "u87": "(v)=>v*1e-39",
        "u88": "(v)=>v*1e-36",
        "u89": "(v)=>v*1e-33",
        "u90": "(v)=>v*1e-30",
        "u91": "(v)=>v*1e-27",
        "u92": "(v)=>v*1e-24",
        "u93": "(v)=>v*1e-23",
        "u94": "(v)=>v*1e-22",
        "u95": "(v)=>v*1e-21",
        "u96": "(v)=>v*1e-20",
        "u97": "(v)=>v*1e-19",
        "u98": "(v)=>v*1e-18",
        "u99": "(v)=>v*1e-15",
        "u100": "(v)=>v*1e-12",
        "u101": "(v)=>v*1e-09",
        "u102": "(v)=>v*1e-06",
        "u103": "(v)=>v*0.001",
        "u105": "(v)=>v*1000",
        "u518": "(v)=>v*2.39005736137667e-22",
        "u519": "(v)=>v*2.39005736137667e-25",
        "u520": "(v)=>v*2.77777777777778e-28",
        "u521": "(v)=>v*9.47817120313317e-25"
      },
      "description": "A zeptojoule (zJ) is an SI unit of energy applying the zepto‑ prefix (10^-21). One zeptojoule equals 1e-21 joules. The zepto prefix denotes a factor of 10^-21, so 1 zeptojoule equals 10^-21 joules. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptojoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptojoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptojoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptojoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptojoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptojoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptojoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptojoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u105",
      "name": "yoctojoule",
      "shortName": "yJ",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1e-48",
        "u86": "(v)=>v*1e-45",
        "u87": "(v)=>v*1e-42",
        "u88": "(v)=>v*1e-39",
        "u89": "(v)=>v*1e-36",
        "u90": "(v)=>v*1e-33",
        "u91": "(v)=>v*1e-30",
        "u92": "(v)=>v*1e-27",
        "u93": "(v)=>v*1e-26",
        "u94": "(v)=>v*1e-25",
        "u95": "(v)=>v*1e-24",
        "u96": "(v)=>v*1e-23",
        "u97": "(v)=>v*1e-22",
        "u98": "(v)=>v*1e-21",
        "u99": "(v)=>v*1e-18",
        "u100": "(v)=>v*1e-15",
        "u101": "(v)=>v*1e-12",
        "u102": "(v)=>v*1e-09",
        "u103": "(v)=>v*1e-06",
        "u104": "(v)=>v*0.001",
        "u518": "(v)=>v*2.39005736137667e-25",
        "u519": "(v)=>v*2.39005736137667e-28",
        "u520": "(v)=>v*2.77777777777778e-31",
        "u521": "(v)=>v*9.47817120313317e-28"
      },
      "description": "A yoctojoule (yJ) is an SI unit of energy applying the yocto‑ prefix (10^-24). One yoctojoule equals 1e-24 joules. The yocto prefix denotes a factor of 10^-24, so 1 yoctojoule equals 10^-24 joules. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctojoule belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctojoule often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctojoule as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctojoule is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctojoule values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctojoule has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctojoule metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctojoule fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u106",
      "name": "yottawatt",
      "shortName": "YW",
      "categoryId": "c20",
      "conversions": {
        "u107": "(v)=>v*1000",
        "u108": "(v)=>v*1000000",
        "u109": "(v)=>v*1000000000",
        "u110": "(v)=>v*1000000000000",
        "u111": "(v)=>v*1e+15",
        "u112": "(v)=>v*1e+18",
        "u113": "(v)=>v*1e+21",
        "u114": "(v)=>v*1e+22",
        "u115": "(v)=>v*1e+23",
        "u116": "(v)=>v*1e+24",
        "u117": "(v)=>v*1e+25",
        "u118": "(v)=>v*1e+26",
        "u119": "(v)=>v*1e+27",
        "u120": "(v)=>v*1e+30",
        "u121": "(v)=>v*1e+33",
        "u122": "(v)=>v*1e+36",
        "u123": "(v)=>v*1e+39",
        "u124": "(v)=>v*1e+42",
        "u125": "(v)=>v*1e+45",
        "u126": "(v)=>v*1e+48",
        "u522": "(v)=>v*1.34102208884381e+21",
        "u523": "(v)=>v*2.84345136093992e+20"
      },
      "description": "A yottawatt (YW) is an SI unit of power applying the yotta‑ prefix (10^24). One yottawatt equals 1e+24 watts. The yotta prefix denotes a factor of 10^24, so 1 yottawatt equals 10^24 watts. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottawatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottawatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottawatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottawatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottawatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottawatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottawatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottawatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u107",
      "name": "zettawatt",
      "shortName": "ZW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*0.001",
        "u108": "(v)=>v*1000",
        "u109": "(v)=>v*1000000",
        "u110": "(v)=>v*1000000000",
        "u111": "(v)=>v*1000000000000",
        "u112": "(v)=>v*1e+15",
        "u113": "(v)=>v*1e+18",
        "u114": "(v)=>v*1e+19",
        "u115": "(v)=>v*1e+20",
        "u116": "(v)=>v*1e+21",
        "u117": "(v)=>v*1e+22",
        "u118": "(v)=>v*1e+23",
        "u119": "(v)=>v*1e+24",
        "u120": "(v)=>v*1e+27",
        "u121": "(v)=>v*1e+30",
        "u122": "(v)=>v*1e+33",
        "u123": "(v)=>v*1e+36",
        "u124": "(v)=>v*1e+39",
        "u125": "(v)=>v*1e+42",
        "u126": "(v)=>v*1e+45",
        "u522": "(v)=>v*1.34102208884381e+18",
        "u523": "(v)=>v*2.84345136093992e+17"
      },
      "description": "A zettawatt (ZW) is an SI unit of power applying the zetta‑ prefix (10^21). One zettawatt equals 1e+21 watts. The zetta prefix denotes a factor of 10^21, so 1 zettawatt equals 10^21 watts. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettawatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettawatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettawatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettawatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettawatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettawatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettawatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettawatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u108",
      "name": "exawatt",
      "shortName": "EW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-06",
        "u107": "(v)=>v*0.001",
        "u109": "(v)=>v*1000",
        "u110": "(v)=>v*1000000",
        "u111": "(v)=>v*1000000000",
        "u112": "(v)=>v*1000000000000",
        "u113": "(v)=>v*1e+15",
        "u114": "(v)=>v*1e+16",
        "u115": "(v)=>v*1e+17",
        "u116": "(v)=>v*1e+18",
        "u117": "(v)=>v*1e+19",
        "u118": "(v)=>v*1e+20",
        "u119": "(v)=>v*1e+21",
        "u120": "(v)=>v*1e+24",
        "u121": "(v)=>v*1e+27",
        "u122": "(v)=>v*1e+30",
        "u123": "(v)=>v*1e+33",
        "u124": "(v)=>v*1e+36",
        "u125": "(v)=>v*1e+39",
        "u126": "(v)=>v*1e+42",
        "u522": "(v)=>v*1.34102208884381e+15",
        "u523": "(v)=>v*284345136093992"
      },
      "description": "A exawatt (EW) is an SI unit of power applying the exa‑ prefix (10^18). One exawatt equals 1e+18 watts. The exa prefix denotes a factor of 10^18, so 1 exawatt equals 10^18 watts. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exawatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exawatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exawatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exawatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exawatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exawatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exawatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exawatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u109",
      "name": "petawatt",
      "shortName": "PW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-09",
        "u107": "(v)=>v*1e-06",
        "u108": "(v)=>v*0.001",
        "u110": "(v)=>v*1000",
        "u111": "(v)=>v*1000000",
        "u112": "(v)=>v*1000000000",
        "u113": "(v)=>v*1000000000000",
        "u114": "(v)=>v*10000000000000",
        "u115": "(v)=>v*100000000000000",
        "u116": "(v)=>v*1e+15",
        "u117": "(v)=>v*1e+16",
        "u118": "(v)=>v*1e+17",
        "u119": "(v)=>v*1e+18",
        "u120": "(v)=>v*1e+21",
        "u121": "(v)=>v*1e+24",
        "u122": "(v)=>v*1e+27",
        "u123": "(v)=>v*1e+30",
        "u124": "(v)=>v*1e+33",
        "u125": "(v)=>v*1e+36",
        "u126": "(v)=>v*1e+39",
        "u522": "(v)=>v*1341022088843.81",
        "u523": "(v)=>v*284345136093.992"
      },
      "description": "A petawatt (PW) is an SI unit of power applying the peta‑ prefix (10^15). One petawatt equals 1e+15 watts. The peta prefix denotes a factor of 10^15, so 1 petawatt equals 10^15 watts. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petawatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petawatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petawatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petawatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petawatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petawatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petawatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petawatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u110",
      "name": "terawatt",
      "shortName": "TW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-12",
        "u107": "(v)=>v*1e-09",
        "u108": "(v)=>v*1e-06",
        "u109": "(v)=>v*0.001",
        "u111": "(v)=>v*1000",
        "u112": "(v)=>v*1000000",
        "u113": "(v)=>v*1000000000",
        "u114": "(v)=>v*10000000000",
        "u115": "(v)=>v*100000000000",
        "u116": "(v)=>v*1000000000000",
        "u117": "(v)=>v*10000000000000",
        "u118": "(v)=>v*100000000000000",
        "u119": "(v)=>v*1e+15",
        "u120": "(v)=>v*1e+18",
        "u121": "(v)=>v*1e+21",
        "u122": "(v)=>v*1e+24",
        "u123": "(v)=>v*1e+27",
        "u124": "(v)=>v*1e+30",
        "u125": "(v)=>v*1e+33",
        "u126": "(v)=>v*1e+36",
        "u522": "(v)=>v*1341022088.84381",
        "u523": "(v)=>v*284345136.093992"
      },
      "description": "A terawatt (TW) is an SI unit of power applying the tera‑ prefix (10^12). One terawatt equals 1e+12 watts. The tera prefix denotes a factor of 10^12, so 1 terawatt equals 10^12 watts. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Terawatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terawatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terawatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terawatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terawatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terawatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terawatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terawatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u111",
      "name": "gigawatt",
      "shortName": "GW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-15",
        "u107": "(v)=>v*1e-12",
        "u108": "(v)=>v*1e-09",
        "u109": "(v)=>v*1e-06",
        "u110": "(v)=>v*0.001",
        "u112": "(v)=>v*1000",
        "u113": "(v)=>v*1000000",
        "u114": "(v)=>v*10000000",
        "u115": "(v)=>v*100000000",
        "u116": "(v)=>v*1000000000",
        "u117": "(v)=>v*10000000000",
        "u118": "(v)=>v*100000000000",
        "u119": "(v)=>v*1000000000000",
        "u120": "(v)=>v*1e+15",
        "u121": "(v)=>v*1e+18",
        "u122": "(v)=>v*1e+21",
        "u123": "(v)=>v*1e+24",
        "u124": "(v)=>v*1e+27",
        "u125": "(v)=>v*1e+30",
        "u126": "(v)=>v*1e+33",
        "u522": "(v)=>v*1341022.08884381",
        "u523": "(v)=>v*284345.136093992"
      },
      "description": "A gigawatt (GW) is an SI unit of power applying the giga‑ prefix (10^9). One gigawatt equals 1000000000 watts. The giga prefix denotes a factor of 10^9, so 1 gigawatt equals 10^9 watts. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigawatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigawatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigawatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigawatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigawatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigawatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigawatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigawatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u112",
      "name": "megawatt",
      "shortName": "MW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-18",
        "u107": "(v)=>v*1e-15",
        "u108": "(v)=>v*1e-12",
        "u109": "(v)=>v*1e-09",
        "u110": "(v)=>v*1e-06",
        "u111": "(v)=>v*0.001",
        "u113": "(v)=>v*1000",
        "u114": "(v)=>v*10000",
        "u115": "(v)=>v*100000",
        "u116": "(v)=>v*1000000",
        "u117": "(v)=>v*10000000",
        "u118": "(v)=>v*100000000",
        "u119": "(v)=>v*1000000000",
        "u120": "(v)=>v*1000000000000",
        "u121": "(v)=>v*1e+15",
        "u122": "(v)=>v*1e+18",
        "u123": "(v)=>v*1e+21",
        "u124": "(v)=>v*1e+24",
        "u125": "(v)=>v*1e+27",
        "u126": "(v)=>v*1e+30",
        "u522": "(v)=>v*1341.02208884381",
        "u523": "(v)=>v*284.345136093992"
      },
      "description": "A megawatt (MW) is an SI unit of power applying the mega‑ prefix (10^6). One megawatt equals 1000000 watts. The mega prefix denotes a factor of 10^6, so 1 megawatt equals 10^6 watts. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megawatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megawatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megawatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megawatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megawatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megawatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megawatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megawatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u113",
      "name": "kilowatt",
      "shortName": "kW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-21",
        "u107": "(v)=>v*1e-18",
        "u108": "(v)=>v*1e-15",
        "u109": "(v)=>v*1e-12",
        "u110": "(v)=>v*1e-09",
        "u111": "(v)=>v*1e-06",
        "u112": "(v)=>v*0.001",
        "u114": "(v)=>v*10",
        "u115": "(v)=>v*100",
        "u116": "(v)=>v*1000",
        "u117": "(v)=>v*10000",
        "u118": "(v)=>v*100000",
        "u119": "(v)=>v*1000000",
        "u120": "(v)=>v*1000000000",
        "u121": "(v)=>v*1000000000000",
        "u122": "(v)=>v*1e+15",
        "u123": "(v)=>v*1e+18",
        "u124": "(v)=>v*1e+21",
        "u125": "(v)=>v*1e+24",
        "u126": "(v)=>v*1e+27",
        "u522": "(v)=>v*1.34102208884381",
        "u523": "(v)=>v*0.284345136093992"
      },
      "description": "A kilowatt (kW) is an SI unit of power applying the kilo‑ prefix (10^3). One kilowatt equals 1000 watts. The kilo prefix denotes a factor of 10^3, so 1 kilowatt equals 10^3 watts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilowatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilowatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilowatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilowatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilowatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilowatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilowatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilowatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u114",
      "name": "hectowatt",
      "shortName": "hW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-22",
        "u107": "(v)=>v*1e-19",
        "u108": "(v)=>v*1e-16",
        "u109": "(v)=>v*1e-13",
        "u110": "(v)=>v*1e-10",
        "u111": "(v)=>v*1e-07",
        "u112": "(v)=>v*0.0001",
        "u113": "(v)=>v*0.1",
        "u115": "(v)=>v*10",
        "u116": "(v)=>v*100",
        "u117": "(v)=>v*1000",
        "u118": "(v)=>v*10000",
        "u119": "(v)=>v*100000",
        "u120": "(v)=>v*100000000",
        "u121": "(v)=>v*100000000000",
        "u122": "(v)=>v*100000000000000",
        "u123": "(v)=>v*1e+17",
        "u124": "(v)=>v*1e+20",
        "u125": "(v)=>v*1e+23",
        "u126": "(v)=>v*1e+26",
        "u522": "(v)=>v*0.134102208884381",
        "u523": "(v)=>v*0.0284345136093992"
      },
      "description": "A hectowatt (hW) is an SI unit of power applying the hecto‑ prefix (10^2). One hectowatt equals 100 watts. The hecto prefix denotes a factor of 10^2, so 1 hectowatt equals 10^2 watts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectowatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectowatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectowatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectowatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectowatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectowatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectowatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectowatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u115",
      "name": "decawatt",
      "shortName": "daW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-23",
        "u107": "(v)=>v*1e-20",
        "u108": "(v)=>v*1e-17",
        "u109": "(v)=>v*1e-14",
        "u110": "(v)=>v*1e-11",
        "u111": "(v)=>v*1e-08",
        "u112": "(v)=>v*1e-05",
        "u113": "(v)=>v*0.01",
        "u114": "(v)=>v*0.1",
        "u116": "(v)=>v*10",
        "u117": "(v)=>v*100",
        "u118": "(v)=>v*1000",
        "u119": "(v)=>v*10000",
        "u120": "(v)=>v*10000000",
        "u121": "(v)=>v*10000000000",
        "u122": "(v)=>v*10000000000000",
        "u123": "(v)=>v*1e+16",
        "u124": "(v)=>v*1e+19",
        "u125": "(v)=>v*1e+22",
        "u126": "(v)=>v*1e+25",
        "u522": "(v)=>v*0.0134102208884381",
        "u523": "(v)=>v*0.00284345136093992"
      },
      "description": "A decawatt (daW) is an SI unit of power applying the deca‑ prefix (10^1). One decawatt equals 10 watts. The deca prefix denotes a factor of 10^1, so 1 decawatt equals 10^1 watts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decawatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decawatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decawatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decawatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decawatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decawatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decawatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decawatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u116",
      "name": "watt",
      "shortName": "W",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-24",
        "u107": "(v)=>v*1e-21",
        "u108": "(v)=>v*1e-18",
        "u109": "(v)=>v*1e-15",
        "u110": "(v)=>v*1e-12",
        "u111": "(v)=>v*1e-09",
        "u112": "(v)=>v*1e-06",
        "u113": "(v)=>v*0.001",
        "u114": "(v)=>v*0.01",
        "u115": "(v)=>v*0.1",
        "u117": "(v)=>v*10",
        "u118": "(v)=>v*100",
        "u119": "(v)=>v*1000",
        "u120": "(v)=>v*1000000",
        "u121": "(v)=>v*1000000000",
        "u122": "(v)=>v*1000000000000",
        "u123": "(v)=>v*1e+15",
        "u124": "(v)=>v*1e+18",
        "u125": "(v)=>v*1e+21",
        "u126": "(v)=>v*1e+24",
        "u522": "(v)=>v*0.00134102208884381",
        "u523": "(v)=>v*0.000284345136093992"
      },
      "description": "The watt (W) is the SI derived unit of power, equal to one joule per second. Watt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of watt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent watt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, watt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when watt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding watt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed watt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of watt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u117",
      "name": "deciwatt",
      "shortName": "dW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-25",
        "u107": "(v)=>v*1e-22",
        "u108": "(v)=>v*1e-19",
        "u109": "(v)=>v*1e-16",
        "u110": "(v)=>v*1e-13",
        "u111": "(v)=>v*1e-10",
        "u112": "(v)=>v*1e-07",
        "u113": "(v)=>v*0.0001",
        "u114": "(v)=>v*0.001",
        "u115": "(v)=>v*0.01",
        "u116": "(v)=>v*0.1",
        "u118": "(v)=>v*10",
        "u119": "(v)=>v*100",
        "u120": "(v)=>v*100000",
        "u121": "(v)=>v*100000000",
        "u122": "(v)=>v*100000000000",
        "u123": "(v)=>v*100000000000000",
        "u124": "(v)=>v*1e+17",
        "u125": "(v)=>v*1e+20",
        "u126": "(v)=>v*1e+23",
        "u522": "(v)=>v*0.000134102208884381",
        "u523": "(v)=>v*2.84345136093992e-05"
      },
      "description": "A deciwatt (dW) is an SI unit of power applying the deci‑ prefix (10^-1). One deciwatt equals 0.1 watts. The deci prefix denotes a factor of 10^-1, so 1 deciwatt equals 10^-1 watts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Deciwatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of deciwatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent deciwatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, deciwatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when deciwatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding deciwatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed deciwatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of deciwatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u118",
      "name": "centiwatt",
      "shortName": "cW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-26",
        "u107": "(v)=>v*1e-23",
        "u108": "(v)=>v*1e-20",
        "u109": "(v)=>v*1e-17",
        "u110": "(v)=>v*1e-14",
        "u111": "(v)=>v*1e-11",
        "u112": "(v)=>v*1e-08",
        "u113": "(v)=>v*1e-05",
        "u114": "(v)=>v*0.0001",
        "u115": "(v)=>v*0.001",
        "u116": "(v)=>v*0.01",
        "u117": "(v)=>v*0.1",
        "u119": "(v)=>v*10",
        "u120": "(v)=>v*10000",
        "u121": "(v)=>v*10000000",
        "u122": "(v)=>v*10000000000",
        "u123": "(v)=>v*10000000000000",
        "u124": "(v)=>v*1e+16",
        "u125": "(v)=>v*1e+19",
        "u126": "(v)=>v*1e+22",
        "u522": "(v)=>v*1.34102208884381e-05",
        "u523": "(v)=>v*2.84345136093992e-06"
      },
      "description": "A centiwatt (cW) is an SI unit of power applying the centi‑ prefix (10^-2). One centiwatt equals 0.01 watts. The centi prefix denotes a factor of 10^-2, so 1 centiwatt equals 10^-2 watts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centiwatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centiwatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centiwatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centiwatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centiwatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centiwatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centiwatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centiwatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u119",
      "name": "milliwatt",
      "shortName": "mW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-27",
        "u107": "(v)=>v*1e-24",
        "u108": "(v)=>v*1e-21",
        "u109": "(v)=>v*1e-18",
        "u110": "(v)=>v*1e-15",
        "u111": "(v)=>v*1e-12",
        "u112": "(v)=>v*1e-09",
        "u113": "(v)=>v*1e-06",
        "u114": "(v)=>v*1e-05",
        "u115": "(v)=>v*0.0001",
        "u116": "(v)=>v*0.001",
        "u117": "(v)=>v*0.01",
        "u118": "(v)=>v*0.1",
        "u120": "(v)=>v*1000",
        "u121": "(v)=>v*1000000",
        "u122": "(v)=>v*1000000000",
        "u123": "(v)=>v*1000000000000",
        "u124": "(v)=>v*1e+15",
        "u125": "(v)=>v*1e+18",
        "u126": "(v)=>v*1e+21",
        "u522": "(v)=>v*1.34102208884381e-06",
        "u523": "(v)=>v*2.84345136093993e-07"
      },
      "description": "A milliwatt (mW) is an SI unit of power applying the milli‑ prefix (10^-3). One milliwatt equals 0.001 watts. The milli prefix denotes a factor of 10^-3, so 1 milliwatt equals 10^-3 watts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Milliwatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of milliwatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent milliwatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, milliwatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when milliwatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding milliwatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed milliwatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of milliwatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u120",
      "name": "microwatt",
      "shortName": "μW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-30",
        "u107": "(v)=>v*1e-27",
        "u108": "(v)=>v*1e-24",
        "u109": "(v)=>v*1e-21",
        "u110": "(v)=>v*1e-18",
        "u111": "(v)=>v*1e-15",
        "u112": "(v)=>v*1e-12",
        "u113": "(v)=>v*1e-09",
        "u114": "(v)=>v*1e-08",
        "u115": "(v)=>v*1e-07",
        "u116": "(v)=>v*1e-06",
        "u117": "(v)=>v*1e-05",
        "u118": "(v)=>v*0.0001",
        "u119": "(v)=>v*0.001",
        "u121": "(v)=>v*1000",
        "u122": "(v)=>v*1000000",
        "u123": "(v)=>v*1000000000",
        "u124": "(v)=>v*1000000000000",
        "u125": "(v)=>v*1e+15",
        "u126": "(v)=>v*1e+18",
        "u522": "(v)=>v*1.34102208884381e-09",
        "u523": "(v)=>v*2.84345136093992e-10"
      },
      "description": "A microwatt (μW) is an SI unit of power applying the micro‑ prefix (10^-6). One microwatt equals 1e-06 watts. The micro prefix denotes a factor of 10^-6, so 1 microwatt equals 10^-6 watts. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microwatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microwatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microwatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microwatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microwatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microwatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microwatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microwatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u121",
      "name": "nanowatt",
      "shortName": "nW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-33",
        "u107": "(v)=>v*1e-30",
        "u108": "(v)=>v*1e-27",
        "u109": "(v)=>v*1e-24",
        "u110": "(v)=>v*1e-21",
        "u111": "(v)=>v*1e-18",
        "u112": "(v)=>v*1e-15",
        "u113": "(v)=>v*1e-12",
        "u114": "(v)=>v*1e-11",
        "u115": "(v)=>v*1e-10",
        "u116": "(v)=>v*1e-09",
        "u117": "(v)=>v*1e-08",
        "u118": "(v)=>v*1e-07",
        "u119": "(v)=>v*1e-06",
        "u120": "(v)=>v*0.001",
        "u122": "(v)=>v*1000",
        "u123": "(v)=>v*1000000",
        "u124": "(v)=>v*1000000000",
        "u125": "(v)=>v*1000000000000",
        "u126": "(v)=>v*1e+15",
        "u522": "(v)=>v*1.34102208884381e-12",
        "u523": "(v)=>v*2.84345136093992e-13"
      },
      "description": "A nanowatt (nW) is an SI unit of power applying the nano‑ prefix (10^-9). One nanowatt equals 1e-09 watts. The nano prefix denotes a factor of 10^-9, so 1 nanowatt equals 10^-9 watts. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanowatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanowatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanowatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanowatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanowatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanowatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanowatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanowatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u122",
      "name": "picowatt",
      "shortName": "pW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-36",
        "u107": "(v)=>v*1e-33",
        "u108": "(v)=>v*1e-30",
        "u109": "(v)=>v*1e-27",
        "u110": "(v)=>v*1e-24",
        "u111": "(v)=>v*1e-21",
        "u112": "(v)=>v*1e-18",
        "u113": "(v)=>v*1e-15",
        "u114": "(v)=>v*1e-14",
        "u115": "(v)=>v*1e-13",
        "u116": "(v)=>v*1e-12",
        "u117": "(v)=>v*1e-11",
        "u118": "(v)=>v*1e-10",
        "u119": "(v)=>v*1e-09",
        "u120": "(v)=>v*1e-06",
        "u121": "(v)=>v*0.001",
        "u123": "(v)=>v*1000",
        "u124": "(v)=>v*1000000",
        "u125": "(v)=>v*1000000000",
        "u126": "(v)=>v*1000000000000",
        "u522": "(v)=>v*1.34102208884381e-15",
        "u523": "(v)=>v*2.84345136093992e-16"
      },
      "description": "A picowatt (pW) is an SI unit of power applying the pico‑ prefix (10^-12). One picowatt equals 1e-12 watts. The pico prefix denotes a factor of 10^-12, so 1 picowatt equals 10^-12 watts. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picowatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picowatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picowatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picowatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picowatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picowatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picowatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picowatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u123",
      "name": "femtowatt",
      "shortName": "fW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-39",
        "u107": "(v)=>v*1e-36",
        "u108": "(v)=>v*1e-33",
        "u109": "(v)=>v*1e-30",
        "u110": "(v)=>v*1e-27",
        "u111": "(v)=>v*1e-24",
        "u112": "(v)=>v*1e-21",
        "u113": "(v)=>v*1e-18",
        "u114": "(v)=>v*1e-17",
        "u115": "(v)=>v*1e-16",
        "u116": "(v)=>v*1e-15",
        "u117": "(v)=>v*1e-14",
        "u118": "(v)=>v*1e-13",
        "u119": "(v)=>v*1e-12",
        "u120": "(v)=>v*1e-09",
        "u121": "(v)=>v*1e-06",
        "u122": "(v)=>v*0.001",
        "u124": "(v)=>v*1000",
        "u125": "(v)=>v*1000000",
        "u126": "(v)=>v*1000000000",
        "u522": "(v)=>v*1.34102208884381e-18",
        "u523": "(v)=>v*2.84345136093992e-19"
      },
      "description": "A femtowatt (fW) is an SI unit of power applying the femto‑ prefix (10^-15). One femtowatt equals 1e-15 watts. The femto prefix denotes a factor of 10^-15, so 1 femtowatt equals 10^-15 watts. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtowatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtowatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtowatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtowatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtowatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtowatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtowatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtowatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u124",
      "name": "attowatt",
      "shortName": "aW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-42",
        "u107": "(v)=>v*1e-39",
        "u108": "(v)=>v*1e-36",
        "u109": "(v)=>v*1e-33",
        "u110": "(v)=>v*1e-30",
        "u111": "(v)=>v*1e-27",
        "u112": "(v)=>v*1e-24",
        "u113": "(v)=>v*1e-21",
        "u114": "(v)=>v*1e-20",
        "u115": "(v)=>v*1e-19",
        "u116": "(v)=>v*1e-18",
        "u117": "(v)=>v*1e-17",
        "u118": "(v)=>v*1e-16",
        "u119": "(v)=>v*1e-15",
        "u120": "(v)=>v*1e-12",
        "u121": "(v)=>v*1e-09",
        "u122": "(v)=>v*1e-06",
        "u123": "(v)=>v*0.001",
        "u125": "(v)=>v*1000",
        "u126": "(v)=>v*1000000",
        "u522": "(v)=>v*1.34102208884381e-21",
        "u523": "(v)=>v*2.84345136093993e-22"
      },
      "description": "A attowatt (aW) is an SI unit of power applying the atto‑ prefix (10^-18). One attowatt equals 1e-18 watts. The atto prefix denotes a factor of 10^-18, so 1 attowatt equals 10^-18 watts. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attowatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attowatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attowatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attowatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attowatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attowatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attowatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attowatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u125",
      "name": "zeptowatt",
      "shortName": "zW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-45",
        "u107": "(v)=>v*1e-42",
        "u108": "(v)=>v*1e-39",
        "u109": "(v)=>v*1e-36",
        "u110": "(v)=>v*1e-33",
        "u111": "(v)=>v*1e-30",
        "u112": "(v)=>v*1e-27",
        "u113": "(v)=>v*1e-24",
        "u114": "(v)=>v*1e-23",
        "u115": "(v)=>v*1e-22",
        "u116": "(v)=>v*1e-21",
        "u117": "(v)=>v*1e-20",
        "u118": "(v)=>v*1e-19",
        "u119": "(v)=>v*1e-18",
        "u120": "(v)=>v*1e-15",
        "u121": "(v)=>v*1e-12",
        "u122": "(v)=>v*1e-09",
        "u123": "(v)=>v*1e-06",
        "u124": "(v)=>v*0.001",
        "u126": "(v)=>v*1000",
        "u522": "(v)=>v*1.34102208884381e-24",
        "u523": "(v)=>v*2.84345136093992e-25"
      },
      "description": "A zeptowatt (zW) is an SI unit of power applying the zepto‑ prefix (10^-21). One zeptowatt equals 1e-21 watts. The zepto prefix denotes a factor of 10^-21, so 1 zeptowatt equals 10^-21 watts. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptowatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptowatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptowatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptowatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptowatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptowatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptowatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptowatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u126",
      "name": "yoctowatt",
      "shortName": "yW",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*1e-48",
        "u107": "(v)=>v*1e-45",
        "u108": "(v)=>v*1e-42",
        "u109": "(v)=>v*1e-39",
        "u110": "(v)=>v*1e-36",
        "u111": "(v)=>v*1e-33",
        "u112": "(v)=>v*1e-30",
        "u113": "(v)=>v*1e-27",
        "u114": "(v)=>v*1e-26",
        "u115": "(v)=>v*1e-25",
        "u116": "(v)=>v*1e-24",
        "u117": "(v)=>v*1e-23",
        "u118": "(v)=>v*1e-22",
        "u119": "(v)=>v*1e-21",
        "u120": "(v)=>v*1e-18",
        "u121": "(v)=>v*1e-15",
        "u122": "(v)=>v*1e-12",
        "u123": "(v)=>v*1e-09",
        "u124": "(v)=>v*1e-06",
        "u125": "(v)=>v*0.001",
        "u522": "(v)=>v*1.34102208884381e-27",
        "u523": "(v)=>v*2.84345136093992e-28"
      },
      "description": "A yoctowatt (yW) is an SI unit of power applying the yocto‑ prefix (10^-24). One yoctowatt equals 1e-24 watts. The yocto prefix denotes a factor of 10^-24, so 1 yoctowatt equals 10^-24 watts. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctowatt belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctowatt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctowatt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctowatt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctowatt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctowatt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctowatt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctowatt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u127",
      "name": "yottavolt",
      "shortName": "YV",
      "categoryId": "c27",
      "conversions": {
        "u128": "(v)=>v*1000",
        "u129": "(v)=>v*1000000",
        "u130": "(v)=>v*1000000000",
        "u131": "(v)=>v*1000000000000",
        "u132": "(v)=>v*1e+15",
        "u133": "(v)=>v*1e+18",
        "u134": "(v)=>v*1e+21",
        "u135": "(v)=>v*1e+22",
        "u136": "(v)=>v*1e+23",
        "u137": "(v)=>v*1e+24",
        "u138": "(v)=>v*1e+25",
        "u139": "(v)=>v*1e+26",
        "u140": "(v)=>v*1e+27",
        "u141": "(v)=>v*1e+30",
        "u142": "(v)=>v*1e+33",
        "u143": "(v)=>v*1e+36",
        "u144": "(v)=>v*1e+39",
        "u145": "(v)=>v*1e+42",
        "u146": "(v)=>v*1e+45",
        "u147": "(v)=>v*1e+48"
      },
      "description": "A yottavolt (YV) is an SI unit of voltage applying the yotta‑ prefix (10^24). One yottavolt equals 1e+24 volts. The yotta prefix denotes a factor of 10^24, so 1 yottavolt equals 10^24 volts. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottavolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottavolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottavolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottavolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottavolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottavolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottavolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottavolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u128",
      "name": "zettavolt",
      "shortName": "ZV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*0.001",
        "u129": "(v)=>v*1000",
        "u130": "(v)=>v*1000000",
        "u131": "(v)=>v*1000000000",
        "u132": "(v)=>v*1000000000000",
        "u133": "(v)=>v*1e+15",
        "u134": "(v)=>v*1e+18",
        "u135": "(v)=>v*1e+19",
        "u136": "(v)=>v*1e+20",
        "u137": "(v)=>v*1e+21",
        "u138": "(v)=>v*1e+22",
        "u139": "(v)=>v*1e+23",
        "u140": "(v)=>v*1e+24",
        "u141": "(v)=>v*1e+27",
        "u142": "(v)=>v*1e+30",
        "u143": "(v)=>v*1e+33",
        "u144": "(v)=>v*1e+36",
        "u145": "(v)=>v*1e+39",
        "u146": "(v)=>v*1e+42",
        "u147": "(v)=>v*1e+45"
      },
      "description": "A zettavolt (ZV) is an SI unit of voltage applying the zetta‑ prefix (10^21). One zettavolt equals 1e+21 volts. The zetta prefix denotes a factor of 10^21, so 1 zettavolt equals 10^21 volts. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettavolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettavolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettavolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettavolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettavolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettavolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettavolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettavolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u129",
      "name": "exavolt",
      "shortName": "EV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-06",
        "u128": "(v)=>v*0.001",
        "u130": "(v)=>v*1000",
        "u131": "(v)=>v*1000000",
        "u132": "(v)=>v*1000000000",
        "u133": "(v)=>v*1000000000000",
        "u134": "(v)=>v*1e+15",
        "u135": "(v)=>v*1e+16",
        "u136": "(v)=>v*1e+17",
        "u137": "(v)=>v*1e+18",
        "u138": "(v)=>v*1e+19",
        "u139": "(v)=>v*1e+20",
        "u140": "(v)=>v*1e+21",
        "u141": "(v)=>v*1e+24",
        "u142": "(v)=>v*1e+27",
        "u143": "(v)=>v*1e+30",
        "u144": "(v)=>v*1e+33",
        "u145": "(v)=>v*1e+36",
        "u146": "(v)=>v*1e+39",
        "u147": "(v)=>v*1e+42"
      },
      "description": "A exavolt (EV) is an SI unit of voltage applying the exa‑ prefix (10^18). One exavolt equals 1e+18 volts. The exa prefix denotes a factor of 10^18, so 1 exavolt equals 10^18 volts. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exavolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exavolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exavolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exavolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exavolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exavolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exavolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exavolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u130",
      "name": "petavolt",
      "shortName": "PV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-09",
        "u128": "(v)=>v*1e-06",
        "u129": "(v)=>v*0.001",
        "u131": "(v)=>v*1000",
        "u132": "(v)=>v*1000000",
        "u133": "(v)=>v*1000000000",
        "u134": "(v)=>v*1000000000000",
        "u135": "(v)=>v*10000000000000",
        "u136": "(v)=>v*100000000000000",
        "u137": "(v)=>v*1e+15",
        "u138": "(v)=>v*1e+16",
        "u139": "(v)=>v*1e+17",
        "u140": "(v)=>v*1e+18",
        "u141": "(v)=>v*1e+21",
        "u142": "(v)=>v*1e+24",
        "u143": "(v)=>v*1e+27",
        "u144": "(v)=>v*1e+30",
        "u145": "(v)=>v*1e+33",
        "u146": "(v)=>v*1e+36",
        "u147": "(v)=>v*1e+39"
      },
      "description": "A petavolt (PV) is an SI unit of voltage applying the peta‑ prefix (10^15). One petavolt equals 1e+15 volts. The peta prefix denotes a factor of 10^15, so 1 petavolt equals 10^15 volts. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petavolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petavolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petavolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petavolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petavolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petavolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petavolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petavolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u131",
      "name": "teravolt",
      "shortName": "TV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-12",
        "u128": "(v)=>v*1e-09",
        "u129": "(v)=>v*1e-06",
        "u130": "(v)=>v*0.001",
        "u132": "(v)=>v*1000",
        "u133": "(v)=>v*1000000",
        "u134": "(v)=>v*1000000000",
        "u135": "(v)=>v*10000000000",
        "u136": "(v)=>v*100000000000",
        "u137": "(v)=>v*1000000000000",
        "u138": "(v)=>v*10000000000000",
        "u139": "(v)=>v*100000000000000",
        "u140": "(v)=>v*1e+15",
        "u141": "(v)=>v*1e+18",
        "u142": "(v)=>v*1e+21",
        "u143": "(v)=>v*1e+24",
        "u144": "(v)=>v*1e+27",
        "u145": "(v)=>v*1e+30",
        "u146": "(v)=>v*1e+33",
        "u147": "(v)=>v*1e+36"
      },
      "description": "A teravolt (TV) is an SI unit of voltage applying the tera‑ prefix (10^12). One teravolt equals 1e+12 volts. The tera prefix denotes a factor of 10^12, so 1 teravolt equals 10^12 volts. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Teravolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teravolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teravolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teravolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teravolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teravolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teravolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teravolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u132",
      "name": "gigavolt",
      "shortName": "GV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-15",
        "u128": "(v)=>v*1e-12",
        "u129": "(v)=>v*1e-09",
        "u130": "(v)=>v*1e-06",
        "u131": "(v)=>v*0.001",
        "u133": "(v)=>v*1000",
        "u134": "(v)=>v*1000000",
        "u135": "(v)=>v*10000000",
        "u136": "(v)=>v*100000000",
        "u137": "(v)=>v*1000000000",
        "u138": "(v)=>v*10000000000",
        "u139": "(v)=>v*100000000000",
        "u140": "(v)=>v*1000000000000",
        "u141": "(v)=>v*1e+15",
        "u142": "(v)=>v*1e+18",
        "u143": "(v)=>v*1e+21",
        "u144": "(v)=>v*1e+24",
        "u145": "(v)=>v*1e+27",
        "u146": "(v)=>v*1e+30",
        "u147": "(v)=>v*1e+33"
      },
      "description": "A gigavolt (GV) is an SI unit of voltage applying the giga‑ prefix (10^9). One gigavolt equals 1000000000 volts. The giga prefix denotes a factor of 10^9, so 1 gigavolt equals 10^9 volts. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigavolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigavolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigavolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigavolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigavolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigavolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigavolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigavolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u133",
      "name": "megavolt",
      "shortName": "MV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-18",
        "u128": "(v)=>v*1e-15",
        "u129": "(v)=>v*1e-12",
        "u130": "(v)=>v*1e-09",
        "u131": "(v)=>v*1e-06",
        "u132": "(v)=>v*0.001",
        "u134": "(v)=>v*1000",
        "u135": "(v)=>v*10000",
        "u136": "(v)=>v*100000",
        "u137": "(v)=>v*1000000",
        "u138": "(v)=>v*10000000",
        "u139": "(v)=>v*100000000",
        "u140": "(v)=>v*1000000000",
        "u141": "(v)=>v*1000000000000",
        "u142": "(v)=>v*1e+15",
        "u143": "(v)=>v*1e+18",
        "u144": "(v)=>v*1e+21",
        "u145": "(v)=>v*1e+24",
        "u146": "(v)=>v*1e+27",
        "u147": "(v)=>v*1e+30"
      },
      "description": "A megavolt (MV) is an SI unit of voltage applying the mega‑ prefix (10^6). One megavolt equals 1000000 volts. The mega prefix denotes a factor of 10^6, so 1 megavolt equals 10^6 volts. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megavolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megavolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megavolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megavolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megavolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megavolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megavolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megavolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u134",
      "name": "kilovolt",
      "shortName": "kV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-21",
        "u128": "(v)=>v*1e-18",
        "u129": "(v)=>v*1e-15",
        "u130": "(v)=>v*1e-12",
        "u131": "(v)=>v*1e-09",
        "u132": "(v)=>v*1e-06",
        "u133": "(v)=>v*0.001",
        "u135": "(v)=>v*10",
        "u136": "(v)=>v*100",
        "u137": "(v)=>v*1000",
        "u138": "(v)=>v*10000",
        "u139": "(v)=>v*100000",
        "u140": "(v)=>v*1000000",
        "u141": "(v)=>v*1000000000",
        "u142": "(v)=>v*1000000000000",
        "u143": "(v)=>v*1e+15",
        "u144": "(v)=>v*1e+18",
        "u145": "(v)=>v*1e+21",
        "u146": "(v)=>v*1e+24",
        "u147": "(v)=>v*1e+27"
      },
      "description": "A kilovolt (kV) is an SI unit of voltage applying the kilo‑ prefix (10^3). One kilovolt equals 1000 volts. The kilo prefix denotes a factor of 10^3, so 1 kilovolt equals 10^3 volts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilovolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilovolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilovolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilovolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilovolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilovolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilovolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilovolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u135",
      "name": "hectovolt",
      "shortName": "hV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-22",
        "u128": "(v)=>v*1e-19",
        "u129": "(v)=>v*1e-16",
        "u130": "(v)=>v*1e-13",
        "u131": "(v)=>v*1e-10",
        "u132": "(v)=>v*1e-07",
        "u133": "(v)=>v*0.0001",
        "u134": "(v)=>v*0.1",
        "u136": "(v)=>v*10",
        "u137": "(v)=>v*100",
        "u138": "(v)=>v*1000",
        "u139": "(v)=>v*10000",
        "u140": "(v)=>v*100000",
        "u141": "(v)=>v*100000000",
        "u142": "(v)=>v*100000000000",
        "u143": "(v)=>v*100000000000000",
        "u144": "(v)=>v*1e+17",
        "u145": "(v)=>v*1e+20",
        "u146": "(v)=>v*1e+23",
        "u147": "(v)=>v*1e+26"
      },
      "description": "A hectovolt (hV) is an SI unit of voltage applying the hecto‑ prefix (10^2). One hectovolt equals 100 volts. The hecto prefix denotes a factor of 10^2, so 1 hectovolt equals 10^2 volts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectovolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectovolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectovolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectovolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectovolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectovolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectovolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectovolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u136",
      "name": "decavolt",
      "shortName": "daV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-23",
        "u128": "(v)=>v*1e-20",
        "u129": "(v)=>v*1e-17",
        "u130": "(v)=>v*1e-14",
        "u131": "(v)=>v*1e-11",
        "u132": "(v)=>v*1e-08",
        "u133": "(v)=>v*1e-05",
        "u134": "(v)=>v*0.01",
        "u135": "(v)=>v*0.1",
        "u137": "(v)=>v*10",
        "u138": "(v)=>v*100",
        "u139": "(v)=>v*1000",
        "u140": "(v)=>v*10000",
        "u141": "(v)=>v*10000000",
        "u142": "(v)=>v*10000000000",
        "u143": "(v)=>v*10000000000000",
        "u144": "(v)=>v*1e+16",
        "u145": "(v)=>v*1e+19",
        "u146": "(v)=>v*1e+22",
        "u147": "(v)=>v*1e+25"
      },
      "description": "A decavolt (daV) is an SI unit of voltage applying the deca‑ prefix (10^1). One decavolt equals 10 volts. The deca prefix denotes a factor of 10^1, so 1 decavolt equals 10^1 volts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decavolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decavolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decavolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decavolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decavolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decavolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decavolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decavolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u137",
      "name": "volt",
      "shortName": "V",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-24",
        "u128": "(v)=>v*1e-21",
        "u129": "(v)=>v*1e-18",
        "u130": "(v)=>v*1e-15",
        "u131": "(v)=>v*1e-12",
        "u132": "(v)=>v*1e-09",
        "u133": "(v)=>v*1e-06",
        "u134": "(v)=>v*0.001",
        "u135": "(v)=>v*0.01",
        "u136": "(v)=>v*0.1",
        "u138": "(v)=>v*10",
        "u139": "(v)=>v*100",
        "u140": "(v)=>v*1000",
        "u141": "(v)=>v*1000000",
        "u142": "(v)=>v*1000000000",
        "u143": "(v)=>v*1000000000000",
        "u144": "(v)=>v*1e+15",
        "u145": "(v)=>v*1e+18",
        "u146": "(v)=>v*1e+21",
        "u147": "(v)=>v*1e+24"
      },
      "description": "The volt (V) is the SI derived unit of electric potential difference, equal to one joule per coulomb. Volt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of volt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent volt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, volt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when volt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding volt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed volt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of volt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u138",
      "name": "decivolt",
      "shortName": "dV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-25",
        "u128": "(v)=>v*1e-22",
        "u129": "(v)=>v*1e-19",
        "u130": "(v)=>v*1e-16",
        "u131": "(v)=>v*1e-13",
        "u132": "(v)=>v*1e-10",
        "u133": "(v)=>v*1e-07",
        "u134": "(v)=>v*0.0001",
        "u135": "(v)=>v*0.001",
        "u136": "(v)=>v*0.01",
        "u137": "(v)=>v*0.1",
        "u139": "(v)=>v*10",
        "u140": "(v)=>v*100",
        "u141": "(v)=>v*100000",
        "u142": "(v)=>v*100000000",
        "u143": "(v)=>v*100000000000",
        "u144": "(v)=>v*100000000000000",
        "u145": "(v)=>v*1e+17",
        "u146": "(v)=>v*1e+20",
        "u147": "(v)=>v*1e+23"
      },
      "description": "A decivolt (dV) is an SI unit of voltage applying the deci‑ prefix (10^-1). One decivolt equals 0.1 volts. The deci prefix denotes a factor of 10^-1, so 1 decivolt equals 10^-1 volts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decivolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decivolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decivolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decivolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decivolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decivolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decivolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decivolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u139",
      "name": "centivolt",
      "shortName": "cV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-26",
        "u128": "(v)=>v*1e-23",
        "u129": "(v)=>v*1e-20",
        "u130": "(v)=>v*1e-17",
        "u131": "(v)=>v*1e-14",
        "u132": "(v)=>v*1e-11",
        "u133": "(v)=>v*1e-08",
        "u134": "(v)=>v*1e-05",
        "u135": "(v)=>v*0.0001",
        "u136": "(v)=>v*0.001",
        "u137": "(v)=>v*0.01",
        "u138": "(v)=>v*0.1",
        "u140": "(v)=>v*10",
        "u141": "(v)=>v*10000",
        "u142": "(v)=>v*10000000",
        "u143": "(v)=>v*10000000000",
        "u144": "(v)=>v*10000000000000",
        "u145": "(v)=>v*1e+16",
        "u146": "(v)=>v*1e+19",
        "u147": "(v)=>v*1e+22"
      },
      "description": "A centivolt (cV) is an SI unit of voltage applying the centi‑ prefix (10^-2). One centivolt equals 0.01 volts. The centi prefix denotes a factor of 10^-2, so 1 centivolt equals 10^-2 volts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centivolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centivolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centivolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centivolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centivolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centivolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centivolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centivolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u140",
      "name": "millivolt",
      "shortName": "mV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-27",
        "u128": "(v)=>v*1e-24",
        "u129": "(v)=>v*1e-21",
        "u130": "(v)=>v*1e-18",
        "u131": "(v)=>v*1e-15",
        "u132": "(v)=>v*1e-12",
        "u133": "(v)=>v*1e-09",
        "u134": "(v)=>v*1e-06",
        "u135": "(v)=>v*1e-05",
        "u136": "(v)=>v*0.0001",
        "u137": "(v)=>v*0.001",
        "u138": "(v)=>v*0.01",
        "u139": "(v)=>v*0.1",
        "u141": "(v)=>v*1000",
        "u142": "(v)=>v*1000000",
        "u143": "(v)=>v*1000000000",
        "u144": "(v)=>v*1000000000000",
        "u145": "(v)=>v*1e+15",
        "u146": "(v)=>v*1e+18",
        "u147": "(v)=>v*1e+21"
      },
      "description": "A millivolt (mV) is an SI unit of voltage applying the milli‑ prefix (10^-3). One millivolt equals 0.001 volts. The milli prefix denotes a factor of 10^-3, so 1 millivolt equals 10^-3 volts. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millivolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millivolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millivolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millivolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millivolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millivolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millivolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millivolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u141",
      "name": "microvolt",
      "shortName": "μV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-30",
        "u128": "(v)=>v*1e-27",
        "u129": "(v)=>v*1e-24",
        "u130": "(v)=>v*1e-21",
        "u131": "(v)=>v*1e-18",
        "u132": "(v)=>v*1e-15",
        "u133": "(v)=>v*1e-12",
        "u134": "(v)=>v*1e-09",
        "u135": "(v)=>v*1e-08",
        "u136": "(v)=>v*1e-07",
        "u137": "(v)=>v*1e-06",
        "u138": "(v)=>v*1e-05",
        "u139": "(v)=>v*0.0001",
        "u140": "(v)=>v*0.001",
        "u142": "(v)=>v*1000",
        "u143": "(v)=>v*1000000",
        "u144": "(v)=>v*1000000000",
        "u145": "(v)=>v*1000000000000",
        "u146": "(v)=>v*1e+15",
        "u147": "(v)=>v*1e+18"
      },
      "description": "A microvolt (μV) is an SI unit of voltage applying the micro‑ prefix (10^-6). One microvolt equals 1e-06 volts. The micro prefix denotes a factor of 10^-6, so 1 microvolt equals 10^-6 volts. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microvolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microvolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microvolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microvolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microvolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microvolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microvolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microvolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u142",
      "name": "nanovolt",
      "shortName": "nV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-33",
        "u128": "(v)=>v*1e-30",
        "u129": "(v)=>v*1e-27",
        "u130": "(v)=>v*1e-24",
        "u131": "(v)=>v*1e-21",
        "u132": "(v)=>v*1e-18",
        "u133": "(v)=>v*1e-15",
        "u134": "(v)=>v*1e-12",
        "u135": "(v)=>v*1e-11",
        "u136": "(v)=>v*1e-10",
        "u137": "(v)=>v*1e-09",
        "u138": "(v)=>v*1e-08",
        "u139": "(v)=>v*1e-07",
        "u140": "(v)=>v*1e-06",
        "u141": "(v)=>v*0.001",
        "u143": "(v)=>v*1000",
        "u144": "(v)=>v*1000000",
        "u145": "(v)=>v*1000000000",
        "u146": "(v)=>v*1000000000000",
        "u147": "(v)=>v*1e+15"
      },
      "description": "A nanovolt (nV) is an SI unit of voltage applying the nano‑ prefix (10^-9). One nanovolt equals 1e-09 volts. The nano prefix denotes a factor of 10^-9, so 1 nanovolt equals 10^-9 volts. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanovolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanovolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanovolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanovolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanovolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanovolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanovolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanovolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u143",
      "name": "picovolt",
      "shortName": "pV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-36",
        "u128": "(v)=>v*1e-33",
        "u129": "(v)=>v*1e-30",
        "u130": "(v)=>v*1e-27",
        "u131": "(v)=>v*1e-24",
        "u132": "(v)=>v*1e-21",
        "u133": "(v)=>v*1e-18",
        "u134": "(v)=>v*1e-15",
        "u135": "(v)=>v*1e-14",
        "u136": "(v)=>v*1e-13",
        "u137": "(v)=>v*1e-12",
        "u138": "(v)=>v*1e-11",
        "u139": "(v)=>v*1e-10",
        "u140": "(v)=>v*1e-09",
        "u141": "(v)=>v*1e-06",
        "u142": "(v)=>v*0.001",
        "u144": "(v)=>v*1000",
        "u145": "(v)=>v*1000000",
        "u146": "(v)=>v*1000000000",
        "u147": "(v)=>v*1000000000000"
      },
      "description": "A picovolt (pV) is an SI unit of voltage applying the pico‑ prefix (10^-12). One picovolt equals 1e-12 volts. The pico prefix denotes a factor of 10^-12, so 1 picovolt equals 10^-12 volts. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picovolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picovolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picovolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picovolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picovolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picovolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picovolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picovolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u144",
      "name": "femtovolt",
      "shortName": "fV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-39",
        "u128": "(v)=>v*1e-36",
        "u129": "(v)=>v*1e-33",
        "u130": "(v)=>v*1e-30",
        "u131": "(v)=>v*1e-27",
        "u132": "(v)=>v*1e-24",
        "u133": "(v)=>v*1e-21",
        "u134": "(v)=>v*1e-18",
        "u135": "(v)=>v*1e-17",
        "u136": "(v)=>v*1e-16",
        "u137": "(v)=>v*1e-15",
        "u138": "(v)=>v*1e-14",
        "u139": "(v)=>v*1e-13",
        "u140": "(v)=>v*1e-12",
        "u141": "(v)=>v*1e-09",
        "u142": "(v)=>v*1e-06",
        "u143": "(v)=>v*0.001",
        "u145": "(v)=>v*1000",
        "u146": "(v)=>v*1000000",
        "u147": "(v)=>v*1000000000"
      },
      "description": "A femtovolt (fV) is an SI unit of voltage applying the femto‑ prefix (10^-15). One femtovolt equals 1e-15 volts. The femto prefix denotes a factor of 10^-15, so 1 femtovolt equals 10^-15 volts. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtovolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtovolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtovolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtovolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtovolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtovolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtovolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtovolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u145",
      "name": "attovolt",
      "shortName": "aV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-42",
        "u128": "(v)=>v*1e-39",
        "u129": "(v)=>v*1e-36",
        "u130": "(v)=>v*1e-33",
        "u131": "(v)=>v*1e-30",
        "u132": "(v)=>v*1e-27",
        "u133": "(v)=>v*1e-24",
        "u134": "(v)=>v*1e-21",
        "u135": "(v)=>v*1e-20",
        "u136": "(v)=>v*1e-19",
        "u137": "(v)=>v*1e-18",
        "u138": "(v)=>v*1e-17",
        "u139": "(v)=>v*1e-16",
        "u140": "(v)=>v*1e-15",
        "u141": "(v)=>v*1e-12",
        "u142": "(v)=>v*1e-09",
        "u143": "(v)=>v*1e-06",
        "u144": "(v)=>v*0.001",
        "u146": "(v)=>v*1000",
        "u147": "(v)=>v*1000000"
      },
      "description": "A attovolt (aV) is an SI unit of voltage applying the atto‑ prefix (10^-18). One attovolt equals 1e-18 volts. The atto prefix denotes a factor of 10^-18, so 1 attovolt equals 10^-18 volts. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attovolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attovolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attovolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attovolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attovolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attovolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attovolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attovolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u146",
      "name": "zeptovolt",
      "shortName": "zV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-45",
        "u128": "(v)=>v*1e-42",
        "u129": "(v)=>v*1e-39",
        "u130": "(v)=>v*1e-36",
        "u131": "(v)=>v*1e-33",
        "u132": "(v)=>v*1e-30",
        "u133": "(v)=>v*1e-27",
        "u134": "(v)=>v*1e-24",
        "u135": "(v)=>v*1e-23",
        "u136": "(v)=>v*1e-22",
        "u137": "(v)=>v*1e-21",
        "u138": "(v)=>v*1e-20",
        "u139": "(v)=>v*1e-19",
        "u140": "(v)=>v*1e-18",
        "u141": "(v)=>v*1e-15",
        "u142": "(v)=>v*1e-12",
        "u143": "(v)=>v*1e-09",
        "u144": "(v)=>v*1e-06",
        "u145": "(v)=>v*0.001",
        "u147": "(v)=>v*1000"
      },
      "description": "A zeptovolt (zV) is an SI unit of voltage applying the zepto‑ prefix (10^-21). One zeptovolt equals 1e-21 volts. The zepto prefix denotes a factor of 10^-21, so 1 zeptovolt equals 10^-21 volts. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptovolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptovolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptovolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptovolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptovolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptovolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptovolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptovolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u147",
      "name": "yoctovolt",
      "shortName": "yV",
      "categoryId": "c27",
      "conversions": {
        "u127": "(v)=>v*1e-48",
        "u128": "(v)=>v*1e-45",
        "u129": "(v)=>v*1e-42",
        "u130": "(v)=>v*1e-39",
        "u131": "(v)=>v*1e-36",
        "u132": "(v)=>v*1e-33",
        "u133": "(v)=>v*1e-30",
        "u134": "(v)=>v*1e-27",
        "u135": "(v)=>v*1e-26",
        "u136": "(v)=>v*1e-25",
        "u137": "(v)=>v*1e-24",
        "u138": "(v)=>v*1e-23",
        "u139": "(v)=>v*1e-22",
        "u140": "(v)=>v*1e-21",
        "u141": "(v)=>v*1e-18",
        "u142": "(v)=>v*1e-15",
        "u143": "(v)=>v*1e-12",
        "u144": "(v)=>v*1e-09",
        "u145": "(v)=>v*1e-06",
        "u146": "(v)=>v*0.001"
      },
      "description": "A yoctovolt (yV) is an SI unit of voltage applying the yocto‑ prefix (10^-24). One yoctovolt equals 1e-24 volts. The yocto prefix denotes a factor of 10^-24, so 1 yoctovolt equals 10^-24 volts. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctovolt belongs to the broader physical quantity of voltage. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctovolt often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctovolt as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctovolt is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctovolt values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctovolt has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctovolt metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctovolt fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u148",
      "name": "yottaampere",
      "shortName": "YA",
      "categoryId": "c6",
      "conversions": {
        "u149": "(v)=>v*1000",
        "u150": "(v)=>v*1000000",
        "u151": "(v)=>v*1000000000",
        "u152": "(v)=>v*1000000000000",
        "u153": "(v)=>v*1e+15",
        "u154": "(v)=>v*1e+18",
        "u155": "(v)=>v*1e+21",
        "u156": "(v)=>v*1e+22",
        "u157": "(v)=>v*1e+23",
        "u158": "(v)=>v*1e+24",
        "u159": "(v)=>v*1e+25",
        "u160": "(v)=>v*1e+26",
        "u161": "(v)=>v*1e+27",
        "u162": "(v)=>v*1e+30",
        "u163": "(v)=>v*1e+33",
        "u164": "(v)=>v*1e+36",
        "u165": "(v)=>v*1e+39",
        "u166": "(v)=>v*1e+42",
        "u167": "(v)=>v*1e+45",
        "u168": "(v)=>v*1e+48"
      },
      "description": "A yottaampere (YA) is an SI unit of current applying the yotta‑ prefix (10^24). One yottaampere equals 1e+24 amperes. The yotta prefix denotes a factor of 10^24, so 1 yottaampere equals 10^24 amperes. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottaampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottaampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottaampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottaampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottaampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottaampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottaampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottaampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u149",
      "name": "zettaampere",
      "shortName": "ZA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*0.001",
        "u150": "(v)=>v*1000",
        "u151": "(v)=>v*1000000",
        "u152": "(v)=>v*1000000000",
        "u153": "(v)=>v*1000000000000",
        "u154": "(v)=>v*1e+15",
        "u155": "(v)=>v*1e+18",
        "u156": "(v)=>v*1e+19",
        "u157": "(v)=>v*1e+20",
        "u158": "(v)=>v*1e+21",
        "u159": "(v)=>v*1e+22",
        "u160": "(v)=>v*1e+23",
        "u161": "(v)=>v*1e+24",
        "u162": "(v)=>v*1e+27",
        "u163": "(v)=>v*1e+30",
        "u164": "(v)=>v*1e+33",
        "u165": "(v)=>v*1e+36",
        "u166": "(v)=>v*1e+39",
        "u167": "(v)=>v*1e+42",
        "u168": "(v)=>v*1e+45"
      },
      "description": "A zettaampere (ZA) is an SI unit of current applying the zetta‑ prefix (10^21). One zettaampere equals 1e+21 amperes. The zetta prefix denotes a factor of 10^21, so 1 zettaampere equals 10^21 amperes. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettaampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettaampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettaampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettaampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettaampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettaampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettaampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettaampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u150",
      "name": "exaampere",
      "shortName": "EA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-06",
        "u149": "(v)=>v*0.001",
        "u151": "(v)=>v*1000",
        "u152": "(v)=>v*1000000",
        "u153": "(v)=>v*1000000000",
        "u154": "(v)=>v*1000000000000",
        "u155": "(v)=>v*1e+15",
        "u156": "(v)=>v*1e+16",
        "u157": "(v)=>v*1e+17",
        "u158": "(v)=>v*1e+18",
        "u159": "(v)=>v*1e+19",
        "u160": "(v)=>v*1e+20",
        "u161": "(v)=>v*1e+21",
        "u162": "(v)=>v*1e+24",
        "u163": "(v)=>v*1e+27",
        "u164": "(v)=>v*1e+30",
        "u165": "(v)=>v*1e+33",
        "u166": "(v)=>v*1e+36",
        "u167": "(v)=>v*1e+39",
        "u168": "(v)=>v*1e+42"
      },
      "description": "A exaampere (EA) is an SI unit of current applying the exa‑ prefix (10^18). One exaampere equals 1e+18 amperes. The exa prefix denotes a factor of 10^18, so 1 exaampere equals 10^18 amperes. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exaampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exaampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exaampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exaampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exaampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exaampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exaampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exaampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u151",
      "name": "petaampere",
      "shortName": "PA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-09",
        "u149": "(v)=>v*1e-06",
        "u150": "(v)=>v*0.001",
        "u152": "(v)=>v*1000",
        "u153": "(v)=>v*1000000",
        "u154": "(v)=>v*1000000000",
        "u155": "(v)=>v*1000000000000",
        "u156": "(v)=>v*10000000000000",
        "u157": "(v)=>v*100000000000000",
        "u158": "(v)=>v*1e+15",
        "u159": "(v)=>v*1e+16",
        "u160": "(v)=>v*1e+17",
        "u161": "(v)=>v*1e+18",
        "u162": "(v)=>v*1e+21",
        "u163": "(v)=>v*1e+24",
        "u164": "(v)=>v*1e+27",
        "u165": "(v)=>v*1e+30",
        "u166": "(v)=>v*1e+33",
        "u167": "(v)=>v*1e+36",
        "u168": "(v)=>v*1e+39"
      },
      "description": "A petaampere (PA) is an SI unit of current applying the peta‑ prefix (10^15). One petaampere equals 1e+15 amperes. The peta prefix denotes a factor of 10^15, so 1 petaampere equals 10^15 amperes. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petaampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petaampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petaampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petaampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petaampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petaampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petaampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petaampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u152",
      "name": "teraampere",
      "shortName": "TA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-12",
        "u149": "(v)=>v*1e-09",
        "u150": "(v)=>v*1e-06",
        "u151": "(v)=>v*0.001",
        "u153": "(v)=>v*1000",
        "u154": "(v)=>v*1000000",
        "u155": "(v)=>v*1000000000",
        "u156": "(v)=>v*10000000000",
        "u157": "(v)=>v*100000000000",
        "u158": "(v)=>v*1000000000000",
        "u159": "(v)=>v*10000000000000",
        "u160": "(v)=>v*100000000000000",
        "u161": "(v)=>v*1e+15",
        "u162": "(v)=>v*1e+18",
        "u163": "(v)=>v*1e+21",
        "u164": "(v)=>v*1e+24",
        "u165": "(v)=>v*1e+27",
        "u166": "(v)=>v*1e+30",
        "u167": "(v)=>v*1e+33",
        "u168": "(v)=>v*1e+36"
      },
      "description": "A teraampere (TA) is an SI unit of current applying the tera‑ prefix (10^12). One teraampere equals 1e+12 amperes. The tera prefix denotes a factor of 10^12, so 1 teraampere equals 10^12 amperes. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Teraampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teraampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teraampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teraampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teraampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teraampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teraampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teraampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u153",
      "name": "gigaampere",
      "shortName": "GA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-15",
        "u149": "(v)=>v*1e-12",
        "u150": "(v)=>v*1e-09",
        "u151": "(v)=>v*1e-06",
        "u152": "(v)=>v*0.001",
        "u154": "(v)=>v*1000",
        "u155": "(v)=>v*1000000",
        "u156": "(v)=>v*10000000",
        "u157": "(v)=>v*100000000",
        "u158": "(v)=>v*1000000000",
        "u159": "(v)=>v*10000000000",
        "u160": "(v)=>v*100000000000",
        "u161": "(v)=>v*1000000000000",
        "u162": "(v)=>v*1e+15",
        "u163": "(v)=>v*1e+18",
        "u164": "(v)=>v*1e+21",
        "u165": "(v)=>v*1e+24",
        "u166": "(v)=>v*1e+27",
        "u167": "(v)=>v*1e+30",
        "u168": "(v)=>v*1e+33"
      },
      "description": "A gigaampere (GA) is an SI unit of current applying the giga‑ prefix (10^9). One gigaampere equals 1000000000 amperes. The giga prefix denotes a factor of 10^9, so 1 gigaampere equals 10^9 amperes. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigaampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigaampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigaampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigaampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigaampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigaampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigaampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigaampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u154",
      "name": "megaampere",
      "shortName": "MA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-18",
        "u149": "(v)=>v*1e-15",
        "u150": "(v)=>v*1e-12",
        "u151": "(v)=>v*1e-09",
        "u152": "(v)=>v*1e-06",
        "u153": "(v)=>v*0.001",
        "u155": "(v)=>v*1000",
        "u156": "(v)=>v*10000",
        "u157": "(v)=>v*100000",
        "u158": "(v)=>v*1000000",
        "u159": "(v)=>v*10000000",
        "u160": "(v)=>v*100000000",
        "u161": "(v)=>v*1000000000",
        "u162": "(v)=>v*1000000000000",
        "u163": "(v)=>v*1e+15",
        "u164": "(v)=>v*1e+18",
        "u165": "(v)=>v*1e+21",
        "u166": "(v)=>v*1e+24",
        "u167": "(v)=>v*1e+27",
        "u168": "(v)=>v*1e+30"
      },
      "description": "A megaampere (MA) is an SI unit of current applying the mega‑ prefix (10^6). One megaampere equals 1000000 amperes. The mega prefix denotes a factor of 10^6, so 1 megaampere equals 10^6 amperes. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megaampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megaampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megaampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megaampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megaampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megaampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megaampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megaampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u155",
      "name": "kiloampere",
      "shortName": "kA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-21",
        "u149": "(v)=>v*1e-18",
        "u150": "(v)=>v*1e-15",
        "u151": "(v)=>v*1e-12",
        "u152": "(v)=>v*1e-09",
        "u153": "(v)=>v*1e-06",
        "u154": "(v)=>v*0.001",
        "u156": "(v)=>v*10",
        "u157": "(v)=>v*100",
        "u158": "(v)=>v*1000",
        "u159": "(v)=>v*10000",
        "u160": "(v)=>v*100000",
        "u161": "(v)=>v*1000000",
        "u162": "(v)=>v*1000000000",
        "u163": "(v)=>v*1000000000000",
        "u164": "(v)=>v*1e+15",
        "u165": "(v)=>v*1e+18",
        "u166": "(v)=>v*1e+21",
        "u167": "(v)=>v*1e+24",
        "u168": "(v)=>v*1e+27"
      },
      "description": "A kiloampere (kA) is an SI unit of current applying the kilo‑ prefix (10^3). One kiloampere equals 1000 amperes. The kilo prefix denotes a factor of 10^3, so 1 kiloampere equals 10^3 amperes. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kiloampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kiloampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kiloampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kiloampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kiloampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kiloampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kiloampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kiloampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u156",
      "name": "hectoampere",
      "shortName": "hA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-22",
        "u149": "(v)=>v*1e-19",
        "u150": "(v)=>v*1e-16",
        "u151": "(v)=>v*1e-13",
        "u152": "(v)=>v*1e-10",
        "u153": "(v)=>v*1e-07",
        "u154": "(v)=>v*0.0001",
        "u155": "(v)=>v*0.1",
        "u157": "(v)=>v*10",
        "u158": "(v)=>v*100",
        "u159": "(v)=>v*1000",
        "u160": "(v)=>v*10000",
        "u161": "(v)=>v*100000",
        "u162": "(v)=>v*100000000",
        "u163": "(v)=>v*100000000000",
        "u164": "(v)=>v*100000000000000",
        "u165": "(v)=>v*1e+17",
        "u166": "(v)=>v*1e+20",
        "u167": "(v)=>v*1e+23",
        "u168": "(v)=>v*1e+26"
      },
      "description": "A hectoampere (hA) is an SI unit of current applying the hecto‑ prefix (10^2). One hectoampere equals 100 amperes. The hecto prefix denotes a factor of 10^2, so 1 hectoampere equals 10^2 amperes. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectoampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectoampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectoampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectoampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectoampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectoampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectoampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectoampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u157",
      "name": "decaampere",
      "shortName": "daA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-23",
        "u149": "(v)=>v*1e-20",
        "u150": "(v)=>v*1e-17",
        "u151": "(v)=>v*1e-14",
        "u152": "(v)=>v*1e-11",
        "u153": "(v)=>v*1e-08",
        "u154": "(v)=>v*1e-05",
        "u155": "(v)=>v*0.01",
        "u156": "(v)=>v*0.1",
        "u158": "(v)=>v*10",
        "u159": "(v)=>v*100",
        "u160": "(v)=>v*1000",
        "u161": "(v)=>v*10000",
        "u162": "(v)=>v*10000000",
        "u163": "(v)=>v*10000000000",
        "u164": "(v)=>v*10000000000000",
        "u165": "(v)=>v*1e+16",
        "u166": "(v)=>v*1e+19",
        "u167": "(v)=>v*1e+22",
        "u168": "(v)=>v*1e+25"
      },
      "description": "A decaampere (daA) is an SI unit of current applying the deca‑ prefix (10^1). One decaampere equals 10 amperes. The deca prefix denotes a factor of 10^1, so 1 decaampere equals 10^1 amperes. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decaampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decaampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decaampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decaampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decaampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decaampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decaampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decaampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u158",
      "name": "ampere",
      "shortName": "A",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-24",
        "u149": "(v)=>v*1e-21",
        "u150": "(v)=>v*1e-18",
        "u151": "(v)=>v*1e-15",
        "u152": "(v)=>v*1e-12",
        "u153": "(v)=>v*1e-09",
        "u154": "(v)=>v*1e-06",
        "u155": "(v)=>v*0.001",
        "u156": "(v)=>v*0.01",
        "u157": "(v)=>v*0.1",
        "u159": "(v)=>v*10",
        "u160": "(v)=>v*100",
        "u161": "(v)=>v*1000",
        "u162": "(v)=>v*1000000",
        "u163": "(v)=>v*1000000000",
        "u164": "(v)=>v*1000000000000",
        "u165": "(v)=>v*1e+15",
        "u166": "(v)=>v*1e+18",
        "u167": "(v)=>v*1e+21",
        "u168": "(v)=>v*1e+24"
      },
      "description": "The ampere (A) is the SI base unit of electric current, defined via the fixed numerical value of the elementary charge (1.602 176 634×10⁻¹⁹ C). Ampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of ampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent ampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, ampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when ampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding ampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed ampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of ampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-base",
        "metric"
      ]
    },
    {
      "id": "u159",
      "name": "deciampere",
      "shortName": "dA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-25",
        "u149": "(v)=>v*1e-22",
        "u150": "(v)=>v*1e-19",
        "u151": "(v)=>v*1e-16",
        "u152": "(v)=>v*1e-13",
        "u153": "(v)=>v*1e-10",
        "u154": "(v)=>v*1e-07",
        "u155": "(v)=>v*0.0001",
        "u156": "(v)=>v*0.001",
        "u157": "(v)=>v*0.01",
        "u158": "(v)=>v*0.1",
        "u160": "(v)=>v*10",
        "u161": "(v)=>v*100",
        "u162": "(v)=>v*100000",
        "u163": "(v)=>v*100000000",
        "u164": "(v)=>v*100000000000",
        "u165": "(v)=>v*100000000000000",
        "u166": "(v)=>v*1e+17",
        "u167": "(v)=>v*1e+20",
        "u168": "(v)=>v*1e+23"
      },
      "description": "A deciampere (dA) is an SI unit of current applying the deci‑ prefix (10^-1). One deciampere equals 0.1 amperes. The deci prefix denotes a factor of 10^-1, so 1 deciampere equals 10^-1 amperes. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Deciampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of deciampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent deciampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, deciampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when deciampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding deciampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed deciampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of deciampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u160",
      "name": "centiampere",
      "shortName": "cA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-26",
        "u149": "(v)=>v*1e-23",
        "u150": "(v)=>v*1e-20",
        "u151": "(v)=>v*1e-17",
        "u152": "(v)=>v*1e-14",
        "u153": "(v)=>v*1e-11",
        "u154": "(v)=>v*1e-08",
        "u155": "(v)=>v*1e-05",
        "u156": "(v)=>v*0.0001",
        "u157": "(v)=>v*0.001",
        "u158": "(v)=>v*0.01",
        "u159": "(v)=>v*0.1",
        "u161": "(v)=>v*10",
        "u162": "(v)=>v*10000",
        "u163": "(v)=>v*10000000",
        "u164": "(v)=>v*10000000000",
        "u165": "(v)=>v*10000000000000",
        "u166": "(v)=>v*1e+16",
        "u167": "(v)=>v*1e+19",
        "u168": "(v)=>v*1e+22"
      },
      "description": "A centiampere (cA) is an SI unit of current applying the centi‑ prefix (10^-2). One centiampere equals 0.01 amperes. The centi prefix denotes a factor of 10^-2, so 1 centiampere equals 10^-2 amperes. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centiampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centiampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centiampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centiampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centiampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centiampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centiampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centiampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u161",
      "name": "milliampere",
      "shortName": "mA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-27",
        "u149": "(v)=>v*1e-24",
        "u150": "(v)=>v*1e-21",
        "u151": "(v)=>v*1e-18",
        "u152": "(v)=>v*1e-15",
        "u153": "(v)=>v*1e-12",
        "u154": "(v)=>v*1e-09",
        "u155": "(v)=>v*1e-06",
        "u156": "(v)=>v*1e-05",
        "u157": "(v)=>v*0.0001",
        "u158": "(v)=>v*0.001",
        "u159": "(v)=>v*0.01",
        "u160": "(v)=>v*0.1",
        "u162": "(v)=>v*1000",
        "u163": "(v)=>v*1000000",
        "u164": "(v)=>v*1000000000",
        "u165": "(v)=>v*1000000000000",
        "u166": "(v)=>v*1e+15",
        "u167": "(v)=>v*1e+18",
        "u168": "(v)=>v*1e+21"
      },
      "description": "A milliampere (mA) is an SI unit of current applying the milli‑ prefix (10^-3). One milliampere equals 0.001 amperes. The milli prefix denotes a factor of 10^-3, so 1 milliampere equals 10^-3 amperes. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Milliampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of milliampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent milliampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, milliampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when milliampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding milliampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed milliampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of milliampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u162",
      "name": "microampere",
      "shortName": "μA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-30",
        "u149": "(v)=>v*1e-27",
        "u150": "(v)=>v*1e-24",
        "u151": "(v)=>v*1e-21",
        "u152": "(v)=>v*1e-18",
        "u153": "(v)=>v*1e-15",
        "u154": "(v)=>v*1e-12",
        "u155": "(v)=>v*1e-09",
        "u156": "(v)=>v*1e-08",
        "u157": "(v)=>v*1e-07",
        "u158": "(v)=>v*1e-06",
        "u159": "(v)=>v*1e-05",
        "u160": "(v)=>v*0.0001",
        "u161": "(v)=>v*0.001",
        "u163": "(v)=>v*1000",
        "u164": "(v)=>v*1000000",
        "u165": "(v)=>v*1000000000",
        "u166": "(v)=>v*1000000000000",
        "u167": "(v)=>v*1e+15",
        "u168": "(v)=>v*1e+18"
      },
      "description": "A microampere (μA) is an SI unit of current applying the micro‑ prefix (10^-6). One microampere equals 1e-06 amperes. The micro prefix denotes a factor of 10^-6, so 1 microampere equals 10^-6 amperes. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u163",
      "name": "nanoampere",
      "shortName": "nA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-33",
        "u149": "(v)=>v*1e-30",
        "u150": "(v)=>v*1e-27",
        "u151": "(v)=>v*1e-24",
        "u152": "(v)=>v*1e-21",
        "u153": "(v)=>v*1e-18",
        "u154": "(v)=>v*1e-15",
        "u155": "(v)=>v*1e-12",
        "u156": "(v)=>v*1e-11",
        "u157": "(v)=>v*1e-10",
        "u158": "(v)=>v*1e-09",
        "u159": "(v)=>v*1e-08",
        "u160": "(v)=>v*1e-07",
        "u161": "(v)=>v*1e-06",
        "u162": "(v)=>v*0.001",
        "u164": "(v)=>v*1000",
        "u165": "(v)=>v*1000000",
        "u166": "(v)=>v*1000000000",
        "u167": "(v)=>v*1000000000000",
        "u168": "(v)=>v*1e+15"
      },
      "description": "A nanoampere (nA) is an SI unit of current applying the nano‑ prefix (10^-9). One nanoampere equals 1e-09 amperes. The nano prefix denotes a factor of 10^-9, so 1 nanoampere equals 10^-9 amperes. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanoampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanoampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanoampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanoampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanoampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanoampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanoampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanoampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u164",
      "name": "picoampere",
      "shortName": "pA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-36",
        "u149": "(v)=>v*1e-33",
        "u150": "(v)=>v*1e-30",
        "u151": "(v)=>v*1e-27",
        "u152": "(v)=>v*1e-24",
        "u153": "(v)=>v*1e-21",
        "u154": "(v)=>v*1e-18",
        "u155": "(v)=>v*1e-15",
        "u156": "(v)=>v*1e-14",
        "u157": "(v)=>v*1e-13",
        "u158": "(v)=>v*1e-12",
        "u159": "(v)=>v*1e-11",
        "u160": "(v)=>v*1e-10",
        "u161": "(v)=>v*1e-09",
        "u162": "(v)=>v*1e-06",
        "u163": "(v)=>v*0.001",
        "u165": "(v)=>v*1000",
        "u166": "(v)=>v*1000000",
        "u167": "(v)=>v*1000000000",
        "u168": "(v)=>v*1000000000000"
      },
      "description": "A picoampere (pA) is an SI unit of current applying the pico‑ prefix (10^-12). One picoampere equals 1e-12 amperes. The pico prefix denotes a factor of 10^-12, so 1 picoampere equals 10^-12 amperes. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picoampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picoampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picoampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picoampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picoampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picoampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picoampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picoampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u165",
      "name": "femtoampere",
      "shortName": "fA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-39",
        "u149": "(v)=>v*1e-36",
        "u150": "(v)=>v*1e-33",
        "u151": "(v)=>v*1e-30",
        "u152": "(v)=>v*1e-27",
        "u153": "(v)=>v*1e-24",
        "u154": "(v)=>v*1e-21",
        "u155": "(v)=>v*1e-18",
        "u156": "(v)=>v*1e-17",
        "u157": "(v)=>v*1e-16",
        "u158": "(v)=>v*1e-15",
        "u159": "(v)=>v*1e-14",
        "u160": "(v)=>v*1e-13",
        "u161": "(v)=>v*1e-12",
        "u162": "(v)=>v*1e-09",
        "u163": "(v)=>v*1e-06",
        "u164": "(v)=>v*0.001",
        "u166": "(v)=>v*1000",
        "u167": "(v)=>v*1000000",
        "u168": "(v)=>v*1000000000"
      },
      "description": "A femtoampere (fA) is an SI unit of current applying the femto‑ prefix (10^-15). One femtoampere equals 1e-15 amperes. The femto prefix denotes a factor of 10^-15, so 1 femtoampere equals 10^-15 amperes. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtoampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtoampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtoampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtoampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtoampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtoampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtoampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtoampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u166",
      "name": "attoampere",
      "shortName": "aA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-42",
        "u149": "(v)=>v*1e-39",
        "u150": "(v)=>v*1e-36",
        "u151": "(v)=>v*1e-33",
        "u152": "(v)=>v*1e-30",
        "u153": "(v)=>v*1e-27",
        "u154": "(v)=>v*1e-24",
        "u155": "(v)=>v*1e-21",
        "u156": "(v)=>v*1e-20",
        "u157": "(v)=>v*1e-19",
        "u158": "(v)=>v*1e-18",
        "u159": "(v)=>v*1e-17",
        "u160": "(v)=>v*1e-16",
        "u161": "(v)=>v*1e-15",
        "u162": "(v)=>v*1e-12",
        "u163": "(v)=>v*1e-09",
        "u164": "(v)=>v*1e-06",
        "u165": "(v)=>v*0.001",
        "u167": "(v)=>v*1000",
        "u168": "(v)=>v*1000000"
      },
      "description": "A attoampere (aA) is an SI unit of current applying the atto‑ prefix (10^-18). One attoampere equals 1e-18 amperes. The atto prefix denotes a factor of 10^-18, so 1 attoampere equals 10^-18 amperes. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attoampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attoampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attoampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attoampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attoampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attoampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attoampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attoampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u167",
      "name": "zeptoampere",
      "shortName": "zA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-45",
        "u149": "(v)=>v*1e-42",
        "u150": "(v)=>v*1e-39",
        "u151": "(v)=>v*1e-36",
        "u152": "(v)=>v*1e-33",
        "u153": "(v)=>v*1e-30",
        "u154": "(v)=>v*1e-27",
        "u155": "(v)=>v*1e-24",
        "u156": "(v)=>v*1e-23",
        "u157": "(v)=>v*1e-22",
        "u158": "(v)=>v*1e-21",
        "u159": "(v)=>v*1e-20",
        "u160": "(v)=>v*1e-19",
        "u161": "(v)=>v*1e-18",
        "u162": "(v)=>v*1e-15",
        "u163": "(v)=>v*1e-12",
        "u164": "(v)=>v*1e-09",
        "u165": "(v)=>v*1e-06",
        "u166": "(v)=>v*0.001",
        "u168": "(v)=>v*1000"
      },
      "description": "A zeptoampere (zA) is an SI unit of current applying the zepto‑ prefix (10^-21). One zeptoampere equals 1e-21 amperes. The zepto prefix denotes a factor of 10^-21, so 1 zeptoampere equals 10^-21 amperes. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptoampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptoampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptoampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptoampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptoampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptoampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptoampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptoampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u168",
      "name": "yoctoampere",
      "shortName": "yA",
      "categoryId": "c6",
      "conversions": {
        "u148": "(v)=>v*1e-48",
        "u149": "(v)=>v*1e-45",
        "u150": "(v)=>v*1e-42",
        "u151": "(v)=>v*1e-39",
        "u152": "(v)=>v*1e-36",
        "u153": "(v)=>v*1e-33",
        "u154": "(v)=>v*1e-30",
        "u155": "(v)=>v*1e-27",
        "u156": "(v)=>v*1e-26",
        "u157": "(v)=>v*1e-25",
        "u158": "(v)=>v*1e-24",
        "u159": "(v)=>v*1e-23",
        "u160": "(v)=>v*1e-22",
        "u161": "(v)=>v*1e-21",
        "u162": "(v)=>v*1e-18",
        "u163": "(v)=>v*1e-15",
        "u164": "(v)=>v*1e-12",
        "u165": "(v)=>v*1e-09",
        "u166": "(v)=>v*1e-06",
        "u167": "(v)=>v*0.001"
      },
      "description": "A yoctoampere (yA) is an SI unit of current applying the yocto‑ prefix (10^-24). One yoctoampere equals 1e-24 amperes. The yocto prefix denotes a factor of 10^-24, so 1 yoctoampere equals 10^-24 amperes. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctoampere belongs to the broader physical quantity of current. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctoampere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctoampere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctoampere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctoampere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctoampere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctoampere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctoampere fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u169",
      "name": "yottaohm",
      "shortName": "Yohm",
      "categoryId": "c22",
      "conversions": {
        "u170": "(v)=>v*1000",
        "u171": "(v)=>v*1000000",
        "u172": "(v)=>v*1000000000",
        "u173": "(v)=>v*1000000000000",
        "u174": "(v)=>v*1e+15",
        "u175": "(v)=>v*1e+18",
        "u176": "(v)=>v*1e+21",
        "u177": "(v)=>v*1e+22",
        "u178": "(v)=>v*1e+23",
        "u179": "(v)=>v*1e+24",
        "u180": "(v)=>v*1e+25",
        "u181": "(v)=>v*1e+26",
        "u182": "(v)=>v*1e+27",
        "u183": "(v)=>v*1e+30",
        "u184": "(v)=>v*1e+33",
        "u185": "(v)=>v*1e+36",
        "u186": "(v)=>v*1e+39",
        "u187": "(v)=>v*1e+42",
        "u188": "(v)=>v*1e+45",
        "u189": "(v)=>v*1e+48"
      },
      "description": "A yottaohm (Yohm) is an SI unit of resistance applying the yotta‑ prefix (10^24). One yottaohm equals 1e+24 ohms. The yotta prefix denotes a factor of 10^24, so 1 yottaohm equals 10^24 ohms. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottaohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottaohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottaohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottaohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottaohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottaohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottaohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottaohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u170",
      "name": "zettaohm",
      "shortName": "Zohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*0.001",
        "u171": "(v)=>v*1000",
        "u172": "(v)=>v*1000000",
        "u173": "(v)=>v*1000000000",
        "u174": "(v)=>v*1000000000000",
        "u175": "(v)=>v*1e+15",
        "u176": "(v)=>v*1e+18",
        "u177": "(v)=>v*1e+19",
        "u178": "(v)=>v*1e+20",
        "u179": "(v)=>v*1e+21",
        "u180": "(v)=>v*1e+22",
        "u181": "(v)=>v*1e+23",
        "u182": "(v)=>v*1e+24",
        "u183": "(v)=>v*1e+27",
        "u184": "(v)=>v*1e+30",
        "u185": "(v)=>v*1e+33",
        "u186": "(v)=>v*1e+36",
        "u187": "(v)=>v*1e+39",
        "u188": "(v)=>v*1e+42",
        "u189": "(v)=>v*1e+45"
      },
      "description": "A zettaohm (Zohm) is an SI unit of resistance applying the zetta‑ prefix (10^21). One zettaohm equals 1e+21 ohms. The zetta prefix denotes a factor of 10^21, so 1 zettaohm equals 10^21 ohms. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettaohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettaohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettaohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettaohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettaohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettaohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettaohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettaohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u171",
      "name": "exaohm",
      "shortName": "Eohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-06",
        "u170": "(v)=>v*0.001",
        "u172": "(v)=>v*1000",
        "u173": "(v)=>v*1000000",
        "u174": "(v)=>v*1000000000",
        "u175": "(v)=>v*1000000000000",
        "u176": "(v)=>v*1e+15",
        "u177": "(v)=>v*1e+16",
        "u178": "(v)=>v*1e+17",
        "u179": "(v)=>v*1e+18",
        "u180": "(v)=>v*1e+19",
        "u181": "(v)=>v*1e+20",
        "u182": "(v)=>v*1e+21",
        "u183": "(v)=>v*1e+24",
        "u184": "(v)=>v*1e+27",
        "u185": "(v)=>v*1e+30",
        "u186": "(v)=>v*1e+33",
        "u187": "(v)=>v*1e+36",
        "u188": "(v)=>v*1e+39",
        "u189": "(v)=>v*1e+42"
      },
      "description": "A exaohm (Eohm) is an SI unit of resistance applying the exa‑ prefix (10^18). One exaohm equals 1e+18 ohms. The exa prefix denotes a factor of 10^18, so 1 exaohm equals 10^18 ohms. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exaohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exaohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exaohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exaohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exaohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exaohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exaohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exaohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u172",
      "name": "petaohm",
      "shortName": "Pohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-09",
        "u170": "(v)=>v*1e-06",
        "u171": "(v)=>v*0.001",
        "u173": "(v)=>v*1000",
        "u174": "(v)=>v*1000000",
        "u175": "(v)=>v*1000000000",
        "u176": "(v)=>v*1000000000000",
        "u177": "(v)=>v*10000000000000",
        "u178": "(v)=>v*100000000000000",
        "u179": "(v)=>v*1e+15",
        "u180": "(v)=>v*1e+16",
        "u181": "(v)=>v*1e+17",
        "u182": "(v)=>v*1e+18",
        "u183": "(v)=>v*1e+21",
        "u184": "(v)=>v*1e+24",
        "u185": "(v)=>v*1e+27",
        "u186": "(v)=>v*1e+30",
        "u187": "(v)=>v*1e+33",
        "u188": "(v)=>v*1e+36",
        "u189": "(v)=>v*1e+39"
      },
      "description": "A petaohm (Pohm) is an SI unit of resistance applying the peta‑ prefix (10^15). One petaohm equals 1e+15 ohms. The peta prefix denotes a factor of 10^15, so 1 petaohm equals 10^15 ohms. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petaohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petaohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petaohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petaohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petaohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petaohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petaohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petaohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u173",
      "name": "teraohm",
      "shortName": "Tohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-12",
        "u170": "(v)=>v*1e-09",
        "u171": "(v)=>v*1e-06",
        "u172": "(v)=>v*0.001",
        "u174": "(v)=>v*1000",
        "u175": "(v)=>v*1000000",
        "u176": "(v)=>v*1000000000",
        "u177": "(v)=>v*10000000000",
        "u178": "(v)=>v*100000000000",
        "u179": "(v)=>v*1000000000000",
        "u180": "(v)=>v*10000000000000",
        "u181": "(v)=>v*100000000000000",
        "u182": "(v)=>v*1e+15",
        "u183": "(v)=>v*1e+18",
        "u184": "(v)=>v*1e+21",
        "u185": "(v)=>v*1e+24",
        "u186": "(v)=>v*1e+27",
        "u187": "(v)=>v*1e+30",
        "u188": "(v)=>v*1e+33",
        "u189": "(v)=>v*1e+36"
      },
      "description": "A teraohm (Tohm) is an SI unit of resistance applying the tera‑ prefix (10^12). One teraohm equals 1e+12 ohms. The tera prefix denotes a factor of 10^12, so 1 teraohm equals 10^12 ohms. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Teraohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teraohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teraohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teraohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teraohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teraohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teraohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teraohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u174",
      "name": "gigaohm",
      "shortName": "Gohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-15",
        "u170": "(v)=>v*1e-12",
        "u171": "(v)=>v*1e-09",
        "u172": "(v)=>v*1e-06",
        "u173": "(v)=>v*0.001",
        "u175": "(v)=>v*1000",
        "u176": "(v)=>v*1000000",
        "u177": "(v)=>v*10000000",
        "u178": "(v)=>v*100000000",
        "u179": "(v)=>v*1000000000",
        "u180": "(v)=>v*10000000000",
        "u181": "(v)=>v*100000000000",
        "u182": "(v)=>v*1000000000000",
        "u183": "(v)=>v*1e+15",
        "u184": "(v)=>v*1e+18",
        "u185": "(v)=>v*1e+21",
        "u186": "(v)=>v*1e+24",
        "u187": "(v)=>v*1e+27",
        "u188": "(v)=>v*1e+30",
        "u189": "(v)=>v*1e+33"
      },
      "description": "A gigaohm (Gohm) is an SI unit of resistance applying the giga‑ prefix (10^9). One gigaohm equals 1000000000 ohms. The giga prefix denotes a factor of 10^9, so 1 gigaohm equals 10^9 ohms. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigaohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigaohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigaohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigaohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigaohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigaohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigaohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigaohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u175",
      "name": "megaohm",
      "shortName": "Mohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-18",
        "u170": "(v)=>v*1e-15",
        "u171": "(v)=>v*1e-12",
        "u172": "(v)=>v*1e-09",
        "u173": "(v)=>v*1e-06",
        "u174": "(v)=>v*0.001",
        "u176": "(v)=>v*1000",
        "u177": "(v)=>v*10000",
        "u178": "(v)=>v*100000",
        "u179": "(v)=>v*1000000",
        "u180": "(v)=>v*10000000",
        "u181": "(v)=>v*100000000",
        "u182": "(v)=>v*1000000000",
        "u183": "(v)=>v*1000000000000",
        "u184": "(v)=>v*1e+15",
        "u185": "(v)=>v*1e+18",
        "u186": "(v)=>v*1e+21",
        "u187": "(v)=>v*1e+24",
        "u188": "(v)=>v*1e+27",
        "u189": "(v)=>v*1e+30"
      },
      "description": "A megaohm (Mohm) is an SI unit of resistance applying the mega‑ prefix (10^6). One megaohm equals 1000000 ohms. The mega prefix denotes a factor of 10^6, so 1 megaohm equals 10^6 ohms. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megaohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megaohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megaohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megaohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megaohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megaohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megaohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megaohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u176",
      "name": "kiloohm",
      "shortName": "kohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-21",
        "u170": "(v)=>v*1e-18",
        "u171": "(v)=>v*1e-15",
        "u172": "(v)=>v*1e-12",
        "u173": "(v)=>v*1e-09",
        "u174": "(v)=>v*1e-06",
        "u175": "(v)=>v*0.001",
        "u177": "(v)=>v*10",
        "u178": "(v)=>v*100",
        "u179": "(v)=>v*1000",
        "u180": "(v)=>v*10000",
        "u181": "(v)=>v*100000",
        "u182": "(v)=>v*1000000",
        "u183": "(v)=>v*1000000000",
        "u184": "(v)=>v*1000000000000",
        "u185": "(v)=>v*1e+15",
        "u186": "(v)=>v*1e+18",
        "u187": "(v)=>v*1e+21",
        "u188": "(v)=>v*1e+24",
        "u189": "(v)=>v*1e+27"
      },
      "description": "A kiloohm (kohm) is an SI unit of resistance applying the kilo‑ prefix (10^3). One kiloohm equals 1000 ohms. The kilo prefix denotes a factor of 10^3, so 1 kiloohm equals 10^3 ohms. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kiloohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kiloohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kiloohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kiloohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kiloohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kiloohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kiloohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kiloohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u177",
      "name": "hectoohm",
      "shortName": "hohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-22",
        "u170": "(v)=>v*1e-19",
        "u171": "(v)=>v*1e-16",
        "u172": "(v)=>v*1e-13",
        "u173": "(v)=>v*1e-10",
        "u174": "(v)=>v*1e-07",
        "u175": "(v)=>v*0.0001",
        "u176": "(v)=>v*0.1",
        "u178": "(v)=>v*10",
        "u179": "(v)=>v*100",
        "u180": "(v)=>v*1000",
        "u181": "(v)=>v*10000",
        "u182": "(v)=>v*100000",
        "u183": "(v)=>v*100000000",
        "u184": "(v)=>v*100000000000",
        "u185": "(v)=>v*100000000000000",
        "u186": "(v)=>v*1e+17",
        "u187": "(v)=>v*1e+20",
        "u188": "(v)=>v*1e+23",
        "u189": "(v)=>v*1e+26"
      },
      "description": "A hectoohm (hohm) is an SI unit of resistance applying the hecto‑ prefix (10^2). One hectoohm equals 100 ohms. The hecto prefix denotes a factor of 10^2, so 1 hectoohm equals 10^2 ohms. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectoohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectoohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectoohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectoohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectoohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectoohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectoohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectoohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u178",
      "name": "decaohm",
      "shortName": "daohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-23",
        "u170": "(v)=>v*1e-20",
        "u171": "(v)=>v*1e-17",
        "u172": "(v)=>v*1e-14",
        "u173": "(v)=>v*1e-11",
        "u174": "(v)=>v*1e-08",
        "u175": "(v)=>v*1e-05",
        "u176": "(v)=>v*0.01",
        "u177": "(v)=>v*0.1",
        "u179": "(v)=>v*10",
        "u180": "(v)=>v*100",
        "u181": "(v)=>v*1000",
        "u182": "(v)=>v*10000",
        "u183": "(v)=>v*10000000",
        "u184": "(v)=>v*10000000000",
        "u185": "(v)=>v*10000000000000",
        "u186": "(v)=>v*1e+16",
        "u187": "(v)=>v*1e+19",
        "u188": "(v)=>v*1e+22",
        "u189": "(v)=>v*1e+25"
      },
      "description": "A decaohm (daohm) is an SI unit of resistance applying the deca‑ prefix (10^1). One decaohm equals 10 ohms. The deca prefix denotes a factor of 10^1, so 1 decaohm equals 10^1 ohms. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decaohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decaohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decaohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decaohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decaohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decaohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decaohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decaohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u179",
      "name": "ohm",
      "shortName": "ohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-24",
        "u170": "(v)=>v*1e-21",
        "u171": "(v)=>v*1e-18",
        "u172": "(v)=>v*1e-15",
        "u173": "(v)=>v*1e-12",
        "u174": "(v)=>v*1e-09",
        "u175": "(v)=>v*1e-06",
        "u176": "(v)=>v*0.001",
        "u177": "(v)=>v*0.01",
        "u178": "(v)=>v*0.1",
        "u180": "(v)=>v*10",
        "u181": "(v)=>v*100",
        "u182": "(v)=>v*1000",
        "u183": "(v)=>v*1000000",
        "u184": "(v)=>v*1000000000",
        "u185": "(v)=>v*1000000000000",
        "u186": "(v)=>v*1e+15",
        "u187": "(v)=>v*1e+18",
        "u188": "(v)=>v*1e+21",
        "u189": "(v)=>v*1e+24"
      },
      "description": "The ohm (Ω) is the SI derived unit of electrical resistance. Ohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of ohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent ohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, ohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when ohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding ohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed ohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of ohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u180",
      "name": "deciohm",
      "shortName": "dohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-25",
        "u170": "(v)=>v*1e-22",
        "u171": "(v)=>v*1e-19",
        "u172": "(v)=>v*1e-16",
        "u173": "(v)=>v*1e-13",
        "u174": "(v)=>v*1e-10",
        "u175": "(v)=>v*1e-07",
        "u176": "(v)=>v*0.0001",
        "u177": "(v)=>v*0.001",
        "u178": "(v)=>v*0.01",
        "u179": "(v)=>v*0.1",
        "u181": "(v)=>v*10",
        "u182": "(v)=>v*100",
        "u183": "(v)=>v*100000",
        "u184": "(v)=>v*100000000",
        "u185": "(v)=>v*100000000000",
        "u186": "(v)=>v*100000000000000",
        "u187": "(v)=>v*1e+17",
        "u188": "(v)=>v*1e+20",
        "u189": "(v)=>v*1e+23"
      },
      "description": "A deciohm (dohm) is an SI unit of resistance applying the deci‑ prefix (10^-1). One deciohm equals 0.1 ohms. The deci prefix denotes a factor of 10^-1, so 1 deciohm equals 10^-1 ohms. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Deciohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of deciohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent deciohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, deciohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when deciohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding deciohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed deciohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of deciohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u181",
      "name": "centiohm",
      "shortName": "cohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-26",
        "u170": "(v)=>v*1e-23",
        "u171": "(v)=>v*1e-20",
        "u172": "(v)=>v*1e-17",
        "u173": "(v)=>v*1e-14",
        "u174": "(v)=>v*1e-11",
        "u175": "(v)=>v*1e-08",
        "u176": "(v)=>v*1e-05",
        "u177": "(v)=>v*0.0001",
        "u178": "(v)=>v*0.001",
        "u179": "(v)=>v*0.01",
        "u180": "(v)=>v*0.1",
        "u182": "(v)=>v*10",
        "u183": "(v)=>v*10000",
        "u184": "(v)=>v*10000000",
        "u185": "(v)=>v*10000000000",
        "u186": "(v)=>v*10000000000000",
        "u187": "(v)=>v*1e+16",
        "u188": "(v)=>v*1e+19",
        "u189": "(v)=>v*1e+22"
      },
      "description": "A centiohm (cohm) is an SI unit of resistance applying the centi‑ prefix (10^-2). One centiohm equals 0.01 ohms. The centi prefix denotes a factor of 10^-2, so 1 centiohm equals 10^-2 ohms. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centiohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centiohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centiohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centiohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centiohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centiohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centiohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centiohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u182",
      "name": "milliohm",
      "shortName": "mohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-27",
        "u170": "(v)=>v*1e-24",
        "u171": "(v)=>v*1e-21",
        "u172": "(v)=>v*1e-18",
        "u173": "(v)=>v*1e-15",
        "u174": "(v)=>v*1e-12",
        "u175": "(v)=>v*1e-09",
        "u176": "(v)=>v*1e-06",
        "u177": "(v)=>v*1e-05",
        "u178": "(v)=>v*0.0001",
        "u179": "(v)=>v*0.001",
        "u180": "(v)=>v*0.01",
        "u181": "(v)=>v*0.1",
        "u183": "(v)=>v*1000",
        "u184": "(v)=>v*1000000",
        "u185": "(v)=>v*1000000000",
        "u186": "(v)=>v*1000000000000",
        "u187": "(v)=>v*1e+15",
        "u188": "(v)=>v*1e+18",
        "u189": "(v)=>v*1e+21"
      },
      "description": "A milliohm (mohm) is an SI unit of resistance applying the milli‑ prefix (10^-3). One milliohm equals 0.001 ohms. The milli prefix denotes a factor of 10^-3, so 1 milliohm equals 10^-3 ohms. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Milliohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of milliohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent milliohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, milliohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when milliohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding milliohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed milliohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of milliohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u183",
      "name": "microohm",
      "shortName": "μohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-30",
        "u170": "(v)=>v*1e-27",
        "u171": "(v)=>v*1e-24",
        "u172": "(v)=>v*1e-21",
        "u173": "(v)=>v*1e-18",
        "u174": "(v)=>v*1e-15",
        "u175": "(v)=>v*1e-12",
        "u176": "(v)=>v*1e-09",
        "u177": "(v)=>v*1e-08",
        "u178": "(v)=>v*1e-07",
        "u179": "(v)=>v*1e-06",
        "u180": "(v)=>v*1e-05",
        "u181": "(v)=>v*0.0001",
        "u182": "(v)=>v*0.001",
        "u184": "(v)=>v*1000",
        "u185": "(v)=>v*1000000",
        "u186": "(v)=>v*1000000000",
        "u187": "(v)=>v*1000000000000",
        "u188": "(v)=>v*1e+15",
        "u189": "(v)=>v*1e+18"
      },
      "description": "A microohm (μohm) is an SI unit of resistance applying the micro‑ prefix (10^-6). One microohm equals 1e-06 ohms. The micro prefix denotes a factor of 10^-6, so 1 microohm equals 10^-6 ohms. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u184",
      "name": "nanoohm",
      "shortName": "nohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-33",
        "u170": "(v)=>v*1e-30",
        "u171": "(v)=>v*1e-27",
        "u172": "(v)=>v*1e-24",
        "u173": "(v)=>v*1e-21",
        "u174": "(v)=>v*1e-18",
        "u175": "(v)=>v*1e-15",
        "u176": "(v)=>v*1e-12",
        "u177": "(v)=>v*1e-11",
        "u178": "(v)=>v*1e-10",
        "u179": "(v)=>v*1e-09",
        "u180": "(v)=>v*1e-08",
        "u181": "(v)=>v*1e-07",
        "u182": "(v)=>v*1e-06",
        "u183": "(v)=>v*0.001",
        "u185": "(v)=>v*1000",
        "u186": "(v)=>v*1000000",
        "u187": "(v)=>v*1000000000",
        "u188": "(v)=>v*1000000000000",
        "u189": "(v)=>v*1e+15"
      },
      "description": "A nanoohm (nohm) is an SI unit of resistance applying the nano‑ prefix (10^-9). One nanoohm equals 1e-09 ohms. The nano prefix denotes a factor of 10^-9, so 1 nanoohm equals 10^-9 ohms. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanoohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanoohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanoohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanoohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanoohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanoohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanoohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanoohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u185",
      "name": "picoohm",
      "shortName": "pohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-36",
        "u170": "(v)=>v*1e-33",
        "u171": "(v)=>v*1e-30",
        "u172": "(v)=>v*1e-27",
        "u173": "(v)=>v*1e-24",
        "u174": "(v)=>v*1e-21",
        "u175": "(v)=>v*1e-18",
        "u176": "(v)=>v*1e-15",
        "u177": "(v)=>v*1e-14",
        "u178": "(v)=>v*1e-13",
        "u179": "(v)=>v*1e-12",
        "u180": "(v)=>v*1e-11",
        "u181": "(v)=>v*1e-10",
        "u182": "(v)=>v*1e-09",
        "u183": "(v)=>v*1e-06",
        "u184": "(v)=>v*0.001",
        "u186": "(v)=>v*1000",
        "u187": "(v)=>v*1000000",
        "u188": "(v)=>v*1000000000",
        "u189": "(v)=>v*1000000000000"
      },
      "description": "A picoohm (pohm) is an SI unit of resistance applying the pico‑ prefix (10^-12). One picoohm equals 1e-12 ohms. The pico prefix denotes a factor of 10^-12, so 1 picoohm equals 10^-12 ohms. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picoohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picoohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picoohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picoohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picoohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picoohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picoohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picoohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u186",
      "name": "femtoohm",
      "shortName": "fohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-39",
        "u170": "(v)=>v*1e-36",
        "u171": "(v)=>v*1e-33",
        "u172": "(v)=>v*1e-30",
        "u173": "(v)=>v*1e-27",
        "u174": "(v)=>v*1e-24",
        "u175": "(v)=>v*1e-21",
        "u176": "(v)=>v*1e-18",
        "u177": "(v)=>v*1e-17",
        "u178": "(v)=>v*1e-16",
        "u179": "(v)=>v*1e-15",
        "u180": "(v)=>v*1e-14",
        "u181": "(v)=>v*1e-13",
        "u182": "(v)=>v*1e-12",
        "u183": "(v)=>v*1e-09",
        "u184": "(v)=>v*1e-06",
        "u185": "(v)=>v*0.001",
        "u187": "(v)=>v*1000",
        "u188": "(v)=>v*1000000",
        "u189": "(v)=>v*1000000000"
      },
      "description": "A femtoohm (fohm) is an SI unit of resistance applying the femto‑ prefix (10^-15). One femtoohm equals 1e-15 ohms. The femto prefix denotes a factor of 10^-15, so 1 femtoohm equals 10^-15 ohms. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtoohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtoohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtoohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtoohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtoohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtoohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtoohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtoohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u187",
      "name": "attoohm",
      "shortName": "aohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-42",
        "u170": "(v)=>v*1e-39",
        "u171": "(v)=>v*1e-36",
        "u172": "(v)=>v*1e-33",
        "u173": "(v)=>v*1e-30",
        "u174": "(v)=>v*1e-27",
        "u175": "(v)=>v*1e-24",
        "u176": "(v)=>v*1e-21",
        "u177": "(v)=>v*1e-20",
        "u178": "(v)=>v*1e-19",
        "u179": "(v)=>v*1e-18",
        "u180": "(v)=>v*1e-17",
        "u181": "(v)=>v*1e-16",
        "u182": "(v)=>v*1e-15",
        "u183": "(v)=>v*1e-12",
        "u184": "(v)=>v*1e-09",
        "u185": "(v)=>v*1e-06",
        "u186": "(v)=>v*0.001",
        "u188": "(v)=>v*1000",
        "u189": "(v)=>v*1000000"
      },
      "description": "A attoohm (aohm) is an SI unit of resistance applying the atto‑ prefix (10^-18). One attoohm equals 1e-18 ohms. The atto prefix denotes a factor of 10^-18, so 1 attoohm equals 10^-18 ohms. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attoohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attoohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attoohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attoohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attoohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attoohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attoohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attoohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u188",
      "name": "zeptoohm",
      "shortName": "zohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-45",
        "u170": "(v)=>v*1e-42",
        "u171": "(v)=>v*1e-39",
        "u172": "(v)=>v*1e-36",
        "u173": "(v)=>v*1e-33",
        "u174": "(v)=>v*1e-30",
        "u175": "(v)=>v*1e-27",
        "u176": "(v)=>v*1e-24",
        "u177": "(v)=>v*1e-23",
        "u178": "(v)=>v*1e-22",
        "u179": "(v)=>v*1e-21",
        "u180": "(v)=>v*1e-20",
        "u181": "(v)=>v*1e-19",
        "u182": "(v)=>v*1e-18",
        "u183": "(v)=>v*1e-15",
        "u184": "(v)=>v*1e-12",
        "u185": "(v)=>v*1e-09",
        "u186": "(v)=>v*1e-06",
        "u187": "(v)=>v*0.001",
        "u189": "(v)=>v*1000"
      },
      "description": "A zeptoohm (zohm) is an SI unit of resistance applying the zepto‑ prefix (10^-21). One zeptoohm equals 1e-21 ohms. The zepto prefix denotes a factor of 10^-21, so 1 zeptoohm equals 10^-21 ohms. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptoohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptoohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptoohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptoohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptoohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptoohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptoohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptoohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u189",
      "name": "yoctoohm",
      "shortName": "yohm",
      "categoryId": "c22",
      "conversions": {
        "u169": "(v)=>v*1e-48",
        "u170": "(v)=>v*1e-45",
        "u171": "(v)=>v*1e-42",
        "u172": "(v)=>v*1e-39",
        "u173": "(v)=>v*1e-36",
        "u174": "(v)=>v*1e-33",
        "u175": "(v)=>v*1e-30",
        "u176": "(v)=>v*1e-27",
        "u177": "(v)=>v*1e-26",
        "u178": "(v)=>v*1e-25",
        "u179": "(v)=>v*1e-24",
        "u180": "(v)=>v*1e-23",
        "u181": "(v)=>v*1e-22",
        "u182": "(v)=>v*1e-21",
        "u183": "(v)=>v*1e-18",
        "u184": "(v)=>v*1e-15",
        "u185": "(v)=>v*1e-12",
        "u186": "(v)=>v*1e-09",
        "u187": "(v)=>v*1e-06",
        "u188": "(v)=>v*0.001"
      },
      "description": "A yoctoohm (yohm) is an SI unit of resistance applying the yocto‑ prefix (10^-24). One yoctoohm equals 1e-24 ohms. The yocto prefix denotes a factor of 10^-24, so 1 yoctoohm equals 10^-24 ohms. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctoohm belongs to the broader physical quantity of resistance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctoohm often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctoohm as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctoohm is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctoohm values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctoohm has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctoohm metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctoohm fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u190",
      "name": "yottafarad",
      "shortName": "YF",
      "categoryId": "c3",
      "conversions": {
        "u191": "(v)=>v*1000",
        "u192": "(v)=>v*1000000",
        "u193": "(v)=>v*1000000000",
        "u194": "(v)=>v*1000000000000",
        "u195": "(v)=>v*1e+15",
        "u196": "(v)=>v*1e+18",
        "u197": "(v)=>v*1e+21",
        "u198": "(v)=>v*1e+22",
        "u199": "(v)=>v*1e+23",
        "u200": "(v)=>v*1e+24",
        "u201": "(v)=>v*1e+25",
        "u202": "(v)=>v*1e+26",
        "u203": "(v)=>v*1e+27",
        "u204": "(v)=>v*1e+30",
        "u205": "(v)=>v*1e+33",
        "u206": "(v)=>v*1e+36",
        "u207": "(v)=>v*1e+39",
        "u208": "(v)=>v*1e+42",
        "u209": "(v)=>v*1e+45",
        "u210": "(v)=>v*1e+48"
      },
      "description": "A yottafarad (YF) is an SI unit of capacitance applying the yotta‑ prefix (10^24). One yottafarad equals 1e+24 farads. The yotta prefix denotes a factor of 10^24, so 1 yottafarad equals 10^24 farads. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottafarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottafarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottafarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottafarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottafarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottafarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottafarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottafarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u191",
      "name": "zettafarad",
      "shortName": "ZF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*0.001",
        "u192": "(v)=>v*1000",
        "u193": "(v)=>v*1000000",
        "u194": "(v)=>v*1000000000",
        "u195": "(v)=>v*1000000000000",
        "u196": "(v)=>v*1e+15",
        "u197": "(v)=>v*1e+18",
        "u198": "(v)=>v*1e+19",
        "u199": "(v)=>v*1e+20",
        "u200": "(v)=>v*1e+21",
        "u201": "(v)=>v*1e+22",
        "u202": "(v)=>v*1e+23",
        "u203": "(v)=>v*1e+24",
        "u204": "(v)=>v*1e+27",
        "u205": "(v)=>v*1e+30",
        "u206": "(v)=>v*1e+33",
        "u207": "(v)=>v*1e+36",
        "u208": "(v)=>v*1e+39",
        "u209": "(v)=>v*1e+42",
        "u210": "(v)=>v*1e+45"
      },
      "description": "A zettafarad (ZF) is an SI unit of capacitance applying the zetta‑ prefix (10^21). One zettafarad equals 1e+21 farads. The zetta prefix denotes a factor of 10^21, so 1 zettafarad equals 10^21 farads. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettafarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettafarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettafarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettafarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettafarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettafarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettafarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettafarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u192",
      "name": "exafarad",
      "shortName": "EF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-06",
        "u191": "(v)=>v*0.001",
        "u193": "(v)=>v*1000",
        "u194": "(v)=>v*1000000",
        "u195": "(v)=>v*1000000000",
        "u196": "(v)=>v*1000000000000",
        "u197": "(v)=>v*1e+15",
        "u198": "(v)=>v*1e+16",
        "u199": "(v)=>v*1e+17",
        "u200": "(v)=>v*1e+18",
        "u201": "(v)=>v*1e+19",
        "u202": "(v)=>v*1e+20",
        "u203": "(v)=>v*1e+21",
        "u204": "(v)=>v*1e+24",
        "u205": "(v)=>v*1e+27",
        "u206": "(v)=>v*1e+30",
        "u207": "(v)=>v*1e+33",
        "u208": "(v)=>v*1e+36",
        "u209": "(v)=>v*1e+39",
        "u210": "(v)=>v*1e+42"
      },
      "description": "A exafarad (EF) is an SI unit of capacitance applying the exa‑ prefix (10^18). One exafarad equals 1e+18 farads. The exa prefix denotes a factor of 10^18, so 1 exafarad equals 10^18 farads. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exafarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exafarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exafarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exafarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exafarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exafarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exafarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exafarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u193",
      "name": "petafarad",
      "shortName": "PF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-09",
        "u191": "(v)=>v*1e-06",
        "u192": "(v)=>v*0.001",
        "u194": "(v)=>v*1000",
        "u195": "(v)=>v*1000000",
        "u196": "(v)=>v*1000000000",
        "u197": "(v)=>v*1000000000000",
        "u198": "(v)=>v*10000000000000",
        "u199": "(v)=>v*100000000000000",
        "u200": "(v)=>v*1e+15",
        "u201": "(v)=>v*1e+16",
        "u202": "(v)=>v*1e+17",
        "u203": "(v)=>v*1e+18",
        "u204": "(v)=>v*1e+21",
        "u205": "(v)=>v*1e+24",
        "u206": "(v)=>v*1e+27",
        "u207": "(v)=>v*1e+30",
        "u208": "(v)=>v*1e+33",
        "u209": "(v)=>v*1e+36",
        "u210": "(v)=>v*1e+39"
      },
      "description": "A petafarad (PF) is an SI unit of capacitance applying the peta‑ prefix (10^15). One petafarad equals 1e+15 farads. The peta prefix denotes a factor of 10^15, so 1 petafarad equals 10^15 farads. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petafarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petafarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petafarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petafarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petafarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petafarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petafarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petafarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u194",
      "name": "terafarad",
      "shortName": "TF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-12",
        "u191": "(v)=>v*1e-09",
        "u192": "(v)=>v*1e-06",
        "u193": "(v)=>v*0.001",
        "u195": "(v)=>v*1000",
        "u196": "(v)=>v*1000000",
        "u197": "(v)=>v*1000000000",
        "u198": "(v)=>v*10000000000",
        "u199": "(v)=>v*100000000000",
        "u200": "(v)=>v*1000000000000",
        "u201": "(v)=>v*10000000000000",
        "u202": "(v)=>v*100000000000000",
        "u203": "(v)=>v*1e+15",
        "u204": "(v)=>v*1e+18",
        "u205": "(v)=>v*1e+21",
        "u206": "(v)=>v*1e+24",
        "u207": "(v)=>v*1e+27",
        "u208": "(v)=>v*1e+30",
        "u209": "(v)=>v*1e+33",
        "u210": "(v)=>v*1e+36"
      },
      "description": "A terafarad (TF) is an SI unit of capacitance applying the tera‑ prefix (10^12). One terafarad equals 1e+12 farads. The tera prefix denotes a factor of 10^12, so 1 terafarad equals 10^12 farads. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Terafarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terafarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terafarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terafarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terafarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terafarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terafarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terafarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u195",
      "name": "gigafarad",
      "shortName": "GF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-15",
        "u191": "(v)=>v*1e-12",
        "u192": "(v)=>v*1e-09",
        "u193": "(v)=>v*1e-06",
        "u194": "(v)=>v*0.001",
        "u196": "(v)=>v*1000",
        "u197": "(v)=>v*1000000",
        "u198": "(v)=>v*10000000",
        "u199": "(v)=>v*100000000",
        "u200": "(v)=>v*1000000000",
        "u201": "(v)=>v*10000000000",
        "u202": "(v)=>v*100000000000",
        "u203": "(v)=>v*1000000000000",
        "u204": "(v)=>v*1e+15",
        "u205": "(v)=>v*1e+18",
        "u206": "(v)=>v*1e+21",
        "u207": "(v)=>v*1e+24",
        "u208": "(v)=>v*1e+27",
        "u209": "(v)=>v*1e+30",
        "u210": "(v)=>v*1e+33"
      },
      "description": "A gigafarad (GF) is an SI unit of capacitance applying the giga‑ prefix (10^9). One gigafarad equals 1000000000 farads. The giga prefix denotes a factor of 10^9, so 1 gigafarad equals 10^9 farads. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigafarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigafarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigafarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigafarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigafarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigafarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigafarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigafarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u196",
      "name": "megafarad",
      "shortName": "MF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-18",
        "u191": "(v)=>v*1e-15",
        "u192": "(v)=>v*1e-12",
        "u193": "(v)=>v*1e-09",
        "u194": "(v)=>v*1e-06",
        "u195": "(v)=>v*0.001",
        "u197": "(v)=>v*1000",
        "u198": "(v)=>v*10000",
        "u199": "(v)=>v*100000",
        "u200": "(v)=>v*1000000",
        "u201": "(v)=>v*10000000",
        "u202": "(v)=>v*100000000",
        "u203": "(v)=>v*1000000000",
        "u204": "(v)=>v*1000000000000",
        "u205": "(v)=>v*1e+15",
        "u206": "(v)=>v*1e+18",
        "u207": "(v)=>v*1e+21",
        "u208": "(v)=>v*1e+24",
        "u209": "(v)=>v*1e+27",
        "u210": "(v)=>v*1e+30"
      },
      "description": "A megafarad (MF) is an SI unit of capacitance applying the mega‑ prefix (10^6). One megafarad equals 1000000 farads. The mega prefix denotes a factor of 10^6, so 1 megafarad equals 10^6 farads. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megafarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megafarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megafarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megafarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megafarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megafarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megafarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megafarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u197",
      "name": "kilofarad",
      "shortName": "kF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-21",
        "u191": "(v)=>v*1e-18",
        "u192": "(v)=>v*1e-15",
        "u193": "(v)=>v*1e-12",
        "u194": "(v)=>v*1e-09",
        "u195": "(v)=>v*1e-06",
        "u196": "(v)=>v*0.001",
        "u198": "(v)=>v*10",
        "u199": "(v)=>v*100",
        "u200": "(v)=>v*1000",
        "u201": "(v)=>v*10000",
        "u202": "(v)=>v*100000",
        "u203": "(v)=>v*1000000",
        "u204": "(v)=>v*1000000000",
        "u205": "(v)=>v*1000000000000",
        "u206": "(v)=>v*1e+15",
        "u207": "(v)=>v*1e+18",
        "u208": "(v)=>v*1e+21",
        "u209": "(v)=>v*1e+24",
        "u210": "(v)=>v*1e+27"
      },
      "description": "A kilofarad (kF) is an SI unit of capacitance applying the kilo‑ prefix (10^3). One kilofarad equals 1000 farads. The kilo prefix denotes a factor of 10^3, so 1 kilofarad equals 10^3 farads. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilofarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilofarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilofarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilofarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilofarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilofarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilofarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilofarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u198",
      "name": "hectofarad",
      "shortName": "hF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-22",
        "u191": "(v)=>v*1e-19",
        "u192": "(v)=>v*1e-16",
        "u193": "(v)=>v*1e-13",
        "u194": "(v)=>v*1e-10",
        "u195": "(v)=>v*1e-07",
        "u196": "(v)=>v*0.0001",
        "u197": "(v)=>v*0.1",
        "u199": "(v)=>v*10",
        "u200": "(v)=>v*100",
        "u201": "(v)=>v*1000",
        "u202": "(v)=>v*10000",
        "u203": "(v)=>v*100000",
        "u204": "(v)=>v*100000000",
        "u205": "(v)=>v*100000000000",
        "u206": "(v)=>v*100000000000000",
        "u207": "(v)=>v*1e+17",
        "u208": "(v)=>v*1e+20",
        "u209": "(v)=>v*1e+23",
        "u210": "(v)=>v*1e+26"
      },
      "description": "A hectofarad (hF) is an SI unit of capacitance applying the hecto‑ prefix (10^2). One hectofarad equals 100 farads. The hecto prefix denotes a factor of 10^2, so 1 hectofarad equals 10^2 farads. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectofarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectofarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectofarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectofarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectofarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectofarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectofarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectofarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u199",
      "name": "decafarad",
      "shortName": "daF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-23",
        "u191": "(v)=>v*1e-20",
        "u192": "(v)=>v*1e-17",
        "u193": "(v)=>v*1e-14",
        "u194": "(v)=>v*1e-11",
        "u195": "(v)=>v*1e-08",
        "u196": "(v)=>v*1e-05",
        "u197": "(v)=>v*0.01",
        "u198": "(v)=>v*0.1",
        "u200": "(v)=>v*10",
        "u201": "(v)=>v*100",
        "u202": "(v)=>v*1000",
        "u203": "(v)=>v*10000",
        "u204": "(v)=>v*10000000",
        "u205": "(v)=>v*10000000000",
        "u206": "(v)=>v*10000000000000",
        "u207": "(v)=>v*1e+16",
        "u208": "(v)=>v*1e+19",
        "u209": "(v)=>v*1e+22",
        "u210": "(v)=>v*1e+25"
      },
      "description": "A decafarad (daF) is an SI unit of capacitance applying the deca‑ prefix (10^1). One decafarad equals 10 farads. The deca prefix denotes a factor of 10^1, so 1 decafarad equals 10^1 farads. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decafarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decafarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decafarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decafarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decafarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decafarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decafarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decafarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u200",
      "name": "farad",
      "shortName": "F",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-24",
        "u191": "(v)=>v*1e-21",
        "u192": "(v)=>v*1e-18",
        "u193": "(v)=>v*1e-15",
        "u194": "(v)=>v*1e-12",
        "u195": "(v)=>v*1e-09",
        "u196": "(v)=>v*1e-06",
        "u197": "(v)=>v*0.001",
        "u198": "(v)=>v*0.01",
        "u199": "(v)=>v*0.1",
        "u201": "(v)=>v*10",
        "u202": "(v)=>v*100",
        "u203": "(v)=>v*1000",
        "u204": "(v)=>v*1000000",
        "u205": "(v)=>v*1000000000",
        "u206": "(v)=>v*1000000000000",
        "u207": "(v)=>v*1e+15",
        "u208": "(v)=>v*1e+18",
        "u209": "(v)=>v*1e+21",
        "u210": "(v)=>v*1e+24"
      },
      "description": "The farad (F) is the SI derived unit of capacitance; one farad is the capacitance that stores one coulomb of charge when one volt is applied. Farad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of farad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent farad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, farad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when farad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding farad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed farad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of farad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u201",
      "name": "decifarad",
      "shortName": "dF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-25",
        "u191": "(v)=>v*1e-22",
        "u192": "(v)=>v*1e-19",
        "u193": "(v)=>v*1e-16",
        "u194": "(v)=>v*1e-13",
        "u195": "(v)=>v*1e-10",
        "u196": "(v)=>v*1e-07",
        "u197": "(v)=>v*0.0001",
        "u198": "(v)=>v*0.001",
        "u199": "(v)=>v*0.01",
        "u200": "(v)=>v*0.1",
        "u202": "(v)=>v*10",
        "u203": "(v)=>v*100",
        "u204": "(v)=>v*100000",
        "u205": "(v)=>v*100000000",
        "u206": "(v)=>v*100000000000",
        "u207": "(v)=>v*100000000000000",
        "u208": "(v)=>v*1e+17",
        "u209": "(v)=>v*1e+20",
        "u210": "(v)=>v*1e+23"
      },
      "description": "A decifarad (dF) is an SI unit of capacitance applying the deci‑ prefix (10^-1). One decifarad equals 0.1 farads. The deci prefix denotes a factor of 10^-1, so 1 decifarad equals 10^-1 farads. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decifarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decifarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decifarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decifarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decifarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decifarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decifarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decifarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u202",
      "name": "centifarad",
      "shortName": "cF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-26",
        "u191": "(v)=>v*1e-23",
        "u192": "(v)=>v*1e-20",
        "u193": "(v)=>v*1e-17",
        "u194": "(v)=>v*1e-14",
        "u195": "(v)=>v*1e-11",
        "u196": "(v)=>v*1e-08",
        "u197": "(v)=>v*1e-05",
        "u198": "(v)=>v*0.0001",
        "u199": "(v)=>v*0.001",
        "u200": "(v)=>v*0.01",
        "u201": "(v)=>v*0.1",
        "u203": "(v)=>v*10",
        "u204": "(v)=>v*10000",
        "u205": "(v)=>v*10000000",
        "u206": "(v)=>v*10000000000",
        "u207": "(v)=>v*10000000000000",
        "u208": "(v)=>v*1e+16",
        "u209": "(v)=>v*1e+19",
        "u210": "(v)=>v*1e+22"
      },
      "description": "A centifarad (cF) is an SI unit of capacitance applying the centi‑ prefix (10^-2). One centifarad equals 0.01 farads. The centi prefix denotes a factor of 10^-2, so 1 centifarad equals 10^-2 farads. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centifarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centifarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centifarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centifarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centifarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centifarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centifarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centifarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u203",
      "name": "millifarad",
      "shortName": "mF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-27",
        "u191": "(v)=>v*1e-24",
        "u192": "(v)=>v*1e-21",
        "u193": "(v)=>v*1e-18",
        "u194": "(v)=>v*1e-15",
        "u195": "(v)=>v*1e-12",
        "u196": "(v)=>v*1e-09",
        "u197": "(v)=>v*1e-06",
        "u198": "(v)=>v*1e-05",
        "u199": "(v)=>v*0.0001",
        "u200": "(v)=>v*0.001",
        "u201": "(v)=>v*0.01",
        "u202": "(v)=>v*0.1",
        "u204": "(v)=>v*1000",
        "u205": "(v)=>v*1000000",
        "u206": "(v)=>v*1000000000",
        "u207": "(v)=>v*1000000000000",
        "u208": "(v)=>v*1e+15",
        "u209": "(v)=>v*1e+18",
        "u210": "(v)=>v*1e+21"
      },
      "description": "A millifarad (mF) is an SI unit of capacitance applying the milli‑ prefix (10^-3). One millifarad equals 0.001 farads. The milli prefix denotes a factor of 10^-3, so 1 millifarad equals 10^-3 farads. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millifarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millifarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millifarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millifarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millifarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millifarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millifarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millifarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u204",
      "name": "microfarad",
      "shortName": "μF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-30",
        "u191": "(v)=>v*1e-27",
        "u192": "(v)=>v*1e-24",
        "u193": "(v)=>v*1e-21",
        "u194": "(v)=>v*1e-18",
        "u195": "(v)=>v*1e-15",
        "u196": "(v)=>v*1e-12",
        "u197": "(v)=>v*1e-09",
        "u198": "(v)=>v*1e-08",
        "u199": "(v)=>v*1e-07",
        "u200": "(v)=>v*1e-06",
        "u201": "(v)=>v*1e-05",
        "u202": "(v)=>v*0.0001",
        "u203": "(v)=>v*0.001",
        "u205": "(v)=>v*1000",
        "u206": "(v)=>v*1000000",
        "u207": "(v)=>v*1000000000",
        "u208": "(v)=>v*1000000000000",
        "u209": "(v)=>v*1e+15",
        "u210": "(v)=>v*1e+18"
      },
      "description": "A microfarad (μF) is an SI unit of capacitance applying the micro‑ prefix (10^-6). One microfarad equals 1e-06 farads. The micro prefix denotes a factor of 10^-6, so 1 microfarad equals 10^-6 farads. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microfarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microfarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microfarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microfarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microfarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microfarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microfarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microfarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u205",
      "name": "nanofarad",
      "shortName": "nF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-33",
        "u191": "(v)=>v*1e-30",
        "u192": "(v)=>v*1e-27",
        "u193": "(v)=>v*1e-24",
        "u194": "(v)=>v*1e-21",
        "u195": "(v)=>v*1e-18",
        "u196": "(v)=>v*1e-15",
        "u197": "(v)=>v*1e-12",
        "u198": "(v)=>v*1e-11",
        "u199": "(v)=>v*1e-10",
        "u200": "(v)=>v*1e-09",
        "u201": "(v)=>v*1e-08",
        "u202": "(v)=>v*1e-07",
        "u203": "(v)=>v*1e-06",
        "u204": "(v)=>v*0.001",
        "u206": "(v)=>v*1000",
        "u207": "(v)=>v*1000000",
        "u208": "(v)=>v*1000000000",
        "u209": "(v)=>v*1000000000000",
        "u210": "(v)=>v*1e+15"
      },
      "description": "A nanofarad (nF) is an SI unit of capacitance applying the nano‑ prefix (10^-9). One nanofarad equals 1e-09 farads. The nano prefix denotes a factor of 10^-9, so 1 nanofarad equals 10^-9 farads. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanofarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanofarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanofarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanofarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanofarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanofarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanofarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanofarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u206",
      "name": "picofarad",
      "shortName": "pF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-36",
        "u191": "(v)=>v*1e-33",
        "u192": "(v)=>v*1e-30",
        "u193": "(v)=>v*1e-27",
        "u194": "(v)=>v*1e-24",
        "u195": "(v)=>v*1e-21",
        "u196": "(v)=>v*1e-18",
        "u197": "(v)=>v*1e-15",
        "u198": "(v)=>v*1e-14",
        "u199": "(v)=>v*1e-13",
        "u200": "(v)=>v*1e-12",
        "u201": "(v)=>v*1e-11",
        "u202": "(v)=>v*1e-10",
        "u203": "(v)=>v*1e-09",
        "u204": "(v)=>v*1e-06",
        "u205": "(v)=>v*0.001",
        "u207": "(v)=>v*1000",
        "u208": "(v)=>v*1000000",
        "u209": "(v)=>v*1000000000",
        "u210": "(v)=>v*1000000000000"
      },
      "description": "A picofarad (pF) is an SI unit of capacitance applying the pico‑ prefix (10^-12). One picofarad equals 1e-12 farads. The pico prefix denotes a factor of 10^-12, so 1 picofarad equals 10^-12 farads. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picofarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picofarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picofarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picofarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picofarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picofarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picofarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picofarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u207",
      "name": "femtofarad",
      "shortName": "fF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-39",
        "u191": "(v)=>v*1e-36",
        "u192": "(v)=>v*1e-33",
        "u193": "(v)=>v*1e-30",
        "u194": "(v)=>v*1e-27",
        "u195": "(v)=>v*1e-24",
        "u196": "(v)=>v*1e-21",
        "u197": "(v)=>v*1e-18",
        "u198": "(v)=>v*1e-17",
        "u199": "(v)=>v*1e-16",
        "u200": "(v)=>v*1e-15",
        "u201": "(v)=>v*1e-14",
        "u202": "(v)=>v*1e-13",
        "u203": "(v)=>v*1e-12",
        "u204": "(v)=>v*1e-09",
        "u205": "(v)=>v*1e-06",
        "u206": "(v)=>v*0.001",
        "u208": "(v)=>v*1000",
        "u209": "(v)=>v*1000000",
        "u210": "(v)=>v*1000000000"
      },
      "description": "A femtofarad (fF) is an SI unit of capacitance applying the femto‑ prefix (10^-15). One femtofarad equals 1e-15 farads. The femto prefix denotes a factor of 10^-15, so 1 femtofarad equals 10^-15 farads. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtofarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtofarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtofarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtofarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtofarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtofarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtofarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtofarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u208",
      "name": "attofarad",
      "shortName": "aF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-42",
        "u191": "(v)=>v*1e-39",
        "u192": "(v)=>v*1e-36",
        "u193": "(v)=>v*1e-33",
        "u194": "(v)=>v*1e-30",
        "u195": "(v)=>v*1e-27",
        "u196": "(v)=>v*1e-24",
        "u197": "(v)=>v*1e-21",
        "u198": "(v)=>v*1e-20",
        "u199": "(v)=>v*1e-19",
        "u200": "(v)=>v*1e-18",
        "u201": "(v)=>v*1e-17",
        "u202": "(v)=>v*1e-16",
        "u203": "(v)=>v*1e-15",
        "u204": "(v)=>v*1e-12",
        "u205": "(v)=>v*1e-09",
        "u206": "(v)=>v*1e-06",
        "u207": "(v)=>v*0.001",
        "u209": "(v)=>v*1000",
        "u210": "(v)=>v*1000000"
      },
      "description": "A attofarad (aF) is an SI unit of capacitance applying the atto‑ prefix (10^-18). One attofarad equals 1e-18 farads. The atto prefix denotes a factor of 10^-18, so 1 attofarad equals 10^-18 farads. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attofarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attofarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attofarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attofarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attofarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attofarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attofarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attofarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u209",
      "name": "zeptofarad",
      "shortName": "zF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-45",
        "u191": "(v)=>v*1e-42",
        "u192": "(v)=>v*1e-39",
        "u193": "(v)=>v*1e-36",
        "u194": "(v)=>v*1e-33",
        "u195": "(v)=>v*1e-30",
        "u196": "(v)=>v*1e-27",
        "u197": "(v)=>v*1e-24",
        "u198": "(v)=>v*1e-23",
        "u199": "(v)=>v*1e-22",
        "u200": "(v)=>v*1e-21",
        "u201": "(v)=>v*1e-20",
        "u202": "(v)=>v*1e-19",
        "u203": "(v)=>v*1e-18",
        "u204": "(v)=>v*1e-15",
        "u205": "(v)=>v*1e-12",
        "u206": "(v)=>v*1e-09",
        "u207": "(v)=>v*1e-06",
        "u208": "(v)=>v*0.001",
        "u210": "(v)=>v*1000"
      },
      "description": "A zeptofarad (zF) is an SI unit of capacitance applying the zepto‑ prefix (10^-21). One zeptofarad equals 1e-21 farads. The zepto prefix denotes a factor of 10^-21, so 1 zeptofarad equals 10^-21 farads. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptofarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptofarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptofarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptofarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptofarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptofarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptofarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptofarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u210",
      "name": "yoctofarad",
      "shortName": "yF",
      "categoryId": "c3",
      "conversions": {
        "u190": "(v)=>v*1e-48",
        "u191": "(v)=>v*1e-45",
        "u192": "(v)=>v*1e-42",
        "u193": "(v)=>v*1e-39",
        "u194": "(v)=>v*1e-36",
        "u195": "(v)=>v*1e-33",
        "u196": "(v)=>v*1e-30",
        "u197": "(v)=>v*1e-27",
        "u198": "(v)=>v*1e-26",
        "u199": "(v)=>v*1e-25",
        "u200": "(v)=>v*1e-24",
        "u201": "(v)=>v*1e-23",
        "u202": "(v)=>v*1e-22",
        "u203": "(v)=>v*1e-21",
        "u204": "(v)=>v*1e-18",
        "u205": "(v)=>v*1e-15",
        "u206": "(v)=>v*1e-12",
        "u207": "(v)=>v*1e-09",
        "u208": "(v)=>v*1e-06",
        "u209": "(v)=>v*0.001"
      },
      "description": "A yoctofarad (yF) is an SI unit of capacitance applying the yocto‑ prefix (10^-24). One yoctofarad equals 1e-24 farads. The yocto prefix denotes a factor of 10^-24, so 1 yoctofarad equals 10^-24 farads. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctofarad belongs to the broader physical quantity of capacitance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctofarad often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctofarad as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctofarad is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctofarad values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctofarad has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctofarad metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctofarad fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u211",
      "name": "yottahertz",
      "shortName": "YHz",
      "categoryId": "c12",
      "conversions": {
        "u212": "(v)=>v*1000",
        "u213": "(v)=>v*1000000",
        "u214": "(v)=>v*1000000000",
        "u215": "(v)=>v*1000000000000",
        "u216": "(v)=>v*1e+15",
        "u217": "(v)=>v*1e+18",
        "u218": "(v)=>v*1e+21",
        "u219": "(v)=>v*1e+22",
        "u220": "(v)=>v*1e+23",
        "u221": "(v)=>v*1e+24",
        "u222": "(v)=>v*1e+25",
        "u223": "(v)=>v*1e+26",
        "u224": "(v)=>v*1e+27",
        "u225": "(v)=>v*1e+30",
        "u226": "(v)=>v*1e+33",
        "u227": "(v)=>v*1e+36",
        "u228": "(v)=>v*1e+39",
        "u229": "(v)=>v*1e+42",
        "u230": "(v)=>v*1e+45",
        "u231": "(v)=>v*1e+48",
        "u524": "(v)=>v*6e+25"
      },
      "description": "A yottahertz (YHz) is an SI unit of frequency applying the yotta‑ prefix (10^24). One yottahertz equals 1e+24 hertzs. The yotta prefix denotes a factor of 10^24, so 1 yottahertz equals 10^24 hertzs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottahertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottahertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottahertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottahertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottahertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottahertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottahertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottahertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u212",
      "name": "zettahertz",
      "shortName": "ZHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*0.001",
        "u213": "(v)=>v*1000",
        "u214": "(v)=>v*1000000",
        "u215": "(v)=>v*1000000000",
        "u216": "(v)=>v*1000000000000",
        "u217": "(v)=>v*1e+15",
        "u218": "(v)=>v*1e+18",
        "u219": "(v)=>v*1e+19",
        "u220": "(v)=>v*1e+20",
        "u221": "(v)=>v*1e+21",
        "u222": "(v)=>v*1e+22",
        "u223": "(v)=>v*1e+23",
        "u224": "(v)=>v*1e+24",
        "u225": "(v)=>v*1e+27",
        "u226": "(v)=>v*1e+30",
        "u227": "(v)=>v*1e+33",
        "u228": "(v)=>v*1e+36",
        "u229": "(v)=>v*1e+39",
        "u230": "(v)=>v*1e+42",
        "u231": "(v)=>v*1e+45",
        "u524": "(v)=>v*6e+22"
      },
      "description": "A zettahertz (ZHz) is an SI unit of frequency applying the zetta‑ prefix (10^21). One zettahertz equals 1e+21 hertzs. The zetta prefix denotes a factor of 10^21, so 1 zettahertz equals 10^21 hertzs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettahertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettahertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettahertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettahertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettahertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettahertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettahertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettahertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u213",
      "name": "exahertz",
      "shortName": "EHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-06",
        "u212": "(v)=>v*0.001",
        "u214": "(v)=>v*1000",
        "u215": "(v)=>v*1000000",
        "u216": "(v)=>v*1000000000",
        "u217": "(v)=>v*1000000000000",
        "u218": "(v)=>v*1e+15",
        "u219": "(v)=>v*1e+16",
        "u220": "(v)=>v*1e+17",
        "u221": "(v)=>v*1e+18",
        "u222": "(v)=>v*1e+19",
        "u223": "(v)=>v*1e+20",
        "u224": "(v)=>v*1e+21",
        "u225": "(v)=>v*1e+24",
        "u226": "(v)=>v*1e+27",
        "u227": "(v)=>v*1e+30",
        "u228": "(v)=>v*1e+33",
        "u229": "(v)=>v*1e+36",
        "u230": "(v)=>v*1e+39",
        "u231": "(v)=>v*1e+42",
        "u524": "(v)=>v*6e+19"
      },
      "description": "A exahertz (EHz) is an SI unit of frequency applying the exa‑ prefix (10^18). One exahertz equals 1e+18 hertzs. The exa prefix denotes a factor of 10^18, so 1 exahertz equals 10^18 hertzs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exahertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exahertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exahertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exahertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exahertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exahertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exahertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exahertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u214",
      "name": "petahertz",
      "shortName": "PHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-09",
        "u212": "(v)=>v*1e-06",
        "u213": "(v)=>v*0.001",
        "u215": "(v)=>v*1000",
        "u216": "(v)=>v*1000000",
        "u217": "(v)=>v*1000000000",
        "u218": "(v)=>v*1000000000000",
        "u219": "(v)=>v*10000000000000",
        "u220": "(v)=>v*100000000000000",
        "u221": "(v)=>v*1e+15",
        "u222": "(v)=>v*1e+16",
        "u223": "(v)=>v*1e+17",
        "u224": "(v)=>v*1e+18",
        "u225": "(v)=>v*1e+21",
        "u226": "(v)=>v*1e+24",
        "u227": "(v)=>v*1e+27",
        "u228": "(v)=>v*1e+30",
        "u229": "(v)=>v*1e+33",
        "u230": "(v)=>v*1e+36",
        "u231": "(v)=>v*1e+39",
        "u524": "(v)=>v*6e+16"
      },
      "description": "A petahertz (PHz) is an SI unit of frequency applying the peta‑ prefix (10^15). One petahertz equals 1e+15 hertzs. The peta prefix denotes a factor of 10^15, so 1 petahertz equals 10^15 hertzs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petahertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petahertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petahertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petahertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petahertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petahertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petahertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petahertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u215",
      "name": "terahertz",
      "shortName": "THz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-12",
        "u212": "(v)=>v*1e-09",
        "u213": "(v)=>v*1e-06",
        "u214": "(v)=>v*0.001",
        "u216": "(v)=>v*1000",
        "u217": "(v)=>v*1000000",
        "u218": "(v)=>v*1000000000",
        "u219": "(v)=>v*10000000000",
        "u220": "(v)=>v*100000000000",
        "u221": "(v)=>v*1000000000000",
        "u222": "(v)=>v*10000000000000",
        "u223": "(v)=>v*100000000000000",
        "u224": "(v)=>v*1e+15",
        "u225": "(v)=>v*1e+18",
        "u226": "(v)=>v*1e+21",
        "u227": "(v)=>v*1e+24",
        "u228": "(v)=>v*1e+27",
        "u229": "(v)=>v*1e+30",
        "u230": "(v)=>v*1e+33",
        "u231": "(v)=>v*1e+36",
        "u524": "(v)=>v*60000000000000"
      },
      "description": "A terahertz (THz) is an SI unit of frequency applying the tera‑ prefix (10^12). One terahertz equals 1e+12 hertzs. The tera prefix denotes a factor of 10^12, so 1 terahertz equals 10^12 hertzs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Terahertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terahertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terahertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terahertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terahertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terahertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terahertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terahertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u216",
      "name": "gigahertz",
      "shortName": "GHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-15",
        "u212": "(v)=>v*1e-12",
        "u213": "(v)=>v*1e-09",
        "u214": "(v)=>v*1e-06",
        "u215": "(v)=>v*0.001",
        "u217": "(v)=>v*1000",
        "u218": "(v)=>v*1000000",
        "u219": "(v)=>v*10000000",
        "u220": "(v)=>v*100000000",
        "u221": "(v)=>v*1000000000",
        "u222": "(v)=>v*10000000000",
        "u223": "(v)=>v*100000000000",
        "u224": "(v)=>v*1000000000000",
        "u225": "(v)=>v*1e+15",
        "u226": "(v)=>v*1e+18",
        "u227": "(v)=>v*1e+21",
        "u228": "(v)=>v*1e+24",
        "u229": "(v)=>v*1e+27",
        "u230": "(v)=>v*1e+30",
        "u231": "(v)=>v*1e+33",
        "u524": "(v)=>v*60000000000"
      },
      "description": "A gigahertz (GHz) is an SI unit of frequency applying the giga‑ prefix (10^9). One gigahertz equals 1000000000 hertzs. The giga prefix denotes a factor of 10^9, so 1 gigahertz equals 10^9 hertzs. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigahertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigahertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigahertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigahertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigahertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigahertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigahertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigahertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u217",
      "name": "megahertz",
      "shortName": "MHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-18",
        "u212": "(v)=>v*1e-15",
        "u213": "(v)=>v*1e-12",
        "u214": "(v)=>v*1e-09",
        "u215": "(v)=>v*1e-06",
        "u216": "(v)=>v*0.001",
        "u218": "(v)=>v*1000",
        "u219": "(v)=>v*10000",
        "u220": "(v)=>v*100000",
        "u221": "(v)=>v*1000000",
        "u222": "(v)=>v*10000000",
        "u223": "(v)=>v*100000000",
        "u224": "(v)=>v*1000000000",
        "u225": "(v)=>v*1000000000000",
        "u226": "(v)=>v*1e+15",
        "u227": "(v)=>v*1e+18",
        "u228": "(v)=>v*1e+21",
        "u229": "(v)=>v*1e+24",
        "u230": "(v)=>v*1e+27",
        "u231": "(v)=>v*1e+30",
        "u524": "(v)=>v*60000000"
      },
      "description": "A megahertz (MHz) is an SI unit of frequency applying the mega‑ prefix (10^6). One megahertz equals 1000000 hertzs. The mega prefix denotes a factor of 10^6, so 1 megahertz equals 10^6 hertzs. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megahertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megahertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megahertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megahertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megahertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megahertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megahertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megahertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u218",
      "name": "kilohertz",
      "shortName": "kHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-21",
        "u212": "(v)=>v*1e-18",
        "u213": "(v)=>v*1e-15",
        "u214": "(v)=>v*1e-12",
        "u215": "(v)=>v*1e-09",
        "u216": "(v)=>v*1e-06",
        "u217": "(v)=>v*0.001",
        "u219": "(v)=>v*10",
        "u220": "(v)=>v*100",
        "u221": "(v)=>v*1000",
        "u222": "(v)=>v*10000",
        "u223": "(v)=>v*100000",
        "u224": "(v)=>v*1000000",
        "u225": "(v)=>v*1000000000",
        "u226": "(v)=>v*1000000000000",
        "u227": "(v)=>v*1e+15",
        "u228": "(v)=>v*1e+18",
        "u229": "(v)=>v*1e+21",
        "u230": "(v)=>v*1e+24",
        "u231": "(v)=>v*1e+27",
        "u524": "(v)=>v*60000"
      },
      "description": "A kilohertz (kHz) is an SI unit of frequency applying the kilo‑ prefix (10^3). One kilohertz equals 1000 hertzs. The kilo prefix denotes a factor of 10^3, so 1 kilohertz equals 10^3 hertzs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilohertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilohertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilohertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilohertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilohertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilohertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilohertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilohertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u219",
      "name": "hectohertz",
      "shortName": "hHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-22",
        "u212": "(v)=>v*1e-19",
        "u213": "(v)=>v*1e-16",
        "u214": "(v)=>v*1e-13",
        "u215": "(v)=>v*1e-10",
        "u216": "(v)=>v*1e-07",
        "u217": "(v)=>v*0.0001",
        "u218": "(v)=>v*0.1",
        "u220": "(v)=>v*10",
        "u221": "(v)=>v*100",
        "u222": "(v)=>v*1000",
        "u223": "(v)=>v*10000",
        "u224": "(v)=>v*100000",
        "u225": "(v)=>v*100000000",
        "u226": "(v)=>v*100000000000",
        "u227": "(v)=>v*100000000000000",
        "u228": "(v)=>v*1e+17",
        "u229": "(v)=>v*1e+20",
        "u230": "(v)=>v*1e+23",
        "u231": "(v)=>v*1e+26",
        "u524": "(v)=>v*6000"
      },
      "description": "A hectohertz (hHz) is an SI unit of frequency applying the hecto‑ prefix (10^2). One hectohertz equals 100 hertzs. The hecto prefix denotes a factor of 10^2, so 1 hectohertz equals 10^2 hertzs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectohertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectohertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectohertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectohertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectohertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectohertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectohertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectohertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u220",
      "name": "decahertz",
      "shortName": "daHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-23",
        "u212": "(v)=>v*1e-20",
        "u213": "(v)=>v*1e-17",
        "u214": "(v)=>v*1e-14",
        "u215": "(v)=>v*1e-11",
        "u216": "(v)=>v*1e-08",
        "u217": "(v)=>v*1e-05",
        "u218": "(v)=>v*0.01",
        "u219": "(v)=>v*0.1",
        "u221": "(v)=>v*10",
        "u222": "(v)=>v*100",
        "u223": "(v)=>v*1000",
        "u224": "(v)=>v*10000",
        "u225": "(v)=>v*10000000",
        "u226": "(v)=>v*10000000000",
        "u227": "(v)=>v*10000000000000",
        "u228": "(v)=>v*1e+16",
        "u229": "(v)=>v*1e+19",
        "u230": "(v)=>v*1e+22",
        "u231": "(v)=>v*1e+25",
        "u524": "(v)=>v*600"
      },
      "description": "A decahertz (daHz) is an SI unit of frequency applying the deca‑ prefix (10^1). One decahertz equals 10 hertzs. The deca prefix denotes a factor of 10^1, so 1 decahertz equals 10^1 hertzs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decahertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decahertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decahertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decahertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decahertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decahertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decahertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decahertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u221",
      "name": "hertz",
      "shortName": "Hz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-24",
        "u212": "(v)=>v*1e-21",
        "u213": "(v)=>v*1e-18",
        "u214": "(v)=>v*1e-15",
        "u215": "(v)=>v*1e-12",
        "u216": "(v)=>v*1e-09",
        "u217": "(v)=>v*1e-06",
        "u218": "(v)=>v*0.001",
        "u219": "(v)=>v*0.01",
        "u220": "(v)=>v*0.1",
        "u222": "(v)=>v*10",
        "u223": "(v)=>v*100",
        "u224": "(v)=>v*1000",
        "u225": "(v)=>v*1000000",
        "u226": "(v)=>v*1000000000",
        "u227": "(v)=>v*1000000000000",
        "u228": "(v)=>v*1e+15",
        "u229": "(v)=>v*1e+18",
        "u230": "(v)=>v*1e+21",
        "u231": "(v)=>v*1e+24",
        "u524": "(v)=>v*60"
      },
      "description": "The hertz (Hz) is the SI derived unit of frequency, equal to one cycle per second. Hertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u222",
      "name": "decihertz",
      "shortName": "dHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-25",
        "u212": "(v)=>v*1e-22",
        "u213": "(v)=>v*1e-19",
        "u214": "(v)=>v*1e-16",
        "u215": "(v)=>v*1e-13",
        "u216": "(v)=>v*1e-10",
        "u217": "(v)=>v*1e-07",
        "u218": "(v)=>v*0.0001",
        "u219": "(v)=>v*0.001",
        "u220": "(v)=>v*0.01",
        "u221": "(v)=>v*0.1",
        "u223": "(v)=>v*10",
        "u224": "(v)=>v*100",
        "u225": "(v)=>v*100000",
        "u226": "(v)=>v*100000000",
        "u227": "(v)=>v*100000000000",
        "u228": "(v)=>v*100000000000000",
        "u229": "(v)=>v*1e+17",
        "u230": "(v)=>v*1e+20",
        "u231": "(v)=>v*1e+23",
        "u524": "(v)=>v*6"
      },
      "description": "A decihertz (dHz) is an SI unit of frequency applying the deci‑ prefix (10^-1). One decihertz equals 0.1 hertzs. The deci prefix denotes a factor of 10^-1, so 1 decihertz equals 10^-1 hertzs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decihertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decihertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decihertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decihertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decihertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decihertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decihertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decihertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u223",
      "name": "centihertz",
      "shortName": "cHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-26",
        "u212": "(v)=>v*1e-23",
        "u213": "(v)=>v*1e-20",
        "u214": "(v)=>v*1e-17",
        "u215": "(v)=>v*1e-14",
        "u216": "(v)=>v*1e-11",
        "u217": "(v)=>v*1e-08",
        "u218": "(v)=>v*1e-05",
        "u219": "(v)=>v*0.0001",
        "u220": "(v)=>v*0.001",
        "u221": "(v)=>v*0.01",
        "u222": "(v)=>v*0.1",
        "u224": "(v)=>v*10",
        "u225": "(v)=>v*10000",
        "u226": "(v)=>v*10000000",
        "u227": "(v)=>v*10000000000",
        "u228": "(v)=>v*10000000000000",
        "u229": "(v)=>v*1e+16",
        "u230": "(v)=>v*1e+19",
        "u231": "(v)=>v*1e+22",
        "u524": "(v)=>v*0.6"
      },
      "description": "A centihertz (cHz) is an SI unit of frequency applying the centi‑ prefix (10^-2). One centihertz equals 0.01 hertzs. The centi prefix denotes a factor of 10^-2, so 1 centihertz equals 10^-2 hertzs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centihertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centihertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centihertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centihertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centihertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centihertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centihertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centihertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u224",
      "name": "millihertz",
      "shortName": "mHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-27",
        "u212": "(v)=>v*1e-24",
        "u213": "(v)=>v*1e-21",
        "u214": "(v)=>v*1e-18",
        "u215": "(v)=>v*1e-15",
        "u216": "(v)=>v*1e-12",
        "u217": "(v)=>v*1e-09",
        "u218": "(v)=>v*1e-06",
        "u219": "(v)=>v*1e-05",
        "u220": "(v)=>v*0.0001",
        "u221": "(v)=>v*0.001",
        "u222": "(v)=>v*0.01",
        "u223": "(v)=>v*0.1",
        "u225": "(v)=>v*1000",
        "u226": "(v)=>v*1000000",
        "u227": "(v)=>v*1000000000",
        "u228": "(v)=>v*1000000000000",
        "u229": "(v)=>v*1e+15",
        "u230": "(v)=>v*1e+18",
        "u231": "(v)=>v*1e+21",
        "u524": "(v)=>v*0.06"
      },
      "description": "A millihertz (mHz) is an SI unit of frequency applying the milli‑ prefix (10^-3). One millihertz equals 0.001 hertzs. The milli prefix denotes a factor of 10^-3, so 1 millihertz equals 10^-3 hertzs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millihertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millihertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millihertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millihertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millihertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millihertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millihertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millihertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u225",
      "name": "microhertz",
      "shortName": "μHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-30",
        "u212": "(v)=>v*1e-27",
        "u213": "(v)=>v*1e-24",
        "u214": "(v)=>v*1e-21",
        "u215": "(v)=>v*1e-18",
        "u216": "(v)=>v*1e-15",
        "u217": "(v)=>v*1e-12",
        "u218": "(v)=>v*1e-09",
        "u219": "(v)=>v*1e-08",
        "u220": "(v)=>v*1e-07",
        "u221": "(v)=>v*1e-06",
        "u222": "(v)=>v*1e-05",
        "u223": "(v)=>v*0.0001",
        "u224": "(v)=>v*0.001",
        "u226": "(v)=>v*1000",
        "u227": "(v)=>v*1000000",
        "u228": "(v)=>v*1000000000",
        "u229": "(v)=>v*1000000000000",
        "u230": "(v)=>v*1e+15",
        "u231": "(v)=>v*1e+18",
        "u524": "(v)=>v*6e-05"
      },
      "description": "A microhertz (μHz) is an SI unit of frequency applying the micro‑ prefix (10^-6). One microhertz equals 1e-06 hertzs. The micro prefix denotes a factor of 10^-6, so 1 microhertz equals 10^-6 hertzs. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microhertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microhertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microhertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microhertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microhertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microhertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microhertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microhertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u226",
      "name": "nanohertz",
      "shortName": "nHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-33",
        "u212": "(v)=>v*1e-30",
        "u213": "(v)=>v*1e-27",
        "u214": "(v)=>v*1e-24",
        "u215": "(v)=>v*1e-21",
        "u216": "(v)=>v*1e-18",
        "u217": "(v)=>v*1e-15",
        "u218": "(v)=>v*1e-12",
        "u219": "(v)=>v*1e-11",
        "u220": "(v)=>v*1e-10",
        "u221": "(v)=>v*1e-09",
        "u222": "(v)=>v*1e-08",
        "u223": "(v)=>v*1e-07",
        "u224": "(v)=>v*1e-06",
        "u225": "(v)=>v*0.001",
        "u227": "(v)=>v*1000",
        "u228": "(v)=>v*1000000",
        "u229": "(v)=>v*1000000000",
        "u230": "(v)=>v*1000000000000",
        "u231": "(v)=>v*1e+15",
        "u524": "(v)=>v*6e-08"
      },
      "description": "A nanohertz (nHz) is an SI unit of frequency applying the nano‑ prefix (10^-9). One nanohertz equals 1e-09 hertzs. The nano prefix denotes a factor of 10^-9, so 1 nanohertz equals 10^-9 hertzs. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanohertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanohertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanohertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanohertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanohertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanohertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanohertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanohertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u227",
      "name": "picohertz",
      "shortName": "pHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-36",
        "u212": "(v)=>v*1e-33",
        "u213": "(v)=>v*1e-30",
        "u214": "(v)=>v*1e-27",
        "u215": "(v)=>v*1e-24",
        "u216": "(v)=>v*1e-21",
        "u217": "(v)=>v*1e-18",
        "u218": "(v)=>v*1e-15",
        "u219": "(v)=>v*1e-14",
        "u220": "(v)=>v*1e-13",
        "u221": "(v)=>v*1e-12",
        "u222": "(v)=>v*1e-11",
        "u223": "(v)=>v*1e-10",
        "u224": "(v)=>v*1e-09",
        "u225": "(v)=>v*1e-06",
        "u226": "(v)=>v*0.001",
        "u228": "(v)=>v*1000",
        "u229": "(v)=>v*1000000",
        "u230": "(v)=>v*1000000000",
        "u231": "(v)=>v*1000000000000",
        "u524": "(v)=>v*6e-11"
      },
      "description": "A picohertz (pHz) is an SI unit of frequency applying the pico‑ prefix (10^-12). One picohertz equals 1e-12 hertzs. The pico prefix denotes a factor of 10^-12, so 1 picohertz equals 10^-12 hertzs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picohertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picohertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picohertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picohertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picohertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picohertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picohertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picohertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u228",
      "name": "femtohertz",
      "shortName": "fHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-39",
        "u212": "(v)=>v*1e-36",
        "u213": "(v)=>v*1e-33",
        "u214": "(v)=>v*1e-30",
        "u215": "(v)=>v*1e-27",
        "u216": "(v)=>v*1e-24",
        "u217": "(v)=>v*1e-21",
        "u218": "(v)=>v*1e-18",
        "u219": "(v)=>v*1e-17",
        "u220": "(v)=>v*1e-16",
        "u221": "(v)=>v*1e-15",
        "u222": "(v)=>v*1e-14",
        "u223": "(v)=>v*1e-13",
        "u224": "(v)=>v*1e-12",
        "u225": "(v)=>v*1e-09",
        "u226": "(v)=>v*1e-06",
        "u227": "(v)=>v*0.001",
        "u229": "(v)=>v*1000",
        "u230": "(v)=>v*1000000",
        "u231": "(v)=>v*1000000000",
        "u524": "(v)=>v*6e-14"
      },
      "description": "A femtohertz (fHz) is an SI unit of frequency applying the femto‑ prefix (10^-15). One femtohertz equals 1e-15 hertzs. The femto prefix denotes a factor of 10^-15, so 1 femtohertz equals 10^-15 hertzs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtohertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtohertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtohertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtohertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtohertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtohertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtohertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtohertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u229",
      "name": "attohertz",
      "shortName": "aHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-42",
        "u212": "(v)=>v*1e-39",
        "u213": "(v)=>v*1e-36",
        "u214": "(v)=>v*1e-33",
        "u215": "(v)=>v*1e-30",
        "u216": "(v)=>v*1e-27",
        "u217": "(v)=>v*1e-24",
        "u218": "(v)=>v*1e-21",
        "u219": "(v)=>v*1e-20",
        "u220": "(v)=>v*1e-19",
        "u221": "(v)=>v*1e-18",
        "u222": "(v)=>v*1e-17",
        "u223": "(v)=>v*1e-16",
        "u224": "(v)=>v*1e-15",
        "u225": "(v)=>v*1e-12",
        "u226": "(v)=>v*1e-09",
        "u227": "(v)=>v*1e-06",
        "u228": "(v)=>v*0.001",
        "u230": "(v)=>v*1000",
        "u231": "(v)=>v*1000000",
        "u524": "(v)=>v*6e-17"
      },
      "description": "A attohertz (aHz) is an SI unit of frequency applying the atto‑ prefix (10^-18). One attohertz equals 1e-18 hertzs. The atto prefix denotes a factor of 10^-18, so 1 attohertz equals 10^-18 hertzs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attohertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attohertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attohertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attohertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attohertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attohertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attohertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attohertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u230",
      "name": "zeptohertz",
      "shortName": "zHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-45",
        "u212": "(v)=>v*1e-42",
        "u213": "(v)=>v*1e-39",
        "u214": "(v)=>v*1e-36",
        "u215": "(v)=>v*1e-33",
        "u216": "(v)=>v*1e-30",
        "u217": "(v)=>v*1e-27",
        "u218": "(v)=>v*1e-24",
        "u219": "(v)=>v*1e-23",
        "u220": "(v)=>v*1e-22",
        "u221": "(v)=>v*1e-21",
        "u222": "(v)=>v*1e-20",
        "u223": "(v)=>v*1e-19",
        "u224": "(v)=>v*1e-18",
        "u225": "(v)=>v*1e-15",
        "u226": "(v)=>v*1e-12",
        "u227": "(v)=>v*1e-09",
        "u228": "(v)=>v*1e-06",
        "u229": "(v)=>v*0.001",
        "u231": "(v)=>v*1000",
        "u524": "(v)=>v*6e-20"
      },
      "description": "A zeptohertz (zHz) is an SI unit of frequency applying the zepto‑ prefix (10^-21). One zeptohertz equals 1e-21 hertzs. The zepto prefix denotes a factor of 10^-21, so 1 zeptohertz equals 10^-21 hertzs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptohertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptohertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptohertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptohertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptohertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptohertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptohertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptohertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u231",
      "name": "yoctohertz",
      "shortName": "yHz",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1e-48",
        "u212": "(v)=>v*1e-45",
        "u213": "(v)=>v*1e-42",
        "u214": "(v)=>v*1e-39",
        "u215": "(v)=>v*1e-36",
        "u216": "(v)=>v*1e-33",
        "u217": "(v)=>v*1e-30",
        "u218": "(v)=>v*1e-27",
        "u219": "(v)=>v*1e-26",
        "u220": "(v)=>v*1e-25",
        "u221": "(v)=>v*1e-24",
        "u222": "(v)=>v*1e-23",
        "u223": "(v)=>v*1e-22",
        "u224": "(v)=>v*1e-21",
        "u225": "(v)=>v*1e-18",
        "u226": "(v)=>v*1e-15",
        "u227": "(v)=>v*1e-12",
        "u228": "(v)=>v*1e-09",
        "u229": "(v)=>v*1e-06",
        "u230": "(v)=>v*0.001",
        "u524": "(v)=>v*6e-23"
      },
      "description": "A yoctohertz (yHz) is an SI unit of frequency applying the yocto‑ prefix (10^-24). One yoctohertz equals 1e-24 hertzs. The yocto prefix denotes a factor of 10^-24, so 1 yoctohertz equals 10^-24 hertzs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctohertz belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctohertz often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctohertz as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctohertz is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctohertz values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctohertz has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctohertz metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctohertz fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u232",
      "name": "yottabyte",
      "shortName": "YB",
      "categoryId": "c7",
      "conversions": {
        "u233": "(v)=>v*1000",
        "u234": "(v)=>v*1000000",
        "u235": "(v)=>v*1000000000",
        "u236": "(v)=>v*1000000000000",
        "u237": "(v)=>v*1e+15",
        "u238": "(v)=>v*1e+18",
        "u239": "(v)=>v*1e+21",
        "u240": "(v)=>v*1e+22",
        "u241": "(v)=>v*1e+23",
        "u242": "(v)=>v*1e+24",
        "u243": "(v)=>v*1e+25",
        "u244": "(v)=>v*1e+26",
        "u245": "(v)=>v*1e+27",
        "u246": "(v)=>v*1e+30",
        "u247": "(v)=>v*1e+33",
        "u248": "(v)=>v*1e+36",
        "u249": "(v)=>v*1e+39",
        "u250": "(v)=>v*1e+42",
        "u251": "(v)=>v*1e+45",
        "u252": "(v)=>v*1e+48",
        "u253": "(v)=>v*0.827180612553028",
        "u254": "(v)=>v*847.0329472543",
        "u255": "(v)=>v*867361.737988404",
        "u256": "(v)=>v*888178419.700125",
        "u257": "(v)=>v*909494701772.928",
        "u258": "(v)=>v*931322574615478",
        "u259": "(v)=>v*9.5367431640625e+17",
        "u260": "(v)=>v*9.765625e+20"
      },
      "description": "A yottabyte (YB) is an SI unit of data applying the yotta‑ prefix (10^24). One yottabyte equals 1e+24 bytes. The yotta prefix denotes a factor of 10^24, so 1 yottabyte equals 10^24 bytes. Such immensely large magnitudes are primarily encountered in petascale and exascale data‑centre planning. Yottabyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottabyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottabyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottabyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottabyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottabyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottabyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottabyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u233",
      "name": "zettabyte",
      "shortName": "ZB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*0.001",
        "u234": "(v)=>v*1000",
        "u235": "(v)=>v*1000000",
        "u236": "(v)=>v*1000000000",
        "u237": "(v)=>v*1000000000000",
        "u238": "(v)=>v*1e+15",
        "u239": "(v)=>v*1e+18",
        "u240": "(v)=>v*1e+19",
        "u241": "(v)=>v*1e+20",
        "u242": "(v)=>v*1e+21",
        "u243": "(v)=>v*1e+22",
        "u244": "(v)=>v*1e+23",
        "u245": "(v)=>v*1e+24",
        "u246": "(v)=>v*1e+27",
        "u247": "(v)=>v*1e+30",
        "u248": "(v)=>v*1e+33",
        "u249": "(v)=>v*1e+36",
        "u250": "(v)=>v*1e+39",
        "u251": "(v)=>v*1e+42",
        "u252": "(v)=>v*1e+45",
        "u253": "(v)=>v*0.000827180612553028",
        "u254": "(v)=>v*0.8470329472543",
        "u255": "(v)=>v*867.361737988404",
        "u256": "(v)=>v*888178.419700125",
        "u257": "(v)=>v*909494701.772928",
        "u258": "(v)=>v*931322574615.479",
        "u259": "(v)=>v*953674316406250",
        "u260": "(v)=>v*9.765625e+17"
      },
      "description": "A zettabyte (ZB) is an SI unit of data applying the zetta‑ prefix (10^21). One zettabyte equals 1e+21 bytes. The zetta prefix denotes a factor of 10^21, so 1 zettabyte equals 10^21 bytes. Such immensely large magnitudes are primarily encountered in petascale and exascale data‑centre planning. Zettabyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettabyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettabyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettabyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettabyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettabyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettabyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettabyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u234",
      "name": "exabyte",
      "shortName": "EB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-06",
        "u233": "(v)=>v*0.001",
        "u235": "(v)=>v*1000",
        "u236": "(v)=>v*1000000",
        "u237": "(v)=>v*1000000000",
        "u238": "(v)=>v*1000000000000",
        "u239": "(v)=>v*1e+15",
        "u240": "(v)=>v*1e+16",
        "u241": "(v)=>v*1e+17",
        "u242": "(v)=>v*1e+18",
        "u243": "(v)=>v*1e+19",
        "u244": "(v)=>v*1e+20",
        "u245": "(v)=>v*1e+21",
        "u246": "(v)=>v*1e+24",
        "u247": "(v)=>v*1e+27",
        "u248": "(v)=>v*1e+30",
        "u249": "(v)=>v*1e+33",
        "u250": "(v)=>v*1e+36",
        "u251": "(v)=>v*1e+39",
        "u252": "(v)=>v*1e+42",
        "u253": "(v)=>v*8.27180612553028e-07",
        "u254": "(v)=>v*0.0008470329472543",
        "u255": "(v)=>v*0.867361737988404",
        "u256": "(v)=>v*888.178419700125",
        "u257": "(v)=>v*909494.701772928",
        "u258": "(v)=>v*931322574.615479",
        "u259": "(v)=>v*953674316406.25",
        "u260": "(v)=>v*976562500000000"
      },
      "description": "A exabyte (EB) is an SI unit of data applying the exa‑ prefix (10^18). One exabyte equals 1e+18 bytes. The exa prefix denotes a factor of 10^18, so 1 exabyte equals 10^18 bytes. Such immensely large magnitudes are primarily encountered in petascale and exascale data‑centre planning. Exabyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exabyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exabyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exabyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exabyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exabyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exabyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exabyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u235",
      "name": "petabyte",
      "shortName": "PB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-09",
        "u233": "(v)=>v*1e-06",
        "u234": "(v)=>v*0.001",
        "u236": "(v)=>v*1000",
        "u237": "(v)=>v*1000000",
        "u238": "(v)=>v*1000000000",
        "u239": "(v)=>v*1000000000000",
        "u240": "(v)=>v*10000000000000",
        "u241": "(v)=>v*100000000000000",
        "u242": "(v)=>v*1e+15",
        "u243": "(v)=>v*1e+16",
        "u244": "(v)=>v*1e+17",
        "u245": "(v)=>v*1e+18",
        "u246": "(v)=>v*1e+21",
        "u247": "(v)=>v*1e+24",
        "u248": "(v)=>v*1e+27",
        "u249": "(v)=>v*1e+30",
        "u250": "(v)=>v*1e+33",
        "u251": "(v)=>v*1e+36",
        "u252": "(v)=>v*1e+39",
        "u253": "(v)=>v*8.27180612553028e-10",
        "u254": "(v)=>v*8.470329472543e-07",
        "u255": "(v)=>v*0.000867361737988404",
        "u256": "(v)=>v*0.888178419700125",
        "u257": "(v)=>v*909.494701772928",
        "u258": "(v)=>v*931322.574615479",
        "u259": "(v)=>v*953674316.40625",
        "u260": "(v)=>v*976562500000"
      },
      "description": "A petabyte (PB) is an SI unit of data applying the peta‑ prefix (10^15). One petabyte equals 1e+15 bytes. The peta prefix denotes a factor of 10^15, so 1 petabyte equals 10^15 bytes. Such immensely large magnitudes are primarily encountered in petascale and exascale data‑centre planning. Petabyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petabyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petabyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petabyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petabyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petabyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petabyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petabyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u236",
      "name": "terabyte",
      "shortName": "TB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-12",
        "u233": "(v)=>v*1e-09",
        "u234": "(v)=>v*1e-06",
        "u235": "(v)=>v*0.001",
        "u237": "(v)=>v*1000",
        "u238": "(v)=>v*1000000",
        "u239": "(v)=>v*1000000000",
        "u240": "(v)=>v*10000000000",
        "u241": "(v)=>v*100000000000",
        "u242": "(v)=>v*1000000000000",
        "u243": "(v)=>v*10000000000000",
        "u244": "(v)=>v*100000000000000",
        "u245": "(v)=>v*1e+15",
        "u246": "(v)=>v*1e+18",
        "u247": "(v)=>v*1e+21",
        "u248": "(v)=>v*1e+24",
        "u249": "(v)=>v*1e+27",
        "u250": "(v)=>v*1e+30",
        "u251": "(v)=>v*1e+33",
        "u252": "(v)=>v*1e+36",
        "u253": "(v)=>v*8.27180612553028e-13",
        "u254": "(v)=>v*8.470329472543e-10",
        "u255": "(v)=>v*8.67361737988404e-07",
        "u256": "(v)=>v*0.000888178419700125",
        "u257": "(v)=>v*0.909494701772928",
        "u258": "(v)=>v*931.322574615479",
        "u259": "(v)=>v*953674.31640625",
        "u260": "(v)=>v*976562500"
      },
      "description": "A terabyte (TB) is an SI unit of data applying the tera‑ prefix (10^12). One terabyte equals 1e+12 bytes. The tera prefix denotes a factor of 10^12, so 1 terabyte equals 10^12 bytes. Such immensely large magnitudes are primarily encountered in petascale and exascale data‑centre planning. Terabyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terabyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terabyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terabyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terabyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terabyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terabyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terabyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u237",
      "name": "gigabyte",
      "shortName": "GB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-15",
        "u233": "(v)=>v*1e-12",
        "u234": "(v)=>v*1e-09",
        "u235": "(v)=>v*1e-06",
        "u236": "(v)=>v*0.001",
        "u238": "(v)=>v*1000",
        "u239": "(v)=>v*1000000",
        "u240": "(v)=>v*10000000",
        "u241": "(v)=>v*100000000",
        "u242": "(v)=>v*1000000000",
        "u243": "(v)=>v*10000000000",
        "u244": "(v)=>v*100000000000",
        "u245": "(v)=>v*1000000000000",
        "u246": "(v)=>v*1e+15",
        "u247": "(v)=>v*1e+18",
        "u248": "(v)=>v*1e+21",
        "u249": "(v)=>v*1e+24",
        "u250": "(v)=>v*1e+27",
        "u251": "(v)=>v*1e+30",
        "u252": "(v)=>v*1e+33",
        "u253": "(v)=>v*8.27180612553028e-16",
        "u254": "(v)=>v*8.470329472543e-13",
        "u255": "(v)=>v*8.67361737988404e-10",
        "u256": "(v)=>v*8.88178419700125e-07",
        "u257": "(v)=>v*0.000909494701772928",
        "u258": "(v)=>v*0.931322574615479",
        "u259": "(v)=>v*953.67431640625",
        "u260": "(v)=>v*976562.5"
      },
      "description": "A gigabyte (GB) is an SI unit of data applying the giga‑ prefix (10^9). One gigabyte equals 1000000000 bytes. The giga prefix denotes a factor of 10^9, so 1 gigabyte equals 10^9 bytes. Such very large magnitudes are primarily encountered in high‑performance computing and enterprise storage. Gigabyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigabyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigabyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigabyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigabyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigabyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigabyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigabyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u238",
      "name": "megabyte",
      "shortName": "MB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-18",
        "u233": "(v)=>v*1e-15",
        "u234": "(v)=>v*1e-12",
        "u235": "(v)=>v*1e-09",
        "u236": "(v)=>v*1e-06",
        "u237": "(v)=>v*0.001",
        "u239": "(v)=>v*1000",
        "u240": "(v)=>v*10000",
        "u241": "(v)=>v*100000",
        "u242": "(v)=>v*1000000",
        "u243": "(v)=>v*10000000",
        "u244": "(v)=>v*100000000",
        "u245": "(v)=>v*1000000000",
        "u246": "(v)=>v*1000000000000",
        "u247": "(v)=>v*1e+15",
        "u248": "(v)=>v*1e+18",
        "u249": "(v)=>v*1e+21",
        "u250": "(v)=>v*1e+24",
        "u251": "(v)=>v*1e+27",
        "u252": "(v)=>v*1e+30",
        "u253": "(v)=>v*8.27180612553028e-19",
        "u254": "(v)=>v*8.470329472543e-16",
        "u255": "(v)=>v*8.67361737988404e-13",
        "u256": "(v)=>v*8.88178419700125e-10",
        "u257": "(v)=>v*9.09494701772928e-07",
        "u258": "(v)=>v*0.000931322574615479",
        "u259": "(v)=>v*0.95367431640625",
        "u260": "(v)=>v*976.5625"
      },
      "description": "A megabyte (MB) is an SI unit of data applying the mega‑ prefix (10^6). One megabyte equals 1000000 bytes. The mega prefix denotes a factor of 10^6, so 1 megabyte equals 10^6 bytes. Such very large magnitudes are primarily encountered in high‑performance computing and enterprise storage. Megabyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megabyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megabyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megabyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megabyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megabyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megabyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megabyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u239",
      "name": "kilobyte",
      "shortName": "kB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-21",
        "u233": "(v)=>v*1e-18",
        "u234": "(v)=>v*1e-15",
        "u235": "(v)=>v*1e-12",
        "u236": "(v)=>v*1e-09",
        "u237": "(v)=>v*1e-06",
        "u238": "(v)=>v*0.001",
        "u240": "(v)=>v*10",
        "u241": "(v)=>v*100",
        "u242": "(v)=>v*1000",
        "u243": "(v)=>v*10000",
        "u244": "(v)=>v*100000",
        "u245": "(v)=>v*1000000",
        "u246": "(v)=>v*1000000000",
        "u247": "(v)=>v*1000000000000",
        "u248": "(v)=>v*1e+15",
        "u249": "(v)=>v*1e+18",
        "u250": "(v)=>v*1e+21",
        "u251": "(v)=>v*1e+24",
        "u252": "(v)=>v*1e+27",
        "u253": "(v)=>v*8.27180612553028e-22",
        "u254": "(v)=>v*8.470329472543e-19",
        "u255": "(v)=>v*8.67361737988404e-16",
        "u256": "(v)=>v*8.88178419700125e-13",
        "u257": "(v)=>v*9.09494701772928e-10",
        "u258": "(v)=>v*9.31322574615479e-07",
        "u259": "(v)=>v*0.00095367431640625",
        "u260": "(v)=>v*0.9765625"
      },
      "description": "A kilobyte (kB) is an SI unit of data applying the kilo‑ prefix (10^3). One kilobyte equals 1000 bytes. The kilo prefix denotes a factor of 10^3, so 1 kilobyte equals 10^3 bytes. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Kilobyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilobyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilobyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilobyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilobyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilobyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilobyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilobyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u240",
      "name": "hectobyte",
      "shortName": "hB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-22",
        "u233": "(v)=>v*1e-19",
        "u234": "(v)=>v*1e-16",
        "u235": "(v)=>v*1e-13",
        "u236": "(v)=>v*1e-10",
        "u237": "(v)=>v*1e-07",
        "u238": "(v)=>v*0.0001",
        "u239": "(v)=>v*0.1",
        "u241": "(v)=>v*10",
        "u242": "(v)=>v*100",
        "u243": "(v)=>v*1000",
        "u244": "(v)=>v*10000",
        "u245": "(v)=>v*100000",
        "u246": "(v)=>v*100000000",
        "u247": "(v)=>v*100000000000",
        "u248": "(v)=>v*100000000000000",
        "u249": "(v)=>v*1e+17",
        "u250": "(v)=>v*1e+20",
        "u251": "(v)=>v*1e+23",
        "u252": "(v)=>v*1e+26",
        "u253": "(v)=>v*8.27180612553028e-23",
        "u254": "(v)=>v*8.470329472543e-20",
        "u255": "(v)=>v*8.67361737988404e-17",
        "u256": "(v)=>v*8.88178419700125e-14",
        "u257": "(v)=>v*9.09494701772928e-11",
        "u258": "(v)=>v*9.31322574615479e-08",
        "u259": "(v)=>v*9.5367431640625e-05",
        "u260": "(v)=>v*0.09765625"
      },
      "description": "A hectobyte (hB) is an SI unit of data applying the hecto‑ prefix (10^2). One hectobyte equals 100 bytes. The hecto prefix denotes a factor of 10^2, so 1 hectobyte equals 10^2 bytes. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Hectobyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectobyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectobyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectobyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectobyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectobyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectobyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectobyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u241",
      "name": "decabyte",
      "shortName": "daB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-23",
        "u233": "(v)=>v*1e-20",
        "u234": "(v)=>v*1e-17",
        "u235": "(v)=>v*1e-14",
        "u236": "(v)=>v*1e-11",
        "u237": "(v)=>v*1e-08",
        "u238": "(v)=>v*1e-05",
        "u239": "(v)=>v*0.01",
        "u240": "(v)=>v*0.1",
        "u242": "(v)=>v*10",
        "u243": "(v)=>v*100",
        "u244": "(v)=>v*1000",
        "u245": "(v)=>v*10000",
        "u246": "(v)=>v*10000000",
        "u247": "(v)=>v*10000000000",
        "u248": "(v)=>v*10000000000000",
        "u249": "(v)=>v*1e+16",
        "u250": "(v)=>v*1e+19",
        "u251": "(v)=>v*1e+22",
        "u252": "(v)=>v*1e+25",
        "u253": "(v)=>v*8.27180612553028e-24",
        "u254": "(v)=>v*8.470329472543e-21",
        "u255": "(v)=>v*8.67361737988404e-18",
        "u256": "(v)=>v*8.88178419700125e-15",
        "u257": "(v)=>v*9.09494701772928e-12",
        "u258": "(v)=>v*9.31322574615479e-09",
        "u259": "(v)=>v*9.5367431640625e-06",
        "u260": "(v)=>v*0.009765625"
      },
      "description": "A decabyte (daB) is an SI unit of data applying the deca‑ prefix (10^1). One decabyte equals 10 bytes. The deca prefix denotes a factor of 10^1, so 1 decabyte equals 10^1 bytes. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Decabyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decabyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decabyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decabyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decabyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decabyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decabyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decabyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u242",
      "name": "byte",
      "shortName": "B",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-24",
        "u233": "(v)=>v*1e-21",
        "u234": "(v)=>v*1e-18",
        "u235": "(v)=>v*1e-15",
        "u236": "(v)=>v*1e-12",
        "u237": "(v)=>v*1e-09",
        "u238": "(v)=>v*1e-06",
        "u239": "(v)=>v*0.001",
        "u240": "(v)=>v*0.01",
        "u241": "(v)=>v*0.1",
        "u243": "(v)=>v*10",
        "u244": "(v)=>v*100",
        "u245": "(v)=>v*1000",
        "u246": "(v)=>v*1000000",
        "u247": "(v)=>v*1000000000",
        "u248": "(v)=>v*1000000000000",
        "u249": "(v)=>v*1e+15",
        "u250": "(v)=>v*1e+18",
        "u251": "(v)=>v*1e+21",
        "u252": "(v)=>v*1e+24",
        "u253": "(v)=>v*8.27180612553028e-25",
        "u254": "(v)=>v*8.470329472543e-22",
        "u255": "(v)=>v*8.67361737988404e-19",
        "u256": "(v)=>v*8.88178419700125e-16",
        "u257": "(v)=>v*9.09494701772928e-13",
        "u258": "(v)=>v*9.31322574615479e-10",
        "u259": "(v)=>v*9.5367431640625e-07",
        "u260": "(v)=>v*0.0009765625"
      },
      "description": "A byte (B) is a unit of digital information consisting of eight bits; it is commonly the amount needed to encode a single character. Byte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of byte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent byte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, byte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when byte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding byte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed byte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of byte fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u243",
      "name": "decibyte",
      "shortName": "dB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-25",
        "u233": "(v)=>v*1e-22",
        "u234": "(v)=>v*1e-19",
        "u235": "(v)=>v*1e-16",
        "u236": "(v)=>v*1e-13",
        "u237": "(v)=>v*1e-10",
        "u238": "(v)=>v*1e-07",
        "u239": "(v)=>v*0.0001",
        "u240": "(v)=>v*0.001",
        "u241": "(v)=>v*0.01",
        "u242": "(v)=>v*0.1",
        "u244": "(v)=>v*10",
        "u245": "(v)=>v*100",
        "u246": "(v)=>v*100000",
        "u247": "(v)=>v*100000000",
        "u248": "(v)=>v*100000000000",
        "u249": "(v)=>v*100000000000000",
        "u250": "(v)=>v*1e+17",
        "u251": "(v)=>v*1e+20",
        "u252": "(v)=>v*1e+23",
        "u253": "(v)=>v*8.27180612553028e-26",
        "u254": "(v)=>v*8.470329472543e-23",
        "u255": "(v)=>v*8.67361737988404e-20",
        "u256": "(v)=>v*8.88178419700125e-17",
        "u257": "(v)=>v*9.09494701772928e-14",
        "u258": "(v)=>v*9.31322574615479e-11",
        "u259": "(v)=>v*9.5367431640625e-08",
        "u260": "(v)=>v*9.765625e-05"
      },
      "description": "A decibyte (dB) is an SI unit of data applying the deci‑ prefix (10^-1). One decibyte equals 0.1 bytes. The deci prefix denotes a factor of 10^-1, so 1 decibyte equals 10^-1 bytes. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Decibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u244",
      "name": "centibyte",
      "shortName": "cB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-26",
        "u233": "(v)=>v*1e-23",
        "u234": "(v)=>v*1e-20",
        "u235": "(v)=>v*1e-17",
        "u236": "(v)=>v*1e-14",
        "u237": "(v)=>v*1e-11",
        "u238": "(v)=>v*1e-08",
        "u239": "(v)=>v*1e-05",
        "u240": "(v)=>v*0.0001",
        "u241": "(v)=>v*0.001",
        "u242": "(v)=>v*0.01",
        "u243": "(v)=>v*0.1",
        "u245": "(v)=>v*10",
        "u246": "(v)=>v*10000",
        "u247": "(v)=>v*10000000",
        "u248": "(v)=>v*10000000000",
        "u249": "(v)=>v*10000000000000",
        "u250": "(v)=>v*1e+16",
        "u251": "(v)=>v*1e+19",
        "u252": "(v)=>v*1e+22",
        "u253": "(v)=>v*8.27180612553028e-27",
        "u254": "(v)=>v*8.470329472543e-24",
        "u255": "(v)=>v*8.67361737988404e-21",
        "u256": "(v)=>v*8.88178419700125e-18",
        "u257": "(v)=>v*9.09494701772928e-15",
        "u258": "(v)=>v*9.31322574615479e-12",
        "u259": "(v)=>v*9.5367431640625e-09",
        "u260": "(v)=>v*9.765625e-06"
      },
      "description": "A centibyte (cB) is an SI unit of data applying the centi‑ prefix (10^-2). One centibyte equals 0.01 bytes. The centi prefix denotes a factor of 10^-2, so 1 centibyte equals 10^-2 bytes. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Centibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u245",
      "name": "millibyte",
      "shortName": "mB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-27",
        "u233": "(v)=>v*1e-24",
        "u234": "(v)=>v*1e-21",
        "u235": "(v)=>v*1e-18",
        "u236": "(v)=>v*1e-15",
        "u237": "(v)=>v*1e-12",
        "u238": "(v)=>v*1e-09",
        "u239": "(v)=>v*1e-06",
        "u240": "(v)=>v*1e-05",
        "u241": "(v)=>v*0.0001",
        "u242": "(v)=>v*0.001",
        "u243": "(v)=>v*0.01",
        "u244": "(v)=>v*0.1",
        "u246": "(v)=>v*1000",
        "u247": "(v)=>v*1000000",
        "u248": "(v)=>v*1000000000",
        "u249": "(v)=>v*1000000000000",
        "u250": "(v)=>v*1e+15",
        "u251": "(v)=>v*1e+18",
        "u252": "(v)=>v*1e+21",
        "u253": "(v)=>v*8.27180612553028e-28",
        "u254": "(v)=>v*8.470329472543e-25",
        "u255": "(v)=>v*8.67361737988404e-22",
        "u256": "(v)=>v*8.88178419700125e-19",
        "u257": "(v)=>v*9.09494701772928e-16",
        "u258": "(v)=>v*9.31322574615479e-13",
        "u259": "(v)=>v*9.5367431640625e-10",
        "u260": "(v)=>v*9.765625e-07"
      },
      "description": "A millibyte (mB) is an SI unit of data applying the milli‑ prefix (10^-3). One millibyte equals 0.001 bytes. The milli prefix denotes a factor of 10^-3, so 1 millibyte equals 10^-3 bytes. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Millibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u246",
      "name": "microbyte",
      "shortName": "μB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-30",
        "u233": "(v)=>v*1e-27",
        "u234": "(v)=>v*1e-24",
        "u235": "(v)=>v*1e-21",
        "u236": "(v)=>v*1e-18",
        "u237": "(v)=>v*1e-15",
        "u238": "(v)=>v*1e-12",
        "u239": "(v)=>v*1e-09",
        "u240": "(v)=>v*1e-08",
        "u241": "(v)=>v*1e-07",
        "u242": "(v)=>v*1e-06",
        "u243": "(v)=>v*1e-05",
        "u244": "(v)=>v*0.0001",
        "u245": "(v)=>v*0.001",
        "u247": "(v)=>v*1000",
        "u248": "(v)=>v*1000000",
        "u249": "(v)=>v*1000000000",
        "u250": "(v)=>v*1000000000000",
        "u251": "(v)=>v*1e+15",
        "u252": "(v)=>v*1e+18",
        "u253": "(v)=>v*8.27180612553028e-31",
        "u254": "(v)=>v*8.470329472543e-28",
        "u255": "(v)=>v*8.67361737988404e-25",
        "u256": "(v)=>v*8.88178419700125e-22",
        "u257": "(v)=>v*9.09494701772928e-19",
        "u258": "(v)=>v*9.31322574615478e-16",
        "u259": "(v)=>v*9.5367431640625e-13",
        "u260": "(v)=>v*9.765625e-10"
      },
      "description": "A microbyte (μB) is an SI unit of data applying the micro‑ prefix (10^-6). One microbyte equals 1e-06 bytes. The micro prefix denotes a factor of 10^-6, so 1 microbyte equals 10^-6 bytes. Such very small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Microbyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microbyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microbyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microbyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microbyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microbyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microbyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microbyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u247",
      "name": "nanobyte",
      "shortName": "nB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-33",
        "u233": "(v)=>v*1e-30",
        "u234": "(v)=>v*1e-27",
        "u235": "(v)=>v*1e-24",
        "u236": "(v)=>v*1e-21",
        "u237": "(v)=>v*1e-18",
        "u238": "(v)=>v*1e-15",
        "u239": "(v)=>v*1e-12",
        "u240": "(v)=>v*1e-11",
        "u241": "(v)=>v*1e-10",
        "u242": "(v)=>v*1e-09",
        "u243": "(v)=>v*1e-08",
        "u244": "(v)=>v*1e-07",
        "u245": "(v)=>v*1e-06",
        "u246": "(v)=>v*0.001",
        "u248": "(v)=>v*1000",
        "u249": "(v)=>v*1000000",
        "u250": "(v)=>v*1000000000",
        "u251": "(v)=>v*1000000000000",
        "u252": "(v)=>v*1e+15",
        "u253": "(v)=>v*8.27180612553028e-34",
        "u254": "(v)=>v*8.470329472543e-31",
        "u255": "(v)=>v*8.67361737988404e-28",
        "u256": "(v)=>v*8.88178419700125e-25",
        "u257": "(v)=>v*9.09494701772928e-22",
        "u258": "(v)=>v*9.31322574615479e-19",
        "u259": "(v)=>v*9.5367431640625e-16",
        "u260": "(v)=>v*9.765625e-13"
      },
      "description": "A nanobyte (nB) is an SI unit of data applying the nano‑ prefix (10^-9). One nanobyte equals 1e-09 bytes. The nano prefix denotes a factor of 10^-9, so 1 nanobyte equals 10^-9 bytes. Such very small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Nanobyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanobyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanobyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanobyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanobyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanobyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanobyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanobyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u248",
      "name": "picobyte",
      "shortName": "pB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-36",
        "u233": "(v)=>v*1e-33",
        "u234": "(v)=>v*1e-30",
        "u235": "(v)=>v*1e-27",
        "u236": "(v)=>v*1e-24",
        "u237": "(v)=>v*1e-21",
        "u238": "(v)=>v*1e-18",
        "u239": "(v)=>v*1e-15",
        "u240": "(v)=>v*1e-14",
        "u241": "(v)=>v*1e-13",
        "u242": "(v)=>v*1e-12",
        "u243": "(v)=>v*1e-11",
        "u244": "(v)=>v*1e-10",
        "u245": "(v)=>v*1e-09",
        "u246": "(v)=>v*1e-06",
        "u247": "(v)=>v*0.001",
        "u249": "(v)=>v*1000",
        "u250": "(v)=>v*1000000",
        "u251": "(v)=>v*1000000000",
        "u252": "(v)=>v*1000000000000",
        "u253": "(v)=>v*8.27180612553028e-37",
        "u254": "(v)=>v*8.470329472543e-34",
        "u255": "(v)=>v*8.67361737988404e-31",
        "u256": "(v)=>v*8.88178419700125e-28",
        "u257": "(v)=>v*9.09494701772928e-25",
        "u258": "(v)=>v*9.31322574615478e-22",
        "u259": "(v)=>v*9.5367431640625e-19",
        "u260": "(v)=>v*9.765625e-16"
      },
      "description": "A picobyte (pB) is an SI unit of data applying the pico‑ prefix (10^-12). One picobyte equals 1e-12 bytes. The pico prefix denotes a factor of 10^-12, so 1 picobyte equals 10^-12 bytes. Such extremely small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Picobyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picobyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picobyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picobyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picobyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picobyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picobyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picobyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u249",
      "name": "femtobyte",
      "shortName": "fB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-39",
        "u233": "(v)=>v*1e-36",
        "u234": "(v)=>v*1e-33",
        "u235": "(v)=>v*1e-30",
        "u236": "(v)=>v*1e-27",
        "u237": "(v)=>v*1e-24",
        "u238": "(v)=>v*1e-21",
        "u239": "(v)=>v*1e-18",
        "u240": "(v)=>v*1e-17",
        "u241": "(v)=>v*1e-16",
        "u242": "(v)=>v*1e-15",
        "u243": "(v)=>v*1e-14",
        "u244": "(v)=>v*1e-13",
        "u245": "(v)=>v*1e-12",
        "u246": "(v)=>v*1e-09",
        "u247": "(v)=>v*1e-06",
        "u248": "(v)=>v*0.001",
        "u250": "(v)=>v*1000",
        "u251": "(v)=>v*1000000",
        "u252": "(v)=>v*1000000000",
        "u253": "(v)=>v*8.27180612553028e-40",
        "u254": "(v)=>v*8.470329472543e-37",
        "u255": "(v)=>v*8.67361737988404e-34",
        "u256": "(v)=>v*8.88178419700125e-31",
        "u257": "(v)=>v*9.09494701772928e-28",
        "u258": "(v)=>v*9.31322574615479e-25",
        "u259": "(v)=>v*9.5367431640625e-22",
        "u260": "(v)=>v*9.765625e-19"
      },
      "description": "A femtobyte (fB) is an SI unit of data applying the femto‑ prefix (10^-15). One femtobyte equals 1e-15 bytes. The femto prefix denotes a factor of 10^-15, so 1 femtobyte equals 10^-15 bytes. Such extremely small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Femtobyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtobyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtobyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtobyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtobyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtobyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtobyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtobyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u250",
      "name": "attobyte",
      "shortName": "aB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-42",
        "u233": "(v)=>v*1e-39",
        "u234": "(v)=>v*1e-36",
        "u235": "(v)=>v*1e-33",
        "u236": "(v)=>v*1e-30",
        "u237": "(v)=>v*1e-27",
        "u238": "(v)=>v*1e-24",
        "u239": "(v)=>v*1e-21",
        "u240": "(v)=>v*1e-20",
        "u241": "(v)=>v*1e-19",
        "u242": "(v)=>v*1e-18",
        "u243": "(v)=>v*1e-17",
        "u244": "(v)=>v*1e-16",
        "u245": "(v)=>v*1e-15",
        "u246": "(v)=>v*1e-12",
        "u247": "(v)=>v*1e-09",
        "u248": "(v)=>v*1e-06",
        "u249": "(v)=>v*0.001",
        "u251": "(v)=>v*1000",
        "u252": "(v)=>v*1000000",
        "u253": "(v)=>v*8.27180612553028e-43",
        "u254": "(v)=>v*8.470329472543e-40",
        "u255": "(v)=>v*8.67361737988404e-37",
        "u256": "(v)=>v*8.88178419700125e-34",
        "u257": "(v)=>v*9.09494701772928e-31",
        "u258": "(v)=>v*9.31322574615479e-28",
        "u259": "(v)=>v*9.5367431640625e-25",
        "u260": "(v)=>v*9.765625e-22"
      },
      "description": "A attobyte (aB) is an SI unit of data applying the atto‑ prefix (10^-18). One attobyte equals 1e-18 bytes. The atto prefix denotes a factor of 10^-18, so 1 attobyte equals 10^-18 bytes. Such extremely small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Attobyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attobyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attobyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attobyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attobyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attobyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attobyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attobyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u251",
      "name": "zeptobyte",
      "shortName": "zB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-45",
        "u233": "(v)=>v*1e-42",
        "u234": "(v)=>v*1e-39",
        "u235": "(v)=>v*1e-36",
        "u236": "(v)=>v*1e-33",
        "u237": "(v)=>v*1e-30",
        "u238": "(v)=>v*1e-27",
        "u239": "(v)=>v*1e-24",
        "u240": "(v)=>v*1e-23",
        "u241": "(v)=>v*1e-22",
        "u242": "(v)=>v*1e-21",
        "u243": "(v)=>v*1e-20",
        "u244": "(v)=>v*1e-19",
        "u245": "(v)=>v*1e-18",
        "u246": "(v)=>v*1e-15",
        "u247": "(v)=>v*1e-12",
        "u248": "(v)=>v*1e-09",
        "u249": "(v)=>v*1e-06",
        "u250": "(v)=>v*0.001",
        "u252": "(v)=>v*1000",
        "u253": "(v)=>v*8.27180612553028e-46",
        "u254": "(v)=>v*8.470329472543e-43",
        "u255": "(v)=>v*8.67361737988403e-40",
        "u256": "(v)=>v*8.88178419700125e-37",
        "u257": "(v)=>v*9.09494701772928e-34",
        "u258": "(v)=>v*9.31322574615478e-31",
        "u259": "(v)=>v*9.5367431640625e-28",
        "u260": "(v)=>v*9.765625e-25"
      },
      "description": "A zeptobyte (zB) is an SI unit of data applying the zepto‑ prefix (10^-21). One zeptobyte equals 1e-21 bytes. The zepto prefix denotes a factor of 10^-21, so 1 zeptobyte equals 10^-21 bytes. Such extremely small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Zeptobyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptobyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptobyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptobyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptobyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptobyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptobyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptobyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u252",
      "name": "yoctobyte",
      "shortName": "yB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1e-48",
        "u233": "(v)=>v*1e-45",
        "u234": "(v)=>v*1e-42",
        "u235": "(v)=>v*1e-39",
        "u236": "(v)=>v*1e-36",
        "u237": "(v)=>v*1e-33",
        "u238": "(v)=>v*1e-30",
        "u239": "(v)=>v*1e-27",
        "u240": "(v)=>v*1e-26",
        "u241": "(v)=>v*1e-25",
        "u242": "(v)=>v*1e-24",
        "u243": "(v)=>v*1e-23",
        "u244": "(v)=>v*1e-22",
        "u245": "(v)=>v*1e-21",
        "u246": "(v)=>v*1e-18",
        "u247": "(v)=>v*1e-15",
        "u248": "(v)=>v*1e-12",
        "u249": "(v)=>v*1e-09",
        "u250": "(v)=>v*1e-06",
        "u251": "(v)=>v*0.001",
        "u253": "(v)=>v*8.27180612553028e-49",
        "u254": "(v)=>v*8.470329472543e-46",
        "u255": "(v)=>v*8.67361737988403e-43",
        "u256": "(v)=>v*8.88178419700125e-40",
        "u257": "(v)=>v*9.09494701772928e-37",
        "u258": "(v)=>v*9.31322574615478e-34",
        "u259": "(v)=>v*9.5367431640625e-31",
        "u260": "(v)=>v*9.765625e-28"
      },
      "description": "A yoctobyte (yB) is an SI unit of data applying the yocto‑ prefix (10^-24). One yoctobyte equals 1e-24 bytes. The yocto prefix denotes a factor of 10^-24, so 1 yoctobyte equals 10^-24 bytes. Such extremely small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Yoctobyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctobyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctobyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctobyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctobyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctobyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctobyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctobyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u253",
      "name": "yobibyte",
      "shortName": "YiB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1.20892581961463",
        "u233": "(v)=>v*1208.92581961463",
        "u234": "(v)=>v*1208925.81961463",
        "u235": "(v)=>v*1208925819.61463",
        "u236": "(v)=>v*1208925819614.63",
        "u237": "(v)=>v*1.20892581961463e+15",
        "u238": "(v)=>v*1.20892581961463e+18",
        "u239": "(v)=>v*1.20892581961463e+21",
        "u240": "(v)=>v*1.20892581961463e+22",
        "u241": "(v)=>v*1.20892581961463e+23",
        "u242": "(v)=>v*1.20892581961463e+24",
        "u243": "(v)=>v*1.20892581961463e+25",
        "u244": "(v)=>v*1.20892581961463e+26",
        "u245": "(v)=>v*1.20892581961463e+27",
        "u246": "(v)=>v*1.20892581961463e+30",
        "u247": "(v)=>v*1.20892581961463e+33",
        "u248": "(v)=>v*1.20892581961463e+36",
        "u249": "(v)=>v*1.20892581961463e+39",
        "u250": "(v)=>v*1.20892581961463e+42",
        "u251": "(v)=>v*1.20892581961463e+45",
        "u252": "(v)=>v*1.20892581961463e+48",
        "u254": "(v)=>v*1024",
        "u255": "(v)=>v*1048576",
        "u256": "(v)=>v*1073741824",
        "u257": "(v)=>v*1099511627776",
        "u258": "(v)=>v*1.12589990684262e+15",
        "u259": "(v)=>v*1.15292150460685e+18",
        "u260": "(v)=>v*1.18059162071741e+21"
      },
      "description": "A yobibyte (YiB) is a unit of data equal to 1.20892582e+24 bytes. Yobibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yobibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yobibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yobibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yobibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yobibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yobibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yobibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u254",
      "name": "zebibyte",
      "shortName": "ZiB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*0.00118059162071741",
        "u233": "(v)=>v*1.18059162071741",
        "u234": "(v)=>v*1180.59162071741",
        "u235": "(v)=>v*1180591.62071741",
        "u236": "(v)=>v*1180591620.71741",
        "u237": "(v)=>v*1180591620717.41",
        "u238": "(v)=>v*1.18059162071741e+15",
        "u239": "(v)=>v*1.18059162071741e+18",
        "u240": "(v)=>v*1.18059162071741e+19",
        "u241": "(v)=>v*1.18059162071741e+20",
        "u242": "(v)=>v*1.18059162071741e+21",
        "u243": "(v)=>v*1.18059162071741e+22",
        "u244": "(v)=>v*1.18059162071741e+23",
        "u245": "(v)=>v*1.18059162071741e+24",
        "u246": "(v)=>v*1.18059162071741e+27",
        "u247": "(v)=>v*1.18059162071741e+30",
        "u248": "(v)=>v*1.18059162071741e+33",
        "u249": "(v)=>v*1.18059162071741e+36",
        "u250": "(v)=>v*1.18059162071741e+39",
        "u251": "(v)=>v*1.18059162071741e+42",
        "u252": "(v)=>v*1.18059162071741e+45",
        "u253": "(v)=>v*0.0009765625",
        "u255": "(v)=>v*1024",
        "u256": "(v)=>v*1048576",
        "u257": "(v)=>v*1073741824",
        "u258": "(v)=>v*1099511627776",
        "u259": "(v)=>v*1.12589990684262e+15",
        "u260": "(v)=>v*1.15292150460685e+18"
      },
      "description": "A zebibyte (ZiB) is a unit of data equal to 1.180591621e+21 bytes. Zebibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zebibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zebibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zebibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zebibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zebibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zebibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zebibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u255",
      "name": "exbibyte",
      "shortName": "EiB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1.15292150460685e-06",
        "u233": "(v)=>v*0.00115292150460685",
        "u234": "(v)=>v*1.15292150460685",
        "u235": "(v)=>v*1152.92150460685",
        "u236": "(v)=>v*1152921.50460685",
        "u237": "(v)=>v*1152921504.60685",
        "u238": "(v)=>v*1152921504606.85",
        "u239": "(v)=>v*1.15292150460685e+15",
        "u240": "(v)=>v*1.15292150460685e+16",
        "u241": "(v)=>v*1.15292150460685e+17",
        "u242": "(v)=>v*1.15292150460685e+18",
        "u243": "(v)=>v*1.15292150460685e+19",
        "u244": "(v)=>v*1.15292150460685e+20",
        "u245": "(v)=>v*1.15292150460685e+21",
        "u246": "(v)=>v*1.15292150460685e+24",
        "u247": "(v)=>v*1.15292150460685e+27",
        "u248": "(v)=>v*1.15292150460685e+30",
        "u249": "(v)=>v*1.15292150460685e+33",
        "u250": "(v)=>v*1.15292150460685e+36",
        "u251": "(v)=>v*1.15292150460685e+39",
        "u252": "(v)=>v*1.15292150460685e+42",
        "u253": "(v)=>v*9.5367431640625e-07",
        "u254": "(v)=>v*0.0009765625",
        "u256": "(v)=>v*1024",
        "u257": "(v)=>v*1048576",
        "u258": "(v)=>v*1073741824",
        "u259": "(v)=>v*1099511627776",
        "u260": "(v)=>v*1.12589990684262e+15"
      },
      "description": "A exbibyte (EiB) is a unit of data equal to 1.152921505e+18 bytes. Exbibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exbibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exbibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exbibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exbibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exbibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exbibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exbibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u256",
      "name": "pebibyte",
      "shortName": "PiB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1.12589990684262e-09",
        "u233": "(v)=>v*1.12589990684262e-06",
        "u234": "(v)=>v*0.00112589990684262",
        "u235": "(v)=>v*1.12589990684262",
        "u236": "(v)=>v*1125.89990684262",
        "u237": "(v)=>v*1125899.90684262",
        "u238": "(v)=>v*1125899906.84262",
        "u239": "(v)=>v*1125899906842.62",
        "u240": "(v)=>v*11258999068426.2",
        "u241": "(v)=>v*112589990684262",
        "u242": "(v)=>v*1.12589990684262e+15",
        "u243": "(v)=>v*1.12589990684262e+16",
        "u244": "(v)=>v*1.12589990684262e+17",
        "u245": "(v)=>v*1.12589990684262e+18",
        "u246": "(v)=>v*1.12589990684262e+21",
        "u247": "(v)=>v*1.12589990684262e+24",
        "u248": "(v)=>v*1.12589990684262e+27",
        "u249": "(v)=>v*1.12589990684262e+30",
        "u250": "(v)=>v*1.12589990684262e+33",
        "u251": "(v)=>v*1.12589990684262e+36",
        "u252": "(v)=>v*1.12589990684262e+39",
        "u253": "(v)=>v*9.31322574615479e-10",
        "u254": "(v)=>v*9.5367431640625e-07",
        "u255": "(v)=>v*0.0009765625",
        "u257": "(v)=>v*1024",
        "u258": "(v)=>v*1048576",
        "u259": "(v)=>v*1073741824",
        "u260": "(v)=>v*1099511627776"
      },
      "description": "A pebibyte (PiB) is a unit of data equal to 1.125899907e+15 bytes. Pebibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of pebibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent pebibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, pebibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when pebibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding pebibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed pebibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of pebibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u257",
      "name": "tebibyte",
      "shortName": "TiB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1.099511627776e-12",
        "u233": "(v)=>v*1.099511627776e-09",
        "u234": "(v)=>v*1.099511627776e-06",
        "u235": "(v)=>v*0.001099511627776",
        "u236": "(v)=>v*1.099511627776",
        "u237": "(v)=>v*1099.511627776",
        "u238": "(v)=>v*1099511.627776",
        "u239": "(v)=>v*1099511627.776",
        "u240": "(v)=>v*10995116277.76",
        "u241": "(v)=>v*109951162777.6",
        "u242": "(v)=>v*1099511627776",
        "u243": "(v)=>v*10995116277760",
        "u244": "(v)=>v*109951162777600",
        "u245": "(v)=>v*1.099511627776e+15",
        "u246": "(v)=>v*1.099511627776e+18",
        "u247": "(v)=>v*1.099511627776e+21",
        "u248": "(v)=>v*1.099511627776e+24",
        "u249": "(v)=>v*1.099511627776e+27",
        "u250": "(v)=>v*1.099511627776e+30",
        "u251": "(v)=>v*1.099511627776e+33",
        "u252": "(v)=>v*1.099511627776e+36",
        "u253": "(v)=>v*9.09494701772928e-13",
        "u254": "(v)=>v*9.31322574615479e-10",
        "u255": "(v)=>v*9.5367431640625e-07",
        "u256": "(v)=>v*0.0009765625",
        "u258": "(v)=>v*1024",
        "u259": "(v)=>v*1048576",
        "u260": "(v)=>v*1073741824"
      },
      "description": "A tebibyte (TiB) is a unit of data equal to 1.099511628e+12 bytes. Tebibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of tebibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent tebibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, tebibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when tebibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding tebibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed tebibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of tebibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u258",
      "name": "gibibyte",
      "shortName": "GiB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1.073741824e-15",
        "u233": "(v)=>v*1.073741824e-12",
        "u234": "(v)=>v*1.073741824e-09",
        "u235": "(v)=>v*1.073741824e-06",
        "u236": "(v)=>v*0.001073741824",
        "u237": "(v)=>v*1.073741824",
        "u238": "(v)=>v*1073.741824",
        "u239": "(v)=>v*1073741.824",
        "u240": "(v)=>v*10737418.24",
        "u241": "(v)=>v*107374182.4",
        "u242": "(v)=>v*1073741824",
        "u243": "(v)=>v*10737418240",
        "u244": "(v)=>v*107374182400",
        "u245": "(v)=>v*1073741824000",
        "u246": "(v)=>v*1.073741824e+15",
        "u247": "(v)=>v*1.073741824e+18",
        "u248": "(v)=>v*1.073741824e+21",
        "u249": "(v)=>v*1.073741824e+24",
        "u250": "(v)=>v*1.073741824e+27",
        "u251": "(v)=>v*1.073741824e+30",
        "u252": "(v)=>v*1.073741824e+33",
        "u253": "(v)=>v*8.88178419700125e-16",
        "u254": "(v)=>v*9.09494701772928e-13",
        "u255": "(v)=>v*9.31322574615479e-10",
        "u256": "(v)=>v*9.5367431640625e-07",
        "u257": "(v)=>v*0.0009765625",
        "u259": "(v)=>v*1024",
        "u260": "(v)=>v*1048576"
      },
      "description": "A gibibyte (GiB) is a unit of data equal to 1073741824 bytes. Gibibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gibibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gibibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gibibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gibibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gibibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gibibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gibibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u259",
      "name": "mebibyte",
      "shortName": "MiB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1.048576e-18",
        "u233": "(v)=>v*1.048576e-15",
        "u234": "(v)=>v*1.048576e-12",
        "u235": "(v)=>v*1.048576e-09",
        "u236": "(v)=>v*1.048576e-06",
        "u237": "(v)=>v*0.001048576",
        "u238": "(v)=>v*1.048576",
        "u239": "(v)=>v*1048.576",
        "u240": "(v)=>v*10485.76",
        "u241": "(v)=>v*104857.6",
        "u242": "(v)=>v*1048576",
        "u243": "(v)=>v*10485760",
        "u244": "(v)=>v*104857600",
        "u245": "(v)=>v*1048576000",
        "u246": "(v)=>v*1048576000000",
        "u247": "(v)=>v*1.048576e+15",
        "u248": "(v)=>v*1.048576e+18",
        "u249": "(v)=>v*1.048576e+21",
        "u250": "(v)=>v*1.048576e+24",
        "u251": "(v)=>v*1.048576e+27",
        "u252": "(v)=>v*1.048576e+30",
        "u253": "(v)=>v*8.67361737988404e-19",
        "u254": "(v)=>v*8.88178419700125e-16",
        "u255": "(v)=>v*9.09494701772928e-13",
        "u256": "(v)=>v*9.31322574615479e-10",
        "u257": "(v)=>v*9.5367431640625e-07",
        "u258": "(v)=>v*0.0009765625",
        "u260": "(v)=>v*1024"
      },
      "description": "A mebibyte (MiB) is a unit of data equal to 1048576 bytes. Mebibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of mebibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent mebibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, mebibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when mebibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding mebibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed mebibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of mebibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u260",
      "name": "kibibyte",
      "shortName": "KiB",
      "categoryId": "c7",
      "conversions": {
        "u232": "(v)=>v*1.024e-21",
        "u233": "(v)=>v*1.024e-18",
        "u234": "(v)=>v*1.024e-15",
        "u235": "(v)=>v*1.024e-12",
        "u236": "(v)=>v*1.024e-09",
        "u237": "(v)=>v*1.024e-06",
        "u238": "(v)=>v*0.001024",
        "u239": "(v)=>v*1.024",
        "u240": "(v)=>v*10.24",
        "u241": "(v)=>v*102.4",
        "u242": "(v)=>v*1024",
        "u243": "(v)=>v*10240",
        "u244": "(v)=>v*102400",
        "u245": "(v)=>v*1024000",
        "u246": "(v)=>v*1024000000",
        "u247": "(v)=>v*1024000000000",
        "u248": "(v)=>v*1.024e+15",
        "u249": "(v)=>v*1.024e+18",
        "u250": "(v)=>v*1.024e+21",
        "u251": "(v)=>v*1.024e+24",
        "u252": "(v)=>v*1.024e+27",
        "u253": "(v)=>v*8.470329472543e-22",
        "u254": "(v)=>v*8.67361737988404e-19",
        "u255": "(v)=>v*8.88178419700125e-16",
        "u256": "(v)=>v*9.09494701772928e-13",
        "u257": "(v)=>v*9.31322574615479e-10",
        "u258": "(v)=>v*9.5367431640625e-07",
        "u259": "(v)=>v*0.0009765625"
      },
      "description": "A kibibyte (KiB) is a unit of data equal to 1024 bytes. Kibibyte belongs to the broader physical quantity of data. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kibibyte often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kibibyte as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kibibyte is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kibibyte values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kibibyte has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kibibyte metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kibibyte fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u262",
      "name": "yottasecond",
      "shortName": "Ys",
      "categoryId": "c25",
      "conversions": {
        "u263": "(v)=>v*1000",
        "u264": "(v)=>v*1000000",
        "u265": "(v)=>v*1000000000",
        "u266": "(v)=>v*1000000000000",
        "u267": "(v)=>v*1e+15",
        "u268": "(v)=>v*1e+18",
        "u269": "(v)=>v*1e+21",
        "u270": "(v)=>v*1e+22",
        "u271": "(v)=>v*1e+23",
        "u272": "(v)=>v*1e+24",
        "u273": "(v)=>v*1e+25",
        "u274": "(v)=>v*1e+26",
        "u275": "(v)=>v*1e+27",
        "u276": "(v)=>v*1e+30",
        "u277": "(v)=>v*1e+33",
        "u278": "(v)=>v*1e+36",
        "u279": "(v)=>v*1e+39",
        "u280": "(v)=>v*1e+42",
        "u281": "(v)=>v*1e+45",
        "u282": "(v)=>v*1e+48",
        "u500": "(v)=>v*1.66666666666667e+22",
        "u501": "(v)=>v*2.77777777777778e+20",
        "u502": "(v)=>v*1.15740740740741e+19",
        "u503": "(v)=>v*1.65343915343915e+18",
        "u504": "(v)=>v*3.16880878140289e+16"
      },
      "description": "A yottasecond (Ys) is an SI unit of time applying the yotta‑ prefix (10^24). One yottasecond equals 1e+24 seconds. The yotta prefix denotes a factor of 10^24, so 1 yottasecond equals 10^24 seconds. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottasecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottasecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottasecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottasecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottasecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottasecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottasecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottasecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u263",
      "name": "zettasecond",
      "shortName": "Zs",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*0.001",
        "u264": "(v)=>v*1000",
        "u265": "(v)=>v*1000000",
        "u266": "(v)=>v*1000000000",
        "u267": "(v)=>v*1000000000000",
        "u268": "(v)=>v*1e+15",
        "u269": "(v)=>v*1e+18",
        "u270": "(v)=>v*1e+19",
        "u271": "(v)=>v*1e+20",
        "u272": "(v)=>v*1e+21",
        "u273": "(v)=>v*1e+22",
        "u274": "(v)=>v*1e+23",
        "u275": "(v)=>v*1e+24",
        "u276": "(v)=>v*1e+27",
        "u277": "(v)=>v*1e+30",
        "u278": "(v)=>v*1e+33",
        "u279": "(v)=>v*1e+36",
        "u280": "(v)=>v*1e+39",
        "u281": "(v)=>v*1e+42",
        "u282": "(v)=>v*1e+45",
        "u500": "(v)=>v*1.66666666666667e+19",
        "u501": "(v)=>v*2.77777777777778e+17",
        "u502": "(v)=>v*1.15740740740741e+16",
        "u503": "(v)=>v*1.65343915343915e+15",
        "u504": "(v)=>v*31688087814028.9"
      },
      "description": "A zettasecond (Zs) is an SI unit of time applying the zetta‑ prefix (10^21). One zettasecond equals 1e+21 seconds. The zetta prefix denotes a factor of 10^21, so 1 zettasecond equals 10^21 seconds. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettasecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettasecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettasecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettasecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettasecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettasecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettasecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettasecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u264",
      "name": "exasecond",
      "shortName": "Es",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-06",
        "u263": "(v)=>v*0.001",
        "u265": "(v)=>v*1000",
        "u266": "(v)=>v*1000000",
        "u267": "(v)=>v*1000000000",
        "u268": "(v)=>v*1000000000000",
        "u269": "(v)=>v*1e+15",
        "u270": "(v)=>v*1e+16",
        "u271": "(v)=>v*1e+17",
        "u272": "(v)=>v*1e+18",
        "u273": "(v)=>v*1e+19",
        "u274": "(v)=>v*1e+20",
        "u275": "(v)=>v*1e+21",
        "u276": "(v)=>v*1e+24",
        "u277": "(v)=>v*1e+27",
        "u278": "(v)=>v*1e+30",
        "u279": "(v)=>v*1e+33",
        "u280": "(v)=>v*1e+36",
        "u281": "(v)=>v*1e+39",
        "u282": "(v)=>v*1e+42",
        "u500": "(v)=>v*1.66666666666667e+16",
        "u501": "(v)=>v*277777777777778",
        "u502": "(v)=>v*11574074074074.1",
        "u503": "(v)=>v*1653439153439.15",
        "u504": "(v)=>v*31688087814.0289"
      },
      "description": "A exasecond (Es) is an SI unit of time applying the exa‑ prefix (10^18). One exasecond equals 1e+18 seconds. The exa prefix denotes a factor of 10^18, so 1 exasecond equals 10^18 seconds. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exasecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exasecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exasecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exasecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exasecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exasecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exasecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exasecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u265",
      "name": "petasecond",
      "shortName": "Ps",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-09",
        "u263": "(v)=>v*1e-06",
        "u264": "(v)=>v*0.001",
        "u266": "(v)=>v*1000",
        "u267": "(v)=>v*1000000",
        "u268": "(v)=>v*1000000000",
        "u269": "(v)=>v*1000000000000",
        "u270": "(v)=>v*10000000000000",
        "u271": "(v)=>v*100000000000000",
        "u272": "(v)=>v*1e+15",
        "u273": "(v)=>v*1e+16",
        "u274": "(v)=>v*1e+17",
        "u275": "(v)=>v*1e+18",
        "u276": "(v)=>v*1e+21",
        "u277": "(v)=>v*1e+24",
        "u278": "(v)=>v*1e+27",
        "u279": "(v)=>v*1e+30",
        "u280": "(v)=>v*1e+33",
        "u281": "(v)=>v*1e+36",
        "u282": "(v)=>v*1e+39",
        "u500": "(v)=>v*16666666666666.7",
        "u501": "(v)=>v*277777777777.778",
        "u502": "(v)=>v*11574074074.0741",
        "u503": "(v)=>v*1653439153.43915",
        "u504": "(v)=>v*31688087.8140289"
      },
      "description": "A petasecond (Ps) is an SI unit of time applying the peta‑ prefix (10^15). One petasecond equals 1e+15 seconds. The peta prefix denotes a factor of 10^15, so 1 petasecond equals 10^15 seconds. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petasecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petasecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petasecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petasecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petasecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petasecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petasecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petasecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u266",
      "name": "terasecond",
      "shortName": "Ts",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-12",
        "u263": "(v)=>v*1e-09",
        "u264": "(v)=>v*1e-06",
        "u265": "(v)=>v*0.001",
        "u267": "(v)=>v*1000",
        "u268": "(v)=>v*1000000",
        "u269": "(v)=>v*1000000000",
        "u270": "(v)=>v*10000000000",
        "u271": "(v)=>v*100000000000",
        "u272": "(v)=>v*1000000000000",
        "u273": "(v)=>v*10000000000000",
        "u274": "(v)=>v*100000000000000",
        "u275": "(v)=>v*1e+15",
        "u276": "(v)=>v*1e+18",
        "u277": "(v)=>v*1e+21",
        "u278": "(v)=>v*1e+24",
        "u279": "(v)=>v*1e+27",
        "u280": "(v)=>v*1e+30",
        "u281": "(v)=>v*1e+33",
        "u282": "(v)=>v*1e+36",
        "u500": "(v)=>v*16666666666.6667",
        "u501": "(v)=>v*277777777.777778",
        "u502": "(v)=>v*11574074.0740741",
        "u503": "(v)=>v*1653439.15343915",
        "u504": "(v)=>v*31688.0878140289"
      },
      "description": "A terasecond (Ts) is an SI unit of time applying the tera‑ prefix (10^12). One terasecond equals 1e+12 seconds. The tera prefix denotes a factor of 10^12, so 1 terasecond equals 10^12 seconds. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Terasecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terasecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terasecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terasecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terasecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terasecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terasecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terasecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u267",
      "name": "gigasecond",
      "shortName": "Gs",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-15",
        "u263": "(v)=>v*1e-12",
        "u264": "(v)=>v*1e-09",
        "u265": "(v)=>v*1e-06",
        "u266": "(v)=>v*0.001",
        "u268": "(v)=>v*1000",
        "u269": "(v)=>v*1000000",
        "u270": "(v)=>v*10000000",
        "u271": "(v)=>v*100000000",
        "u272": "(v)=>v*1000000000",
        "u273": "(v)=>v*10000000000",
        "u274": "(v)=>v*100000000000",
        "u275": "(v)=>v*1000000000000",
        "u276": "(v)=>v*1e+15",
        "u277": "(v)=>v*1e+18",
        "u278": "(v)=>v*1e+21",
        "u279": "(v)=>v*1e+24",
        "u280": "(v)=>v*1e+27",
        "u281": "(v)=>v*1e+30",
        "u282": "(v)=>v*1e+33",
        "u500": "(v)=>v*16666666.6666667",
        "u501": "(v)=>v*277777.777777778",
        "u502": "(v)=>v*11574.0740740741",
        "u503": "(v)=>v*1653.43915343915",
        "u504": "(v)=>v*31.688087814029"
      },
      "description": "A gigasecond (Gs) is an SI unit of time applying the giga‑ prefix (10^9). One gigasecond equals 1000000000 seconds. The giga prefix denotes a factor of 10^9, so 1 gigasecond equals 10^9 seconds. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigasecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigasecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigasecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigasecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigasecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigasecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigasecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigasecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u268",
      "name": "megasecond",
      "shortName": "Ms",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-18",
        "u263": "(v)=>v*1e-15",
        "u264": "(v)=>v*1e-12",
        "u265": "(v)=>v*1e-09",
        "u266": "(v)=>v*1e-06",
        "u267": "(v)=>v*0.001",
        "u269": "(v)=>v*1000",
        "u270": "(v)=>v*10000",
        "u271": "(v)=>v*100000",
        "u272": "(v)=>v*1000000",
        "u273": "(v)=>v*10000000",
        "u274": "(v)=>v*100000000",
        "u275": "(v)=>v*1000000000",
        "u276": "(v)=>v*1000000000000",
        "u277": "(v)=>v*1e+15",
        "u278": "(v)=>v*1e+18",
        "u279": "(v)=>v*1e+21",
        "u280": "(v)=>v*1e+24",
        "u281": "(v)=>v*1e+27",
        "u282": "(v)=>v*1e+30",
        "u500": "(v)=>v*16666.6666666667",
        "u501": "(v)=>v*277.777777777778",
        "u502": "(v)=>v*11.5740740740741",
        "u503": "(v)=>v*1.65343915343915",
        "u504": "(v)=>v*0.031688087814029"
      },
      "description": "A megasecond (Ms) is an SI unit of time applying the mega‑ prefix (10^6). One megasecond equals 1000000 seconds. The mega prefix denotes a factor of 10^6, so 1 megasecond equals 10^6 seconds. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megasecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megasecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megasecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megasecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megasecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megasecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megasecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megasecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u269",
      "name": "kilosecond",
      "shortName": "ks",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-21",
        "u263": "(v)=>v*1e-18",
        "u264": "(v)=>v*1e-15",
        "u265": "(v)=>v*1e-12",
        "u266": "(v)=>v*1e-09",
        "u267": "(v)=>v*1e-06",
        "u268": "(v)=>v*0.001",
        "u270": "(v)=>v*10",
        "u271": "(v)=>v*100",
        "u272": "(v)=>v*1000",
        "u273": "(v)=>v*10000",
        "u274": "(v)=>v*100000",
        "u275": "(v)=>v*1000000",
        "u276": "(v)=>v*1000000000",
        "u277": "(v)=>v*1000000000000",
        "u278": "(v)=>v*1e+15",
        "u279": "(v)=>v*1e+18",
        "u280": "(v)=>v*1e+21",
        "u281": "(v)=>v*1e+24",
        "u282": "(v)=>v*1e+27",
        "u500": "(v)=>v*16.6666666666667",
        "u501": "(v)=>v*0.277777777777778",
        "u502": "(v)=>v*0.0115740740740741",
        "u503": "(v)=>v*0.00165343915343915",
        "u504": "(v)=>v*3.16880878140289e-05"
      },
      "description": "A kilosecond (ks) is an SI unit of time applying the kilo‑ prefix (10^3). One kilosecond equals 1000 seconds. The kilo prefix denotes a factor of 10^3, so 1 kilosecond equals 10^3 seconds. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilosecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilosecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilosecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilosecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilosecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilosecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilosecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilosecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u270",
      "name": "hectosecond",
      "shortName": "hs",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-22",
        "u263": "(v)=>v*1e-19",
        "u264": "(v)=>v*1e-16",
        "u265": "(v)=>v*1e-13",
        "u266": "(v)=>v*1e-10",
        "u267": "(v)=>v*1e-07",
        "u268": "(v)=>v*0.0001",
        "u269": "(v)=>v*0.1",
        "u271": "(v)=>v*10",
        "u272": "(v)=>v*100",
        "u273": "(v)=>v*1000",
        "u274": "(v)=>v*10000",
        "u275": "(v)=>v*100000",
        "u276": "(v)=>v*100000000",
        "u277": "(v)=>v*100000000000",
        "u278": "(v)=>v*100000000000000",
        "u279": "(v)=>v*1e+17",
        "u280": "(v)=>v*1e+20",
        "u281": "(v)=>v*1e+23",
        "u282": "(v)=>v*1e+26",
        "u500": "(v)=>v*1.66666666666667",
        "u501": "(v)=>v*0.0277777777777778",
        "u502": "(v)=>v*0.00115740740740741",
        "u503": "(v)=>v*0.000165343915343915",
        "u504": "(v)=>v*3.1688087814029e-06"
      },
      "description": "A hectosecond (hs) is an SI unit of time applying the hecto‑ prefix (10^2). One hectosecond equals 100 seconds. The hecto prefix denotes a factor of 10^2, so 1 hectosecond equals 10^2 seconds. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectosecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectosecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectosecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectosecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectosecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectosecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectosecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectosecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u271",
      "name": "decasecond",
      "shortName": "das",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-23",
        "u263": "(v)=>v*1e-20",
        "u264": "(v)=>v*1e-17",
        "u265": "(v)=>v*1e-14",
        "u266": "(v)=>v*1e-11",
        "u267": "(v)=>v*1e-08",
        "u268": "(v)=>v*1e-05",
        "u269": "(v)=>v*0.01",
        "u270": "(v)=>v*0.1",
        "u272": "(v)=>v*10",
        "u273": "(v)=>v*100",
        "u274": "(v)=>v*1000",
        "u275": "(v)=>v*10000",
        "u276": "(v)=>v*10000000",
        "u277": "(v)=>v*10000000000",
        "u278": "(v)=>v*10000000000000",
        "u279": "(v)=>v*1e+16",
        "u280": "(v)=>v*1e+19",
        "u281": "(v)=>v*1e+22",
        "u282": "(v)=>v*1e+25",
        "u500": "(v)=>v*0.166666666666667",
        "u501": "(v)=>v*0.00277777777777778",
        "u502": "(v)=>v*0.000115740740740741",
        "u503": "(v)=>v*1.65343915343915e-05",
        "u504": "(v)=>v*3.16880878140289e-07"
      },
      "description": "A decasecond (das) is an SI unit of time applying the deca‑ prefix (10^1). One decasecond equals 10 seconds. The deca prefix denotes a factor of 10^1, so 1 decasecond equals 10^1 seconds. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decasecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decasecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decasecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decasecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decasecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decasecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decasecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decasecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u272",
      "name": "second",
      "shortName": "s",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-24",
        "u263": "(v)=>v*1e-21",
        "u264": "(v)=>v*1e-18",
        "u265": "(v)=>v*1e-15",
        "u266": "(v)=>v*1e-12",
        "u267": "(v)=>v*1e-09",
        "u268": "(v)=>v*1e-06",
        "u269": "(v)=>v*0.001",
        "u270": "(v)=>v*0.01",
        "u271": "(v)=>v*0.1",
        "u273": "(v)=>v*10",
        "u274": "(v)=>v*100",
        "u275": "(v)=>v*1000",
        "u276": "(v)=>v*1000000",
        "u277": "(v)=>v*1000000000",
        "u278": "(v)=>v*1000000000000",
        "u279": "(v)=>v*1e+15",
        "u280": "(v)=>v*1e+18",
        "u281": "(v)=>v*1e+21",
        "u282": "(v)=>v*1e+24",
        "u500": "(v)=>v*0.0166666666666667",
        "u501": "(v)=>v*0.000277777777777778",
        "u502": "(v)=>v*1.15740740740741e-05",
        "u503": "(v)=>v*1.65343915343915e-06",
        "u504": "(v)=>v*3.16880878140289e-08"
      },
      "description": "The second (s) is the SI base unit of time, defined via the caesium‑133 ground‑state hyperfine transition frequency (9 192 631 770 Hz). Second belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-base",
        "metric"
      ]
    },
    {
      "id": "u273",
      "name": "decisecond",
      "shortName": "ds",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-25",
        "u263": "(v)=>v*1e-22",
        "u264": "(v)=>v*1e-19",
        "u265": "(v)=>v*1e-16",
        "u266": "(v)=>v*1e-13",
        "u267": "(v)=>v*1e-10",
        "u268": "(v)=>v*1e-07",
        "u269": "(v)=>v*0.0001",
        "u270": "(v)=>v*0.001",
        "u271": "(v)=>v*0.01",
        "u272": "(v)=>v*0.1",
        "u274": "(v)=>v*10",
        "u275": "(v)=>v*100",
        "u276": "(v)=>v*100000",
        "u277": "(v)=>v*100000000",
        "u278": "(v)=>v*100000000000",
        "u279": "(v)=>v*100000000000000",
        "u280": "(v)=>v*1e+17",
        "u281": "(v)=>v*1e+20",
        "u282": "(v)=>v*1e+23",
        "u500": "(v)=>v*0.00166666666666667",
        "u501": "(v)=>v*2.77777777777778e-05",
        "u502": "(v)=>v*1.15740740740741e-06",
        "u503": "(v)=>v*1.65343915343915e-07",
        "u504": "(v)=>v*3.1688087814029e-09"
      },
      "description": "A decisecond (ds) is an SI unit of time applying the deci‑ prefix (10^-1). One decisecond equals 0.1 seconds. The deci prefix denotes a factor of 10^-1, so 1 decisecond equals 10^-1 seconds. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decisecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decisecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decisecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decisecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decisecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decisecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decisecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decisecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u274",
      "name": "centisecond",
      "shortName": "cs",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-26",
        "u263": "(v)=>v*1e-23",
        "u264": "(v)=>v*1e-20",
        "u265": "(v)=>v*1e-17",
        "u266": "(v)=>v*1e-14",
        "u267": "(v)=>v*1e-11",
        "u268": "(v)=>v*1e-08",
        "u269": "(v)=>v*1e-05",
        "u270": "(v)=>v*0.0001",
        "u271": "(v)=>v*0.001",
        "u272": "(v)=>v*0.01",
        "u273": "(v)=>v*0.1",
        "u275": "(v)=>v*10",
        "u276": "(v)=>v*10000",
        "u277": "(v)=>v*10000000",
        "u278": "(v)=>v*10000000000",
        "u279": "(v)=>v*10000000000000",
        "u280": "(v)=>v*1e+16",
        "u281": "(v)=>v*1e+19",
        "u282": "(v)=>v*1e+22",
        "u500": "(v)=>v*0.000166666666666667",
        "u501": "(v)=>v*2.77777777777778e-06",
        "u502": "(v)=>v*1.15740740740741e-07",
        "u503": "(v)=>v*1.65343915343915e-08",
        "u504": "(v)=>v*3.1688087814029e-10"
      },
      "description": "A centisecond (cs) is an SI unit of time applying the centi‑ prefix (10^-2). One centisecond equals 0.01 seconds. The centi prefix denotes a factor of 10^-2, so 1 centisecond equals 10^-2 seconds. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centisecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centisecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centisecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centisecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centisecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centisecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centisecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centisecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u275",
      "name": "millisecond",
      "shortName": "ms",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-27",
        "u263": "(v)=>v*1e-24",
        "u264": "(v)=>v*1e-21",
        "u265": "(v)=>v*1e-18",
        "u266": "(v)=>v*1e-15",
        "u267": "(v)=>v*1e-12",
        "u268": "(v)=>v*1e-09",
        "u269": "(v)=>v*1e-06",
        "u270": "(v)=>v*1e-05",
        "u271": "(v)=>v*0.0001",
        "u272": "(v)=>v*0.001",
        "u273": "(v)=>v*0.01",
        "u274": "(v)=>v*0.1",
        "u276": "(v)=>v*1000",
        "u277": "(v)=>v*1000000",
        "u278": "(v)=>v*1000000000",
        "u279": "(v)=>v*1000000000000",
        "u280": "(v)=>v*1e+15",
        "u281": "(v)=>v*1e+18",
        "u282": "(v)=>v*1e+21",
        "u500": "(v)=>v*1.66666666666667e-05",
        "u501": "(v)=>v*2.77777777777778e-07",
        "u502": "(v)=>v*1.15740740740741e-08",
        "u503": "(v)=>v*1.65343915343915e-09",
        "u504": "(v)=>v*3.16880878140289e-11"
      },
      "description": "A millisecond (ms) is an SI unit of time applying the milli‑ prefix (10^-3). One millisecond equals 0.001 seconds. The milli prefix denotes a factor of 10^-3, so 1 millisecond equals 10^-3 seconds. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millisecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millisecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millisecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millisecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millisecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millisecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millisecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millisecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u276",
      "name": "microsecond",
      "shortName": "μs",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-30",
        "u263": "(v)=>v*1e-27",
        "u264": "(v)=>v*1e-24",
        "u265": "(v)=>v*1e-21",
        "u266": "(v)=>v*1e-18",
        "u267": "(v)=>v*1e-15",
        "u268": "(v)=>v*1e-12",
        "u269": "(v)=>v*1e-09",
        "u270": "(v)=>v*1e-08",
        "u271": "(v)=>v*1e-07",
        "u272": "(v)=>v*1e-06",
        "u273": "(v)=>v*1e-05",
        "u274": "(v)=>v*0.0001",
        "u275": "(v)=>v*0.001",
        "u277": "(v)=>v*1000",
        "u278": "(v)=>v*1000000",
        "u279": "(v)=>v*1000000000",
        "u280": "(v)=>v*1000000000000",
        "u281": "(v)=>v*1e+15",
        "u282": "(v)=>v*1e+18",
        "u500": "(v)=>v*1.66666666666667e-08",
        "u501": "(v)=>v*2.77777777777778e-10",
        "u502": "(v)=>v*1.15740740740741e-11",
        "u503": "(v)=>v*1.65343915343915e-12",
        "u504": "(v)=>v*3.16880878140289e-14"
      },
      "description": "A microsecond (μs) is an SI unit of time applying the micro‑ prefix (10^-6). One microsecond equals 1e-06 seconds. The micro prefix denotes a factor of 10^-6, so 1 microsecond equals 10^-6 seconds. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microsecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microsecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microsecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microsecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microsecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microsecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microsecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microsecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u277",
      "name": "nanosecond",
      "shortName": "ns",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-33",
        "u263": "(v)=>v*1e-30",
        "u264": "(v)=>v*1e-27",
        "u265": "(v)=>v*1e-24",
        "u266": "(v)=>v*1e-21",
        "u267": "(v)=>v*1e-18",
        "u268": "(v)=>v*1e-15",
        "u269": "(v)=>v*1e-12",
        "u270": "(v)=>v*1e-11",
        "u271": "(v)=>v*1e-10",
        "u272": "(v)=>v*1e-09",
        "u273": "(v)=>v*1e-08",
        "u274": "(v)=>v*1e-07",
        "u275": "(v)=>v*1e-06",
        "u276": "(v)=>v*0.001",
        "u278": "(v)=>v*1000",
        "u279": "(v)=>v*1000000",
        "u280": "(v)=>v*1000000000",
        "u281": "(v)=>v*1000000000000",
        "u282": "(v)=>v*1e+15",
        "u500": "(v)=>v*1.66666666666667e-11",
        "u501": "(v)=>v*2.77777777777778e-13",
        "u502": "(v)=>v*1.15740740740741e-14",
        "u503": "(v)=>v*1.65343915343915e-15",
        "u504": "(v)=>v*3.1688087814029e-17"
      },
      "description": "A nanosecond (ns) is an SI unit of time applying the nano‑ prefix (10^-9). One nanosecond equals 1e-09 seconds. The nano prefix denotes a factor of 10^-9, so 1 nanosecond equals 10^-9 seconds. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanosecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanosecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanosecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanosecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanosecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanosecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanosecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanosecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u278",
      "name": "picosecond",
      "shortName": "ps",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-36",
        "u263": "(v)=>v*1e-33",
        "u264": "(v)=>v*1e-30",
        "u265": "(v)=>v*1e-27",
        "u266": "(v)=>v*1e-24",
        "u267": "(v)=>v*1e-21",
        "u268": "(v)=>v*1e-18",
        "u269": "(v)=>v*1e-15",
        "u270": "(v)=>v*1e-14",
        "u271": "(v)=>v*1e-13",
        "u272": "(v)=>v*1e-12",
        "u273": "(v)=>v*1e-11",
        "u274": "(v)=>v*1e-10",
        "u275": "(v)=>v*1e-09",
        "u276": "(v)=>v*1e-06",
        "u277": "(v)=>v*0.001",
        "u279": "(v)=>v*1000",
        "u280": "(v)=>v*1000000",
        "u281": "(v)=>v*1000000000",
        "u282": "(v)=>v*1000000000000",
        "u500": "(v)=>v*1.66666666666667e-14",
        "u501": "(v)=>v*2.77777777777778e-16",
        "u502": "(v)=>v*1.15740740740741e-17",
        "u503": "(v)=>v*1.65343915343915e-18",
        "u504": "(v)=>v*3.1688087814029e-20"
      },
      "description": "A picosecond (ps) is an SI unit of time applying the pico‑ prefix (10^-12). One picosecond equals 1e-12 seconds. The pico prefix denotes a factor of 10^-12, so 1 picosecond equals 10^-12 seconds. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picosecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picosecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picosecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picosecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picosecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picosecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picosecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picosecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u279",
      "name": "femtosecond",
      "shortName": "fs",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-39",
        "u263": "(v)=>v*1e-36",
        "u264": "(v)=>v*1e-33",
        "u265": "(v)=>v*1e-30",
        "u266": "(v)=>v*1e-27",
        "u267": "(v)=>v*1e-24",
        "u268": "(v)=>v*1e-21",
        "u269": "(v)=>v*1e-18",
        "u270": "(v)=>v*1e-17",
        "u271": "(v)=>v*1e-16",
        "u272": "(v)=>v*1e-15",
        "u273": "(v)=>v*1e-14",
        "u274": "(v)=>v*1e-13",
        "u275": "(v)=>v*1e-12",
        "u276": "(v)=>v*1e-09",
        "u277": "(v)=>v*1e-06",
        "u278": "(v)=>v*0.001",
        "u280": "(v)=>v*1000",
        "u281": "(v)=>v*1000000",
        "u282": "(v)=>v*1000000000",
        "u500": "(v)=>v*1.66666666666667e-17",
        "u501": "(v)=>v*2.77777777777778e-19",
        "u502": "(v)=>v*1.15740740740741e-20",
        "u503": "(v)=>v*1.65343915343915e-21",
        "u504": "(v)=>v*3.16880878140289e-23"
      },
      "description": "A femtosecond (fs) is an SI unit of time applying the femto‑ prefix (10^-15). One femtosecond equals 1e-15 seconds. The femto prefix denotes a factor of 10^-15, so 1 femtosecond equals 10^-15 seconds. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtosecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtosecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtosecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtosecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtosecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtosecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtosecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtosecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u280",
      "name": "attosecond",
      "shortName": "as",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-42",
        "u263": "(v)=>v*1e-39",
        "u264": "(v)=>v*1e-36",
        "u265": "(v)=>v*1e-33",
        "u266": "(v)=>v*1e-30",
        "u267": "(v)=>v*1e-27",
        "u268": "(v)=>v*1e-24",
        "u269": "(v)=>v*1e-21",
        "u270": "(v)=>v*1e-20",
        "u271": "(v)=>v*1e-19",
        "u272": "(v)=>v*1e-18",
        "u273": "(v)=>v*1e-17",
        "u274": "(v)=>v*1e-16",
        "u275": "(v)=>v*1e-15",
        "u276": "(v)=>v*1e-12",
        "u277": "(v)=>v*1e-09",
        "u278": "(v)=>v*1e-06",
        "u279": "(v)=>v*0.001",
        "u281": "(v)=>v*1000",
        "u282": "(v)=>v*1000000",
        "u500": "(v)=>v*1.66666666666667e-20",
        "u501": "(v)=>v*2.77777777777778e-22",
        "u502": "(v)=>v*1.15740740740741e-23",
        "u503": "(v)=>v*1.65343915343915e-24",
        "u504": "(v)=>v*3.1688087814029e-26"
      },
      "description": "A attosecond (as) is an SI unit of time applying the atto‑ prefix (10^-18). One attosecond equals 1e-18 seconds. The atto prefix denotes a factor of 10^-18, so 1 attosecond equals 10^-18 seconds. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attosecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attosecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attosecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attosecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attosecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attosecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attosecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attosecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u281",
      "name": "zeptosecond",
      "shortName": "zs",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-45",
        "u263": "(v)=>v*1e-42",
        "u264": "(v)=>v*1e-39",
        "u265": "(v)=>v*1e-36",
        "u266": "(v)=>v*1e-33",
        "u267": "(v)=>v*1e-30",
        "u268": "(v)=>v*1e-27",
        "u269": "(v)=>v*1e-24",
        "u270": "(v)=>v*1e-23",
        "u271": "(v)=>v*1e-22",
        "u272": "(v)=>v*1e-21",
        "u273": "(v)=>v*1e-20",
        "u274": "(v)=>v*1e-19",
        "u275": "(v)=>v*1e-18",
        "u276": "(v)=>v*1e-15",
        "u277": "(v)=>v*1e-12",
        "u278": "(v)=>v*1e-09",
        "u279": "(v)=>v*1e-06",
        "u280": "(v)=>v*0.001",
        "u282": "(v)=>v*1000",
        "u500": "(v)=>v*1.66666666666667e-23",
        "u501": "(v)=>v*2.77777777777778e-25",
        "u502": "(v)=>v*1.15740740740741e-26",
        "u503": "(v)=>v*1.65343915343915e-27",
        "u504": "(v)=>v*3.16880878140289e-29"
      },
      "description": "A zeptosecond (zs) is an SI unit of time applying the zepto‑ prefix (10^-21). One zeptosecond equals 1e-21 seconds. The zepto prefix denotes a factor of 10^-21, so 1 zeptosecond equals 10^-21 seconds. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptosecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptosecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptosecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptosecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptosecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptosecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptosecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptosecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u282",
      "name": "yoctosecond",
      "shortName": "ys",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*1e-48",
        "u263": "(v)=>v*1e-45",
        "u264": "(v)=>v*1e-42",
        "u265": "(v)=>v*1e-39",
        "u266": "(v)=>v*1e-36",
        "u267": "(v)=>v*1e-33",
        "u268": "(v)=>v*1e-30",
        "u269": "(v)=>v*1e-27",
        "u270": "(v)=>v*1e-26",
        "u271": "(v)=>v*1e-25",
        "u272": "(v)=>v*1e-24",
        "u273": "(v)=>v*1e-23",
        "u274": "(v)=>v*1e-22",
        "u275": "(v)=>v*1e-21",
        "u276": "(v)=>v*1e-18",
        "u277": "(v)=>v*1e-15",
        "u278": "(v)=>v*1e-12",
        "u279": "(v)=>v*1e-09",
        "u280": "(v)=>v*1e-06",
        "u281": "(v)=>v*0.001",
        "u500": "(v)=>v*1.66666666666667e-26",
        "u501": "(v)=>v*2.77777777777778e-28",
        "u502": "(v)=>v*1.15740740740741e-29",
        "u503": "(v)=>v*1.65343915343915e-30",
        "u504": "(v)=>v*3.16880878140289e-32"
      },
      "description": "A yoctosecond (ys) is an SI unit of time applying the yocto‑ prefix (10^-24). One yoctosecond equals 1e-24 seconds. The yocto prefix denotes a factor of 10^-24, so 1 yoctosecond equals 10^-24 seconds. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctosecond belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctosecond often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctosecond as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctosecond is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctosecond values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctosecond has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctosecond metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctosecond fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u283",
      "name": "yottanewton",
      "shortName": "YN",
      "categoryId": "c11",
      "conversions": {
        "u284": "(v)=>v*1000",
        "u285": "(v)=>v*1000000",
        "u286": "(v)=>v*1000000000",
        "u287": "(v)=>v*1000000000000",
        "u288": "(v)=>v*1e+15",
        "u289": "(v)=>v*1e+18",
        "u290": "(v)=>v*1e+21",
        "u291": "(v)=>v*1e+22",
        "u292": "(v)=>v*1e+23",
        "u293": "(v)=>v*1e+24",
        "u294": "(v)=>v*1e+25",
        "u295": "(v)=>v*1e+26",
        "u296": "(v)=>v*1e+27",
        "u297": "(v)=>v*1e+30",
        "u298": "(v)=>v*1e+33",
        "u299": "(v)=>v*1e+36",
        "u300": "(v)=>v*1e+39",
        "u301": "(v)=>v*1e+42",
        "u302": "(v)=>v*1e+45",
        "u303": "(v)=>v*1e+48"
      },
      "description": "A yottanewton (YN) is an SI unit of force applying the yotta‑ prefix (10^24). One yottanewton equals 1e+24 newtons. The yotta prefix denotes a factor of 10^24, so 1 yottanewton equals 10^24 newtons. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottanewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottanewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottanewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottanewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottanewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottanewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottanewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottanewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u284",
      "name": "zettanewton",
      "shortName": "ZN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*0.001",
        "u285": "(v)=>v*1000",
        "u286": "(v)=>v*1000000",
        "u287": "(v)=>v*1000000000",
        "u288": "(v)=>v*1000000000000",
        "u289": "(v)=>v*1e+15",
        "u290": "(v)=>v*1e+18",
        "u291": "(v)=>v*1e+19",
        "u292": "(v)=>v*1e+20",
        "u293": "(v)=>v*1e+21",
        "u294": "(v)=>v*1e+22",
        "u295": "(v)=>v*1e+23",
        "u296": "(v)=>v*1e+24",
        "u297": "(v)=>v*1e+27",
        "u298": "(v)=>v*1e+30",
        "u299": "(v)=>v*1e+33",
        "u300": "(v)=>v*1e+36",
        "u301": "(v)=>v*1e+39",
        "u302": "(v)=>v*1e+42",
        "u303": "(v)=>v*1e+45"
      },
      "description": "A zettanewton (ZN) is an SI unit of force applying the zetta‑ prefix (10^21). One zettanewton equals 1e+21 newtons. The zetta prefix denotes a factor of 10^21, so 1 zettanewton equals 10^21 newtons. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettanewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettanewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettanewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettanewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettanewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettanewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettanewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettanewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u285",
      "name": "exanewton",
      "shortName": "EN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-06",
        "u284": "(v)=>v*0.001",
        "u286": "(v)=>v*1000",
        "u287": "(v)=>v*1000000",
        "u288": "(v)=>v*1000000000",
        "u289": "(v)=>v*1000000000000",
        "u290": "(v)=>v*1e+15",
        "u291": "(v)=>v*1e+16",
        "u292": "(v)=>v*1e+17",
        "u293": "(v)=>v*1e+18",
        "u294": "(v)=>v*1e+19",
        "u295": "(v)=>v*1e+20",
        "u296": "(v)=>v*1e+21",
        "u297": "(v)=>v*1e+24",
        "u298": "(v)=>v*1e+27",
        "u299": "(v)=>v*1e+30",
        "u300": "(v)=>v*1e+33",
        "u301": "(v)=>v*1e+36",
        "u302": "(v)=>v*1e+39",
        "u303": "(v)=>v*1e+42"
      },
      "description": "A exanewton (EN) is an SI unit of force applying the exa‑ prefix (10^18). One exanewton equals 1e+18 newtons. The exa prefix denotes a factor of 10^18, so 1 exanewton equals 10^18 newtons. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exanewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exanewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exanewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exanewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exanewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exanewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exanewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exanewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u286",
      "name": "petanewton",
      "shortName": "PN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-09",
        "u284": "(v)=>v*1e-06",
        "u285": "(v)=>v*0.001",
        "u287": "(v)=>v*1000",
        "u288": "(v)=>v*1000000",
        "u289": "(v)=>v*1000000000",
        "u290": "(v)=>v*1000000000000",
        "u291": "(v)=>v*10000000000000",
        "u292": "(v)=>v*100000000000000",
        "u293": "(v)=>v*1e+15",
        "u294": "(v)=>v*1e+16",
        "u295": "(v)=>v*1e+17",
        "u296": "(v)=>v*1e+18",
        "u297": "(v)=>v*1e+21",
        "u298": "(v)=>v*1e+24",
        "u299": "(v)=>v*1e+27",
        "u300": "(v)=>v*1e+30",
        "u301": "(v)=>v*1e+33",
        "u302": "(v)=>v*1e+36",
        "u303": "(v)=>v*1e+39"
      },
      "description": "A petanewton (PN) is an SI unit of force applying the peta‑ prefix (10^15). One petanewton equals 1e+15 newtons. The peta prefix denotes a factor of 10^15, so 1 petanewton equals 10^15 newtons. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petanewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petanewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petanewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petanewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petanewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petanewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petanewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petanewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u287",
      "name": "teranewton",
      "shortName": "TN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-12",
        "u284": "(v)=>v*1e-09",
        "u285": "(v)=>v*1e-06",
        "u286": "(v)=>v*0.001",
        "u288": "(v)=>v*1000",
        "u289": "(v)=>v*1000000",
        "u290": "(v)=>v*1000000000",
        "u291": "(v)=>v*10000000000",
        "u292": "(v)=>v*100000000000",
        "u293": "(v)=>v*1000000000000",
        "u294": "(v)=>v*10000000000000",
        "u295": "(v)=>v*100000000000000",
        "u296": "(v)=>v*1e+15",
        "u297": "(v)=>v*1e+18",
        "u298": "(v)=>v*1e+21",
        "u299": "(v)=>v*1e+24",
        "u300": "(v)=>v*1e+27",
        "u301": "(v)=>v*1e+30",
        "u302": "(v)=>v*1e+33",
        "u303": "(v)=>v*1e+36"
      },
      "description": "A teranewton (TN) is an SI unit of force applying the tera‑ prefix (10^12). One teranewton equals 1e+12 newtons. The tera prefix denotes a factor of 10^12, so 1 teranewton equals 10^12 newtons. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Teranewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teranewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teranewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teranewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teranewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teranewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teranewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teranewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u288",
      "name": "giganewton",
      "shortName": "GN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-15",
        "u284": "(v)=>v*1e-12",
        "u285": "(v)=>v*1e-09",
        "u286": "(v)=>v*1e-06",
        "u287": "(v)=>v*0.001",
        "u289": "(v)=>v*1000",
        "u290": "(v)=>v*1000000",
        "u291": "(v)=>v*10000000",
        "u292": "(v)=>v*100000000",
        "u293": "(v)=>v*1000000000",
        "u294": "(v)=>v*10000000000",
        "u295": "(v)=>v*100000000000",
        "u296": "(v)=>v*1000000000000",
        "u297": "(v)=>v*1e+15",
        "u298": "(v)=>v*1e+18",
        "u299": "(v)=>v*1e+21",
        "u300": "(v)=>v*1e+24",
        "u301": "(v)=>v*1e+27",
        "u302": "(v)=>v*1e+30",
        "u303": "(v)=>v*1e+33"
      },
      "description": "A giganewton (GN) is an SI unit of force applying the giga‑ prefix (10^9). One giganewton equals 1000000000 newtons. The giga prefix denotes a factor of 10^9, so 1 giganewton equals 10^9 newtons. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Giganewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of giganewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent giganewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, giganewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when giganewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding giganewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed giganewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of giganewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u289",
      "name": "meganewton",
      "shortName": "MN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-18",
        "u284": "(v)=>v*1e-15",
        "u285": "(v)=>v*1e-12",
        "u286": "(v)=>v*1e-09",
        "u287": "(v)=>v*1e-06",
        "u288": "(v)=>v*0.001",
        "u290": "(v)=>v*1000",
        "u291": "(v)=>v*10000",
        "u292": "(v)=>v*100000",
        "u293": "(v)=>v*1000000",
        "u294": "(v)=>v*10000000",
        "u295": "(v)=>v*100000000",
        "u296": "(v)=>v*1000000000",
        "u297": "(v)=>v*1000000000000",
        "u298": "(v)=>v*1e+15",
        "u299": "(v)=>v*1e+18",
        "u300": "(v)=>v*1e+21",
        "u301": "(v)=>v*1e+24",
        "u302": "(v)=>v*1e+27",
        "u303": "(v)=>v*1e+30"
      },
      "description": "A meganewton (MN) is an SI unit of force applying the mega‑ prefix (10^6). One meganewton equals 1000000 newtons. The mega prefix denotes a factor of 10^6, so 1 meganewton equals 10^6 newtons. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Meganewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of meganewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent meganewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, meganewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when meganewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding meganewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed meganewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of meganewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u290",
      "name": "kilonewton",
      "shortName": "kN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-21",
        "u284": "(v)=>v*1e-18",
        "u285": "(v)=>v*1e-15",
        "u286": "(v)=>v*1e-12",
        "u287": "(v)=>v*1e-09",
        "u288": "(v)=>v*1e-06",
        "u289": "(v)=>v*0.001",
        "u291": "(v)=>v*10",
        "u292": "(v)=>v*100",
        "u293": "(v)=>v*1000",
        "u294": "(v)=>v*10000",
        "u295": "(v)=>v*100000",
        "u296": "(v)=>v*1000000",
        "u297": "(v)=>v*1000000000",
        "u298": "(v)=>v*1000000000000",
        "u299": "(v)=>v*1e+15",
        "u300": "(v)=>v*1e+18",
        "u301": "(v)=>v*1e+21",
        "u302": "(v)=>v*1e+24",
        "u303": "(v)=>v*1e+27"
      },
      "description": "A kilonewton (kN) is an SI unit of force applying the kilo‑ prefix (10^3). One kilonewton equals 1000 newtons. The kilo prefix denotes a factor of 10^3, so 1 kilonewton equals 10^3 newtons. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilonewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilonewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilonewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilonewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilonewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilonewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilonewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilonewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u291",
      "name": "hectonewton",
      "shortName": "hN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-22",
        "u284": "(v)=>v*1e-19",
        "u285": "(v)=>v*1e-16",
        "u286": "(v)=>v*1e-13",
        "u287": "(v)=>v*1e-10",
        "u288": "(v)=>v*1e-07",
        "u289": "(v)=>v*0.0001",
        "u290": "(v)=>v*0.1",
        "u292": "(v)=>v*10",
        "u293": "(v)=>v*100",
        "u294": "(v)=>v*1000",
        "u295": "(v)=>v*10000",
        "u296": "(v)=>v*100000",
        "u297": "(v)=>v*100000000",
        "u298": "(v)=>v*100000000000",
        "u299": "(v)=>v*100000000000000",
        "u300": "(v)=>v*1e+17",
        "u301": "(v)=>v*1e+20",
        "u302": "(v)=>v*1e+23",
        "u303": "(v)=>v*1e+26"
      },
      "description": "A hectonewton (hN) is an SI unit of force applying the hecto‑ prefix (10^2). One hectonewton equals 100 newtons. The hecto prefix denotes a factor of 10^2, so 1 hectonewton equals 10^2 newtons. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectonewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectonewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectonewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectonewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectonewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectonewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectonewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectonewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u292",
      "name": "decanewton",
      "shortName": "daN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-23",
        "u284": "(v)=>v*1e-20",
        "u285": "(v)=>v*1e-17",
        "u286": "(v)=>v*1e-14",
        "u287": "(v)=>v*1e-11",
        "u288": "(v)=>v*1e-08",
        "u289": "(v)=>v*1e-05",
        "u290": "(v)=>v*0.01",
        "u291": "(v)=>v*0.1",
        "u293": "(v)=>v*10",
        "u294": "(v)=>v*100",
        "u295": "(v)=>v*1000",
        "u296": "(v)=>v*10000",
        "u297": "(v)=>v*10000000",
        "u298": "(v)=>v*10000000000",
        "u299": "(v)=>v*10000000000000",
        "u300": "(v)=>v*1e+16",
        "u301": "(v)=>v*1e+19",
        "u302": "(v)=>v*1e+22",
        "u303": "(v)=>v*1e+25"
      },
      "description": "A decanewton (daN) is an SI unit of force applying the deca‑ prefix (10^1). One decanewton equals 10 newtons. The deca prefix denotes a factor of 10^1, so 1 decanewton equals 10^1 newtons. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decanewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decanewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decanewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decanewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decanewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decanewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decanewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decanewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u293",
      "name": "newton",
      "shortName": "N",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-24",
        "u284": "(v)=>v*1e-21",
        "u285": "(v)=>v*1e-18",
        "u286": "(v)=>v*1e-15",
        "u287": "(v)=>v*1e-12",
        "u288": "(v)=>v*1e-09",
        "u289": "(v)=>v*1e-06",
        "u290": "(v)=>v*0.001",
        "u291": "(v)=>v*0.01",
        "u292": "(v)=>v*0.1",
        "u294": "(v)=>v*10",
        "u295": "(v)=>v*100",
        "u296": "(v)=>v*1000",
        "u297": "(v)=>v*1000000",
        "u298": "(v)=>v*1000000000",
        "u299": "(v)=>v*1000000000000",
        "u300": "(v)=>v*1e+15",
        "u301": "(v)=>v*1e+18",
        "u302": "(v)=>v*1e+21",
        "u303": "(v)=>v*1e+24"
      },
      "description": "The newton (N) is the SI derived unit of force; one newton accelerates a one‑kilogram mass by one metre per second squared. Newton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of newton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent newton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, newton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when newton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding newton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed newton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of newton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u294",
      "name": "decinewton",
      "shortName": "dN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-25",
        "u284": "(v)=>v*1e-22",
        "u285": "(v)=>v*1e-19",
        "u286": "(v)=>v*1e-16",
        "u287": "(v)=>v*1e-13",
        "u288": "(v)=>v*1e-10",
        "u289": "(v)=>v*1e-07",
        "u290": "(v)=>v*0.0001",
        "u291": "(v)=>v*0.001",
        "u292": "(v)=>v*0.01",
        "u293": "(v)=>v*0.1",
        "u295": "(v)=>v*10",
        "u296": "(v)=>v*100",
        "u297": "(v)=>v*100000",
        "u298": "(v)=>v*100000000",
        "u299": "(v)=>v*100000000000",
        "u300": "(v)=>v*100000000000000",
        "u301": "(v)=>v*1e+17",
        "u302": "(v)=>v*1e+20",
        "u303": "(v)=>v*1e+23"
      },
      "description": "A decinewton (dN) is an SI unit of force applying the deci‑ prefix (10^-1). One decinewton equals 0.1 newtons. The deci prefix denotes a factor of 10^-1, so 1 decinewton equals 10^-1 newtons. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decinewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decinewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decinewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decinewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decinewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decinewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decinewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decinewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u295",
      "name": "centinewton",
      "shortName": "cN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-26",
        "u284": "(v)=>v*1e-23",
        "u285": "(v)=>v*1e-20",
        "u286": "(v)=>v*1e-17",
        "u287": "(v)=>v*1e-14",
        "u288": "(v)=>v*1e-11",
        "u289": "(v)=>v*1e-08",
        "u290": "(v)=>v*1e-05",
        "u291": "(v)=>v*0.0001",
        "u292": "(v)=>v*0.001",
        "u293": "(v)=>v*0.01",
        "u294": "(v)=>v*0.1",
        "u296": "(v)=>v*10",
        "u297": "(v)=>v*10000",
        "u298": "(v)=>v*10000000",
        "u299": "(v)=>v*10000000000",
        "u300": "(v)=>v*10000000000000",
        "u301": "(v)=>v*1e+16",
        "u302": "(v)=>v*1e+19",
        "u303": "(v)=>v*1e+22"
      },
      "description": "A centinewton (cN) is an SI unit of force applying the centi‑ prefix (10^-2). One centinewton equals 0.01 newtons. The centi prefix denotes a factor of 10^-2, so 1 centinewton equals 10^-2 newtons. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centinewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centinewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centinewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centinewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centinewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centinewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centinewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centinewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u296",
      "name": "millinewton",
      "shortName": "mN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-27",
        "u284": "(v)=>v*1e-24",
        "u285": "(v)=>v*1e-21",
        "u286": "(v)=>v*1e-18",
        "u287": "(v)=>v*1e-15",
        "u288": "(v)=>v*1e-12",
        "u289": "(v)=>v*1e-09",
        "u290": "(v)=>v*1e-06",
        "u291": "(v)=>v*1e-05",
        "u292": "(v)=>v*0.0001",
        "u293": "(v)=>v*0.001",
        "u294": "(v)=>v*0.01",
        "u295": "(v)=>v*0.1",
        "u297": "(v)=>v*1000",
        "u298": "(v)=>v*1000000",
        "u299": "(v)=>v*1000000000",
        "u300": "(v)=>v*1000000000000",
        "u301": "(v)=>v*1e+15",
        "u302": "(v)=>v*1e+18",
        "u303": "(v)=>v*1e+21"
      },
      "description": "A millinewton (mN) is an SI unit of force applying the milli‑ prefix (10^-3). One millinewton equals 0.001 newtons. The milli prefix denotes a factor of 10^-3, so 1 millinewton equals 10^-3 newtons. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millinewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millinewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millinewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millinewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millinewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millinewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millinewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millinewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u297",
      "name": "micronewton",
      "shortName": "μN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-30",
        "u284": "(v)=>v*1e-27",
        "u285": "(v)=>v*1e-24",
        "u286": "(v)=>v*1e-21",
        "u287": "(v)=>v*1e-18",
        "u288": "(v)=>v*1e-15",
        "u289": "(v)=>v*1e-12",
        "u290": "(v)=>v*1e-09",
        "u291": "(v)=>v*1e-08",
        "u292": "(v)=>v*1e-07",
        "u293": "(v)=>v*1e-06",
        "u294": "(v)=>v*1e-05",
        "u295": "(v)=>v*0.0001",
        "u296": "(v)=>v*0.001",
        "u298": "(v)=>v*1000",
        "u299": "(v)=>v*1000000",
        "u300": "(v)=>v*1000000000",
        "u301": "(v)=>v*1000000000000",
        "u302": "(v)=>v*1e+15",
        "u303": "(v)=>v*1e+18"
      },
      "description": "A micronewton (μN) is an SI unit of force applying the micro‑ prefix (10^-6). One micronewton equals 1e-06 newtons. The micro prefix denotes a factor of 10^-6, so 1 micronewton equals 10^-6 newtons. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Micronewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of micronewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent micronewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, micronewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when micronewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding micronewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed micronewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of micronewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u298",
      "name": "nanonewton",
      "shortName": "nN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-33",
        "u284": "(v)=>v*1e-30",
        "u285": "(v)=>v*1e-27",
        "u286": "(v)=>v*1e-24",
        "u287": "(v)=>v*1e-21",
        "u288": "(v)=>v*1e-18",
        "u289": "(v)=>v*1e-15",
        "u290": "(v)=>v*1e-12",
        "u291": "(v)=>v*1e-11",
        "u292": "(v)=>v*1e-10",
        "u293": "(v)=>v*1e-09",
        "u294": "(v)=>v*1e-08",
        "u295": "(v)=>v*1e-07",
        "u296": "(v)=>v*1e-06",
        "u297": "(v)=>v*0.001",
        "u299": "(v)=>v*1000",
        "u300": "(v)=>v*1000000",
        "u301": "(v)=>v*1000000000",
        "u302": "(v)=>v*1000000000000",
        "u303": "(v)=>v*1e+15"
      },
      "description": "A nanonewton (nN) is an SI unit of force applying the nano‑ prefix (10^-9). One nanonewton equals 1e-09 newtons. The nano prefix denotes a factor of 10^-9, so 1 nanonewton equals 10^-9 newtons. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanonewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanonewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanonewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanonewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanonewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanonewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanonewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanonewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u299",
      "name": "piconewton",
      "shortName": "pN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-36",
        "u284": "(v)=>v*1e-33",
        "u285": "(v)=>v*1e-30",
        "u286": "(v)=>v*1e-27",
        "u287": "(v)=>v*1e-24",
        "u288": "(v)=>v*1e-21",
        "u289": "(v)=>v*1e-18",
        "u290": "(v)=>v*1e-15",
        "u291": "(v)=>v*1e-14",
        "u292": "(v)=>v*1e-13",
        "u293": "(v)=>v*1e-12",
        "u294": "(v)=>v*1e-11",
        "u295": "(v)=>v*1e-10",
        "u296": "(v)=>v*1e-09",
        "u297": "(v)=>v*1e-06",
        "u298": "(v)=>v*0.001",
        "u300": "(v)=>v*1000",
        "u301": "(v)=>v*1000000",
        "u302": "(v)=>v*1000000000",
        "u303": "(v)=>v*1000000000000"
      },
      "description": "A piconewton (pN) is an SI unit of force applying the pico‑ prefix (10^-12). One piconewton equals 1e-12 newtons. The pico prefix denotes a factor of 10^-12, so 1 piconewton equals 10^-12 newtons. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Piconewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of piconewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent piconewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, piconewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when piconewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding piconewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed piconewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of piconewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u300",
      "name": "femtonewton",
      "shortName": "fN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-39",
        "u284": "(v)=>v*1e-36",
        "u285": "(v)=>v*1e-33",
        "u286": "(v)=>v*1e-30",
        "u287": "(v)=>v*1e-27",
        "u288": "(v)=>v*1e-24",
        "u289": "(v)=>v*1e-21",
        "u290": "(v)=>v*1e-18",
        "u291": "(v)=>v*1e-17",
        "u292": "(v)=>v*1e-16",
        "u293": "(v)=>v*1e-15",
        "u294": "(v)=>v*1e-14",
        "u295": "(v)=>v*1e-13",
        "u296": "(v)=>v*1e-12",
        "u297": "(v)=>v*1e-09",
        "u298": "(v)=>v*1e-06",
        "u299": "(v)=>v*0.001",
        "u301": "(v)=>v*1000",
        "u302": "(v)=>v*1000000",
        "u303": "(v)=>v*1000000000"
      },
      "description": "A femtonewton (fN) is an SI unit of force applying the femto‑ prefix (10^-15). One femtonewton equals 1e-15 newtons. The femto prefix denotes a factor of 10^-15, so 1 femtonewton equals 10^-15 newtons. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtonewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtonewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtonewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtonewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtonewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtonewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtonewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtonewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u301",
      "name": "attonewton",
      "shortName": "aN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-42",
        "u284": "(v)=>v*1e-39",
        "u285": "(v)=>v*1e-36",
        "u286": "(v)=>v*1e-33",
        "u287": "(v)=>v*1e-30",
        "u288": "(v)=>v*1e-27",
        "u289": "(v)=>v*1e-24",
        "u290": "(v)=>v*1e-21",
        "u291": "(v)=>v*1e-20",
        "u292": "(v)=>v*1e-19",
        "u293": "(v)=>v*1e-18",
        "u294": "(v)=>v*1e-17",
        "u295": "(v)=>v*1e-16",
        "u296": "(v)=>v*1e-15",
        "u297": "(v)=>v*1e-12",
        "u298": "(v)=>v*1e-09",
        "u299": "(v)=>v*1e-06",
        "u300": "(v)=>v*0.001",
        "u302": "(v)=>v*1000",
        "u303": "(v)=>v*1000000"
      },
      "description": "A attonewton (aN) is an SI unit of force applying the atto‑ prefix (10^-18). One attonewton equals 1e-18 newtons. The atto prefix denotes a factor of 10^-18, so 1 attonewton equals 10^-18 newtons. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attonewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attonewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attonewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attonewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attonewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attonewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attonewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attonewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u302",
      "name": "zeptonewton",
      "shortName": "zN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-45",
        "u284": "(v)=>v*1e-42",
        "u285": "(v)=>v*1e-39",
        "u286": "(v)=>v*1e-36",
        "u287": "(v)=>v*1e-33",
        "u288": "(v)=>v*1e-30",
        "u289": "(v)=>v*1e-27",
        "u290": "(v)=>v*1e-24",
        "u291": "(v)=>v*1e-23",
        "u292": "(v)=>v*1e-22",
        "u293": "(v)=>v*1e-21",
        "u294": "(v)=>v*1e-20",
        "u295": "(v)=>v*1e-19",
        "u296": "(v)=>v*1e-18",
        "u297": "(v)=>v*1e-15",
        "u298": "(v)=>v*1e-12",
        "u299": "(v)=>v*1e-09",
        "u300": "(v)=>v*1e-06",
        "u301": "(v)=>v*0.001",
        "u303": "(v)=>v*1000"
      },
      "description": "A zeptonewton (zN) is an SI unit of force applying the zepto‑ prefix (10^-21). One zeptonewton equals 1e-21 newtons. The zepto prefix denotes a factor of 10^-21, so 1 zeptonewton equals 10^-21 newtons. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptonewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptonewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptonewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptonewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptonewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptonewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptonewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptonewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u303",
      "name": "yoctonewton",
      "shortName": "yN",
      "categoryId": "c11",
      "conversions": {
        "u283": "(v)=>v*1e-48",
        "u284": "(v)=>v*1e-45",
        "u285": "(v)=>v*1e-42",
        "u286": "(v)=>v*1e-39",
        "u287": "(v)=>v*1e-36",
        "u288": "(v)=>v*1e-33",
        "u289": "(v)=>v*1e-30",
        "u290": "(v)=>v*1e-27",
        "u291": "(v)=>v*1e-26",
        "u292": "(v)=>v*1e-25",
        "u293": "(v)=>v*1e-24",
        "u294": "(v)=>v*1e-23",
        "u295": "(v)=>v*1e-22",
        "u296": "(v)=>v*1e-21",
        "u297": "(v)=>v*1e-18",
        "u298": "(v)=>v*1e-15",
        "u299": "(v)=>v*1e-12",
        "u300": "(v)=>v*1e-09",
        "u301": "(v)=>v*1e-06",
        "u302": "(v)=>v*0.001"
      },
      "description": "A yoctonewton (yN) is an SI unit of force applying the yocto‑ prefix (10^-24). One yoctonewton equals 1e-24 newtons. The yocto prefix denotes a factor of 10^-24, so 1 yoctonewton equals 10^-24 newtons. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctonewton belongs to the broader physical quantity of force. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctonewton often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctonewton as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctonewton is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctonewton values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctonewton has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctonewton metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctonewton fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u304",
      "name": "yottacoulomb",
      "shortName": "YC",
      "categoryId": "c4",
      "conversions": {
        "u305": "(v)=>v*1000",
        "u306": "(v)=>v*1000000",
        "u307": "(v)=>v*1000000000",
        "u308": "(v)=>v*1000000000000",
        "u309": "(v)=>v*1e+15",
        "u310": "(v)=>v*1e+18",
        "u311": "(v)=>v*1e+21",
        "u312": "(v)=>v*1e+22",
        "u313": "(v)=>v*1e+23",
        "u314": "(v)=>v*1e+24",
        "u315": "(v)=>v*1e+25",
        "u316": "(v)=>v*1e+26",
        "u317": "(v)=>v*1e+27",
        "u318": "(v)=>v*1e+30",
        "u319": "(v)=>v*1e+33",
        "u320": "(v)=>v*1e+36",
        "u321": "(v)=>v*1e+39",
        "u322": "(v)=>v*1e+42",
        "u323": "(v)=>v*1e+45",
        "u324": "(v)=>v*1e+48"
      },
      "description": "A yottacoulomb (YC) is an SI unit of charge applying the yotta‑ prefix (10^24). One yottacoulomb equals 1e+24 coulombs. The yotta prefix denotes a factor of 10^24, so 1 yottacoulomb equals 10^24 coulombs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottacoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottacoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottacoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottacoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottacoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottacoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottacoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottacoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u305",
      "name": "zettacoulomb",
      "shortName": "ZC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*0.001",
        "u306": "(v)=>v*1000",
        "u307": "(v)=>v*1000000",
        "u308": "(v)=>v*1000000000",
        "u309": "(v)=>v*1000000000000",
        "u310": "(v)=>v*1e+15",
        "u311": "(v)=>v*1e+18",
        "u312": "(v)=>v*1e+19",
        "u313": "(v)=>v*1e+20",
        "u314": "(v)=>v*1e+21",
        "u315": "(v)=>v*1e+22",
        "u316": "(v)=>v*1e+23",
        "u317": "(v)=>v*1e+24",
        "u318": "(v)=>v*1e+27",
        "u319": "(v)=>v*1e+30",
        "u320": "(v)=>v*1e+33",
        "u321": "(v)=>v*1e+36",
        "u322": "(v)=>v*1e+39",
        "u323": "(v)=>v*1e+42",
        "u324": "(v)=>v*1e+45"
      },
      "description": "A zettacoulomb (ZC) is an SI unit of charge applying the zetta‑ prefix (10^21). One zettacoulomb equals 1e+21 coulombs. The zetta prefix denotes a factor of 10^21, so 1 zettacoulomb equals 10^21 coulombs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettacoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettacoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettacoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettacoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettacoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettacoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettacoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettacoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u306",
      "name": "exacoulomb",
      "shortName": "EC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-06",
        "u305": "(v)=>v*0.001",
        "u307": "(v)=>v*1000",
        "u308": "(v)=>v*1000000",
        "u309": "(v)=>v*1000000000",
        "u310": "(v)=>v*1000000000000",
        "u311": "(v)=>v*1e+15",
        "u312": "(v)=>v*1e+16",
        "u313": "(v)=>v*1e+17",
        "u314": "(v)=>v*1e+18",
        "u315": "(v)=>v*1e+19",
        "u316": "(v)=>v*1e+20",
        "u317": "(v)=>v*1e+21",
        "u318": "(v)=>v*1e+24",
        "u319": "(v)=>v*1e+27",
        "u320": "(v)=>v*1e+30",
        "u321": "(v)=>v*1e+33",
        "u322": "(v)=>v*1e+36",
        "u323": "(v)=>v*1e+39",
        "u324": "(v)=>v*1e+42"
      },
      "description": "A exacoulomb (EC) is an SI unit of charge applying the exa‑ prefix (10^18). One exacoulomb equals 1e+18 coulombs. The exa prefix denotes a factor of 10^18, so 1 exacoulomb equals 10^18 coulombs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exacoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exacoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exacoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exacoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exacoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exacoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exacoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exacoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u307",
      "name": "petacoulomb",
      "shortName": "PC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-09",
        "u305": "(v)=>v*1e-06",
        "u306": "(v)=>v*0.001",
        "u308": "(v)=>v*1000",
        "u309": "(v)=>v*1000000",
        "u310": "(v)=>v*1000000000",
        "u311": "(v)=>v*1000000000000",
        "u312": "(v)=>v*10000000000000",
        "u313": "(v)=>v*100000000000000",
        "u314": "(v)=>v*1e+15",
        "u315": "(v)=>v*1e+16",
        "u316": "(v)=>v*1e+17",
        "u317": "(v)=>v*1e+18",
        "u318": "(v)=>v*1e+21",
        "u319": "(v)=>v*1e+24",
        "u320": "(v)=>v*1e+27",
        "u321": "(v)=>v*1e+30",
        "u322": "(v)=>v*1e+33",
        "u323": "(v)=>v*1e+36",
        "u324": "(v)=>v*1e+39"
      },
      "description": "A petacoulomb (PC) is an SI unit of charge applying the peta‑ prefix (10^15). One petacoulomb equals 1e+15 coulombs. The peta prefix denotes a factor of 10^15, so 1 petacoulomb equals 10^15 coulombs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petacoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petacoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petacoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petacoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petacoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petacoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petacoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petacoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u308",
      "name": "teracoulomb",
      "shortName": "TC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-12",
        "u305": "(v)=>v*1e-09",
        "u306": "(v)=>v*1e-06",
        "u307": "(v)=>v*0.001",
        "u309": "(v)=>v*1000",
        "u310": "(v)=>v*1000000",
        "u311": "(v)=>v*1000000000",
        "u312": "(v)=>v*10000000000",
        "u313": "(v)=>v*100000000000",
        "u314": "(v)=>v*1000000000000",
        "u315": "(v)=>v*10000000000000",
        "u316": "(v)=>v*100000000000000",
        "u317": "(v)=>v*1e+15",
        "u318": "(v)=>v*1e+18",
        "u319": "(v)=>v*1e+21",
        "u320": "(v)=>v*1e+24",
        "u321": "(v)=>v*1e+27",
        "u322": "(v)=>v*1e+30",
        "u323": "(v)=>v*1e+33",
        "u324": "(v)=>v*1e+36"
      },
      "description": "A teracoulomb (TC) is an SI unit of charge applying the tera‑ prefix (10^12). One teracoulomb equals 1e+12 coulombs. The tera prefix denotes a factor of 10^12, so 1 teracoulomb equals 10^12 coulombs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Teracoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teracoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teracoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teracoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teracoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teracoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teracoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teracoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u309",
      "name": "gigacoulomb",
      "shortName": "GC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-15",
        "u305": "(v)=>v*1e-12",
        "u306": "(v)=>v*1e-09",
        "u307": "(v)=>v*1e-06",
        "u308": "(v)=>v*0.001",
        "u310": "(v)=>v*1000",
        "u311": "(v)=>v*1000000",
        "u312": "(v)=>v*10000000",
        "u313": "(v)=>v*100000000",
        "u314": "(v)=>v*1000000000",
        "u315": "(v)=>v*10000000000",
        "u316": "(v)=>v*100000000000",
        "u317": "(v)=>v*1000000000000",
        "u318": "(v)=>v*1e+15",
        "u319": "(v)=>v*1e+18",
        "u320": "(v)=>v*1e+21",
        "u321": "(v)=>v*1e+24",
        "u322": "(v)=>v*1e+27",
        "u323": "(v)=>v*1e+30",
        "u324": "(v)=>v*1e+33"
      },
      "description": "A gigacoulomb (GC) is an SI unit of charge applying the giga‑ prefix (10^9). One gigacoulomb equals 1000000000 coulombs. The giga prefix denotes a factor of 10^9, so 1 gigacoulomb equals 10^9 coulombs. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigacoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigacoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigacoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigacoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigacoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigacoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigacoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigacoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u310",
      "name": "megacoulomb",
      "shortName": "MC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-18",
        "u305": "(v)=>v*1e-15",
        "u306": "(v)=>v*1e-12",
        "u307": "(v)=>v*1e-09",
        "u308": "(v)=>v*1e-06",
        "u309": "(v)=>v*0.001",
        "u311": "(v)=>v*1000",
        "u312": "(v)=>v*10000",
        "u313": "(v)=>v*100000",
        "u314": "(v)=>v*1000000",
        "u315": "(v)=>v*10000000",
        "u316": "(v)=>v*100000000",
        "u317": "(v)=>v*1000000000",
        "u318": "(v)=>v*1000000000000",
        "u319": "(v)=>v*1e+15",
        "u320": "(v)=>v*1e+18",
        "u321": "(v)=>v*1e+21",
        "u322": "(v)=>v*1e+24",
        "u323": "(v)=>v*1e+27",
        "u324": "(v)=>v*1e+30"
      },
      "description": "A megacoulomb (MC) is an SI unit of charge applying the mega‑ prefix (10^6). One megacoulomb equals 1000000 coulombs. The mega prefix denotes a factor of 10^6, so 1 megacoulomb equals 10^6 coulombs. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megacoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megacoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megacoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megacoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megacoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megacoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megacoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megacoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u311",
      "name": "kilocoulomb",
      "shortName": "kC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-21",
        "u305": "(v)=>v*1e-18",
        "u306": "(v)=>v*1e-15",
        "u307": "(v)=>v*1e-12",
        "u308": "(v)=>v*1e-09",
        "u309": "(v)=>v*1e-06",
        "u310": "(v)=>v*0.001",
        "u312": "(v)=>v*10",
        "u313": "(v)=>v*100",
        "u314": "(v)=>v*1000",
        "u315": "(v)=>v*10000",
        "u316": "(v)=>v*100000",
        "u317": "(v)=>v*1000000",
        "u318": "(v)=>v*1000000000",
        "u319": "(v)=>v*1000000000000",
        "u320": "(v)=>v*1e+15",
        "u321": "(v)=>v*1e+18",
        "u322": "(v)=>v*1e+21",
        "u323": "(v)=>v*1e+24",
        "u324": "(v)=>v*1e+27"
      },
      "description": "A kilocoulomb (kC) is an SI unit of charge applying the kilo‑ prefix (10^3). One kilocoulomb equals 1000 coulombs. The kilo prefix denotes a factor of 10^3, so 1 kilocoulomb equals 10^3 coulombs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilocoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilocoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilocoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilocoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilocoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilocoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilocoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilocoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u312",
      "name": "hectocoulomb",
      "shortName": "hC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-22",
        "u305": "(v)=>v*1e-19",
        "u306": "(v)=>v*1e-16",
        "u307": "(v)=>v*1e-13",
        "u308": "(v)=>v*1e-10",
        "u309": "(v)=>v*1e-07",
        "u310": "(v)=>v*0.0001",
        "u311": "(v)=>v*0.1",
        "u313": "(v)=>v*10",
        "u314": "(v)=>v*100",
        "u315": "(v)=>v*1000",
        "u316": "(v)=>v*10000",
        "u317": "(v)=>v*100000",
        "u318": "(v)=>v*100000000",
        "u319": "(v)=>v*100000000000",
        "u320": "(v)=>v*100000000000000",
        "u321": "(v)=>v*1e+17",
        "u322": "(v)=>v*1e+20",
        "u323": "(v)=>v*1e+23",
        "u324": "(v)=>v*1e+26"
      },
      "description": "A hectocoulomb (hC) is an SI unit of charge applying the hecto‑ prefix (10^2). One hectocoulomb equals 100 coulombs. The hecto prefix denotes a factor of 10^2, so 1 hectocoulomb equals 10^2 coulombs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectocoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectocoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectocoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectocoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectocoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectocoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectocoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectocoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u313",
      "name": "decacoulomb",
      "shortName": "daC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-23",
        "u305": "(v)=>v*1e-20",
        "u306": "(v)=>v*1e-17",
        "u307": "(v)=>v*1e-14",
        "u308": "(v)=>v*1e-11",
        "u309": "(v)=>v*1e-08",
        "u310": "(v)=>v*1e-05",
        "u311": "(v)=>v*0.01",
        "u312": "(v)=>v*0.1",
        "u314": "(v)=>v*10",
        "u315": "(v)=>v*100",
        "u316": "(v)=>v*1000",
        "u317": "(v)=>v*10000",
        "u318": "(v)=>v*10000000",
        "u319": "(v)=>v*10000000000",
        "u320": "(v)=>v*10000000000000",
        "u321": "(v)=>v*1e+16",
        "u322": "(v)=>v*1e+19",
        "u323": "(v)=>v*1e+22",
        "u324": "(v)=>v*1e+25"
      },
      "description": "A decacoulomb (daC) is an SI unit of charge applying the deca‑ prefix (10^1). One decacoulomb equals 10 coulombs. The deca prefix denotes a factor of 10^1, so 1 decacoulomb equals 10^1 coulombs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decacoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decacoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decacoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decacoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decacoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decacoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decacoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decacoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u314",
      "name": "coulomb",
      "shortName": "C",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-24",
        "u305": "(v)=>v*1e-21",
        "u306": "(v)=>v*1e-18",
        "u307": "(v)=>v*1e-15",
        "u308": "(v)=>v*1e-12",
        "u309": "(v)=>v*1e-09",
        "u310": "(v)=>v*1e-06",
        "u311": "(v)=>v*0.001",
        "u312": "(v)=>v*0.01",
        "u313": "(v)=>v*0.1",
        "u315": "(v)=>v*10",
        "u316": "(v)=>v*100",
        "u317": "(v)=>v*1000",
        "u318": "(v)=>v*1000000",
        "u319": "(v)=>v*1000000000",
        "u320": "(v)=>v*1000000000000",
        "u321": "(v)=>v*1e+15",
        "u322": "(v)=>v*1e+18",
        "u323": "(v)=>v*1e+21",
        "u324": "(v)=>v*1e+24"
      },
      "description": "The coulomb (C) is the SI derived unit of electric charge, defined as the quantity of charge transported by a current of one ampere in one second. Coulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of coulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent coulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, coulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when coulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding coulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed coulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of coulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u315",
      "name": "decicoulomb",
      "shortName": "dC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-25",
        "u305": "(v)=>v*1e-22",
        "u306": "(v)=>v*1e-19",
        "u307": "(v)=>v*1e-16",
        "u308": "(v)=>v*1e-13",
        "u309": "(v)=>v*1e-10",
        "u310": "(v)=>v*1e-07",
        "u311": "(v)=>v*0.0001",
        "u312": "(v)=>v*0.001",
        "u313": "(v)=>v*0.01",
        "u314": "(v)=>v*0.1",
        "u316": "(v)=>v*10",
        "u317": "(v)=>v*100",
        "u318": "(v)=>v*100000",
        "u319": "(v)=>v*100000000",
        "u320": "(v)=>v*100000000000",
        "u321": "(v)=>v*100000000000000",
        "u322": "(v)=>v*1e+17",
        "u323": "(v)=>v*1e+20",
        "u324": "(v)=>v*1e+23"
      },
      "description": "A decicoulomb (dC) is an SI unit of charge applying the deci‑ prefix (10^-1). One decicoulomb equals 0.1 coulombs. The deci prefix denotes a factor of 10^-1, so 1 decicoulomb equals 10^-1 coulombs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decicoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decicoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decicoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decicoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decicoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decicoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decicoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decicoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u316",
      "name": "centicoulomb",
      "shortName": "cC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-26",
        "u305": "(v)=>v*1e-23",
        "u306": "(v)=>v*1e-20",
        "u307": "(v)=>v*1e-17",
        "u308": "(v)=>v*1e-14",
        "u309": "(v)=>v*1e-11",
        "u310": "(v)=>v*1e-08",
        "u311": "(v)=>v*1e-05",
        "u312": "(v)=>v*0.0001",
        "u313": "(v)=>v*0.001",
        "u314": "(v)=>v*0.01",
        "u315": "(v)=>v*0.1",
        "u317": "(v)=>v*10",
        "u318": "(v)=>v*10000",
        "u319": "(v)=>v*10000000",
        "u320": "(v)=>v*10000000000",
        "u321": "(v)=>v*10000000000000",
        "u322": "(v)=>v*1e+16",
        "u323": "(v)=>v*1e+19",
        "u324": "(v)=>v*1e+22"
      },
      "description": "A centicoulomb (cC) is an SI unit of charge applying the centi‑ prefix (10^-2). One centicoulomb equals 0.01 coulombs. The centi prefix denotes a factor of 10^-2, so 1 centicoulomb equals 10^-2 coulombs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centicoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centicoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centicoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centicoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centicoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centicoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centicoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centicoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u317",
      "name": "millicoulomb",
      "shortName": "mC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-27",
        "u305": "(v)=>v*1e-24",
        "u306": "(v)=>v*1e-21",
        "u307": "(v)=>v*1e-18",
        "u308": "(v)=>v*1e-15",
        "u309": "(v)=>v*1e-12",
        "u310": "(v)=>v*1e-09",
        "u311": "(v)=>v*1e-06",
        "u312": "(v)=>v*1e-05",
        "u313": "(v)=>v*0.0001",
        "u314": "(v)=>v*0.001",
        "u315": "(v)=>v*0.01",
        "u316": "(v)=>v*0.1",
        "u318": "(v)=>v*1000",
        "u319": "(v)=>v*1000000",
        "u320": "(v)=>v*1000000000",
        "u321": "(v)=>v*1000000000000",
        "u322": "(v)=>v*1e+15",
        "u323": "(v)=>v*1e+18",
        "u324": "(v)=>v*1e+21"
      },
      "description": "A millicoulomb (mC) is an SI unit of charge applying the milli‑ prefix (10^-3). One millicoulomb equals 0.001 coulombs. The milli prefix denotes a factor of 10^-3, so 1 millicoulomb equals 10^-3 coulombs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millicoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millicoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millicoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millicoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millicoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millicoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millicoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millicoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u318",
      "name": "microcoulomb",
      "shortName": "μC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-30",
        "u305": "(v)=>v*1e-27",
        "u306": "(v)=>v*1e-24",
        "u307": "(v)=>v*1e-21",
        "u308": "(v)=>v*1e-18",
        "u309": "(v)=>v*1e-15",
        "u310": "(v)=>v*1e-12",
        "u311": "(v)=>v*1e-09",
        "u312": "(v)=>v*1e-08",
        "u313": "(v)=>v*1e-07",
        "u314": "(v)=>v*1e-06",
        "u315": "(v)=>v*1e-05",
        "u316": "(v)=>v*0.0001",
        "u317": "(v)=>v*0.001",
        "u319": "(v)=>v*1000",
        "u320": "(v)=>v*1000000",
        "u321": "(v)=>v*1000000000",
        "u322": "(v)=>v*1000000000000",
        "u323": "(v)=>v*1e+15",
        "u324": "(v)=>v*1e+18"
      },
      "description": "A microcoulomb (μC) is an SI unit of charge applying the micro‑ prefix (10^-6). One microcoulomb equals 1e-06 coulombs. The micro prefix denotes a factor of 10^-6, so 1 microcoulomb equals 10^-6 coulombs. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microcoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microcoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microcoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microcoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microcoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microcoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microcoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microcoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u319",
      "name": "nanocoulomb",
      "shortName": "nC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-33",
        "u305": "(v)=>v*1e-30",
        "u306": "(v)=>v*1e-27",
        "u307": "(v)=>v*1e-24",
        "u308": "(v)=>v*1e-21",
        "u309": "(v)=>v*1e-18",
        "u310": "(v)=>v*1e-15",
        "u311": "(v)=>v*1e-12",
        "u312": "(v)=>v*1e-11",
        "u313": "(v)=>v*1e-10",
        "u314": "(v)=>v*1e-09",
        "u315": "(v)=>v*1e-08",
        "u316": "(v)=>v*1e-07",
        "u317": "(v)=>v*1e-06",
        "u318": "(v)=>v*0.001",
        "u320": "(v)=>v*1000",
        "u321": "(v)=>v*1000000",
        "u322": "(v)=>v*1000000000",
        "u323": "(v)=>v*1000000000000",
        "u324": "(v)=>v*1e+15"
      },
      "description": "A nanocoulomb (nC) is an SI unit of charge applying the nano‑ prefix (10^-9). One nanocoulomb equals 1e-09 coulombs. The nano prefix denotes a factor of 10^-9, so 1 nanocoulomb equals 10^-9 coulombs. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanocoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanocoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanocoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanocoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanocoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanocoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanocoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanocoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u320",
      "name": "picocoulomb",
      "shortName": "pC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-36",
        "u305": "(v)=>v*1e-33",
        "u306": "(v)=>v*1e-30",
        "u307": "(v)=>v*1e-27",
        "u308": "(v)=>v*1e-24",
        "u309": "(v)=>v*1e-21",
        "u310": "(v)=>v*1e-18",
        "u311": "(v)=>v*1e-15",
        "u312": "(v)=>v*1e-14",
        "u313": "(v)=>v*1e-13",
        "u314": "(v)=>v*1e-12",
        "u315": "(v)=>v*1e-11",
        "u316": "(v)=>v*1e-10",
        "u317": "(v)=>v*1e-09",
        "u318": "(v)=>v*1e-06",
        "u319": "(v)=>v*0.001",
        "u321": "(v)=>v*1000",
        "u322": "(v)=>v*1000000",
        "u323": "(v)=>v*1000000000",
        "u324": "(v)=>v*1000000000000"
      },
      "description": "A picocoulomb (pC) is an SI unit of charge applying the pico‑ prefix (10^-12). One picocoulomb equals 1e-12 coulombs. The pico prefix denotes a factor of 10^-12, so 1 picocoulomb equals 10^-12 coulombs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picocoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picocoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picocoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picocoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picocoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picocoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picocoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picocoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u321",
      "name": "femtocoulomb",
      "shortName": "fC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-39",
        "u305": "(v)=>v*1e-36",
        "u306": "(v)=>v*1e-33",
        "u307": "(v)=>v*1e-30",
        "u308": "(v)=>v*1e-27",
        "u309": "(v)=>v*1e-24",
        "u310": "(v)=>v*1e-21",
        "u311": "(v)=>v*1e-18",
        "u312": "(v)=>v*1e-17",
        "u313": "(v)=>v*1e-16",
        "u314": "(v)=>v*1e-15",
        "u315": "(v)=>v*1e-14",
        "u316": "(v)=>v*1e-13",
        "u317": "(v)=>v*1e-12",
        "u318": "(v)=>v*1e-09",
        "u319": "(v)=>v*1e-06",
        "u320": "(v)=>v*0.001",
        "u322": "(v)=>v*1000",
        "u323": "(v)=>v*1000000",
        "u324": "(v)=>v*1000000000"
      },
      "description": "A femtocoulomb (fC) is an SI unit of charge applying the femto‑ prefix (10^-15). One femtocoulomb equals 1e-15 coulombs. The femto prefix denotes a factor of 10^-15, so 1 femtocoulomb equals 10^-15 coulombs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtocoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtocoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtocoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtocoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtocoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtocoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtocoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtocoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u322",
      "name": "attocoulomb",
      "shortName": "aC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-42",
        "u305": "(v)=>v*1e-39",
        "u306": "(v)=>v*1e-36",
        "u307": "(v)=>v*1e-33",
        "u308": "(v)=>v*1e-30",
        "u309": "(v)=>v*1e-27",
        "u310": "(v)=>v*1e-24",
        "u311": "(v)=>v*1e-21",
        "u312": "(v)=>v*1e-20",
        "u313": "(v)=>v*1e-19",
        "u314": "(v)=>v*1e-18",
        "u315": "(v)=>v*1e-17",
        "u316": "(v)=>v*1e-16",
        "u317": "(v)=>v*1e-15",
        "u318": "(v)=>v*1e-12",
        "u319": "(v)=>v*1e-09",
        "u320": "(v)=>v*1e-06",
        "u321": "(v)=>v*0.001",
        "u323": "(v)=>v*1000",
        "u324": "(v)=>v*1000000"
      },
      "description": "A attocoulomb (aC) is an SI unit of charge applying the atto‑ prefix (10^-18). One attocoulomb equals 1e-18 coulombs. The atto prefix denotes a factor of 10^-18, so 1 attocoulomb equals 10^-18 coulombs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attocoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attocoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attocoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attocoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attocoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attocoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attocoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attocoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u323",
      "name": "zeptocoulomb",
      "shortName": "zC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-45",
        "u305": "(v)=>v*1e-42",
        "u306": "(v)=>v*1e-39",
        "u307": "(v)=>v*1e-36",
        "u308": "(v)=>v*1e-33",
        "u309": "(v)=>v*1e-30",
        "u310": "(v)=>v*1e-27",
        "u311": "(v)=>v*1e-24",
        "u312": "(v)=>v*1e-23",
        "u313": "(v)=>v*1e-22",
        "u314": "(v)=>v*1e-21",
        "u315": "(v)=>v*1e-20",
        "u316": "(v)=>v*1e-19",
        "u317": "(v)=>v*1e-18",
        "u318": "(v)=>v*1e-15",
        "u319": "(v)=>v*1e-12",
        "u320": "(v)=>v*1e-09",
        "u321": "(v)=>v*1e-06",
        "u322": "(v)=>v*0.001",
        "u324": "(v)=>v*1000"
      },
      "description": "A zeptocoulomb (zC) is an SI unit of charge applying the zepto‑ prefix (10^-21). One zeptocoulomb equals 1e-21 coulombs. The zepto prefix denotes a factor of 10^-21, so 1 zeptocoulomb equals 10^-21 coulombs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptocoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptocoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptocoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptocoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptocoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptocoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptocoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptocoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u324",
      "name": "yoctocoulomb",
      "shortName": "yC",
      "categoryId": "c4",
      "conversions": {
        "u304": "(v)=>v*1e-48",
        "u305": "(v)=>v*1e-45",
        "u306": "(v)=>v*1e-42",
        "u307": "(v)=>v*1e-39",
        "u308": "(v)=>v*1e-36",
        "u309": "(v)=>v*1e-33",
        "u310": "(v)=>v*1e-30",
        "u311": "(v)=>v*1e-27",
        "u312": "(v)=>v*1e-26",
        "u313": "(v)=>v*1e-25",
        "u314": "(v)=>v*1e-24",
        "u315": "(v)=>v*1e-23",
        "u316": "(v)=>v*1e-22",
        "u317": "(v)=>v*1e-21",
        "u318": "(v)=>v*1e-18",
        "u319": "(v)=>v*1e-15",
        "u320": "(v)=>v*1e-12",
        "u321": "(v)=>v*1e-09",
        "u322": "(v)=>v*1e-06",
        "u323": "(v)=>v*0.001"
      },
      "description": "A yoctocoulomb (yC) is an SI unit of charge applying the yocto‑ prefix (10^-24). One yoctocoulomb equals 1e-24 coulombs. The yocto prefix denotes a factor of 10^-24, so 1 yoctocoulomb equals 10^-24 coulombs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctocoulomb belongs to the broader physical quantity of charge. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctocoulomb often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctocoulomb as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctocoulomb is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctocoulomb values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctocoulomb has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctocoulomb metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctocoulomb fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u325",
      "name": "yottaweber",
      "shortName": "YWb",
      "categoryId": "c17",
      "conversions": {
        "u326": "(v)=>v*1000",
        "u327": "(v)=>v*1000000",
        "u328": "(v)=>v*1000000000",
        "u329": "(v)=>v*1000000000000",
        "u330": "(v)=>v*1e+15",
        "u331": "(v)=>v*1e+18",
        "u332": "(v)=>v*1e+21",
        "u333": "(v)=>v*1e+22",
        "u334": "(v)=>v*1e+23",
        "u335": "(v)=>v*1e+24",
        "u336": "(v)=>v*1e+25",
        "u337": "(v)=>v*1e+26",
        "u338": "(v)=>v*1e+27",
        "u339": "(v)=>v*1e+30",
        "u340": "(v)=>v*1e+33",
        "u341": "(v)=>v*1e+36",
        "u342": "(v)=>v*1e+39",
        "u343": "(v)=>v*1e+42",
        "u344": "(v)=>v*1e+45",
        "u345": "(v)=>v*1e+48"
      },
      "description": "A yottaweber (YWb) is an SI unit of magneticFlux applying the yotta‑ prefix (10^24). One yottaweber equals 1e+24 webers. The yotta prefix denotes a factor of 10^24, so 1 yottaweber equals 10^24 webers. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottaweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottaweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottaweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottaweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottaweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottaweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottaweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottaweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u326",
      "name": "zettaweber",
      "shortName": "ZWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*0.001",
        "u327": "(v)=>v*1000",
        "u328": "(v)=>v*1000000",
        "u329": "(v)=>v*1000000000",
        "u330": "(v)=>v*1000000000000",
        "u331": "(v)=>v*1e+15",
        "u332": "(v)=>v*1e+18",
        "u333": "(v)=>v*1e+19",
        "u334": "(v)=>v*1e+20",
        "u335": "(v)=>v*1e+21",
        "u336": "(v)=>v*1e+22",
        "u337": "(v)=>v*1e+23",
        "u338": "(v)=>v*1e+24",
        "u339": "(v)=>v*1e+27",
        "u340": "(v)=>v*1e+30",
        "u341": "(v)=>v*1e+33",
        "u342": "(v)=>v*1e+36",
        "u343": "(v)=>v*1e+39",
        "u344": "(v)=>v*1e+42",
        "u345": "(v)=>v*1e+45"
      },
      "description": "A zettaweber (ZWb) is an SI unit of magneticFlux applying the zetta‑ prefix (10^21). One zettaweber equals 1e+21 webers. The zetta prefix denotes a factor of 10^21, so 1 zettaweber equals 10^21 webers. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettaweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettaweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettaweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettaweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettaweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettaweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettaweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettaweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u327",
      "name": "exaweber",
      "shortName": "EWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-06",
        "u326": "(v)=>v*0.001",
        "u328": "(v)=>v*1000",
        "u329": "(v)=>v*1000000",
        "u330": "(v)=>v*1000000000",
        "u331": "(v)=>v*1000000000000",
        "u332": "(v)=>v*1e+15",
        "u333": "(v)=>v*1e+16",
        "u334": "(v)=>v*1e+17",
        "u335": "(v)=>v*1e+18",
        "u336": "(v)=>v*1e+19",
        "u337": "(v)=>v*1e+20",
        "u338": "(v)=>v*1e+21",
        "u339": "(v)=>v*1e+24",
        "u340": "(v)=>v*1e+27",
        "u341": "(v)=>v*1e+30",
        "u342": "(v)=>v*1e+33",
        "u343": "(v)=>v*1e+36",
        "u344": "(v)=>v*1e+39",
        "u345": "(v)=>v*1e+42"
      },
      "description": "A exaweber (EWb) is an SI unit of magneticFlux applying the exa‑ prefix (10^18). One exaweber equals 1e+18 webers. The exa prefix denotes a factor of 10^18, so 1 exaweber equals 10^18 webers. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exaweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exaweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exaweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exaweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exaweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exaweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exaweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exaweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u328",
      "name": "petaweber",
      "shortName": "PWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-09",
        "u326": "(v)=>v*1e-06",
        "u327": "(v)=>v*0.001",
        "u329": "(v)=>v*1000",
        "u330": "(v)=>v*1000000",
        "u331": "(v)=>v*1000000000",
        "u332": "(v)=>v*1000000000000",
        "u333": "(v)=>v*10000000000000",
        "u334": "(v)=>v*100000000000000",
        "u335": "(v)=>v*1e+15",
        "u336": "(v)=>v*1e+16",
        "u337": "(v)=>v*1e+17",
        "u338": "(v)=>v*1e+18",
        "u339": "(v)=>v*1e+21",
        "u340": "(v)=>v*1e+24",
        "u341": "(v)=>v*1e+27",
        "u342": "(v)=>v*1e+30",
        "u343": "(v)=>v*1e+33",
        "u344": "(v)=>v*1e+36",
        "u345": "(v)=>v*1e+39"
      },
      "description": "A petaweber (PWb) is an SI unit of magneticFlux applying the peta‑ prefix (10^15). One petaweber equals 1e+15 webers. The peta prefix denotes a factor of 10^15, so 1 petaweber equals 10^15 webers. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petaweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petaweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petaweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petaweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petaweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petaweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petaweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petaweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u329",
      "name": "teraweber",
      "shortName": "TWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-12",
        "u326": "(v)=>v*1e-09",
        "u327": "(v)=>v*1e-06",
        "u328": "(v)=>v*0.001",
        "u330": "(v)=>v*1000",
        "u331": "(v)=>v*1000000",
        "u332": "(v)=>v*1000000000",
        "u333": "(v)=>v*10000000000",
        "u334": "(v)=>v*100000000000",
        "u335": "(v)=>v*1000000000000",
        "u336": "(v)=>v*10000000000000",
        "u337": "(v)=>v*100000000000000",
        "u338": "(v)=>v*1e+15",
        "u339": "(v)=>v*1e+18",
        "u340": "(v)=>v*1e+21",
        "u341": "(v)=>v*1e+24",
        "u342": "(v)=>v*1e+27",
        "u343": "(v)=>v*1e+30",
        "u344": "(v)=>v*1e+33",
        "u345": "(v)=>v*1e+36"
      },
      "description": "A teraweber (TWb) is an SI unit of magneticFlux applying the tera‑ prefix (10^12). One teraweber equals 1e+12 webers. The tera prefix denotes a factor of 10^12, so 1 teraweber equals 10^12 webers. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Teraweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teraweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teraweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teraweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teraweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teraweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teraweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teraweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u330",
      "name": "gigaweber",
      "shortName": "GWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-15",
        "u326": "(v)=>v*1e-12",
        "u327": "(v)=>v*1e-09",
        "u328": "(v)=>v*1e-06",
        "u329": "(v)=>v*0.001",
        "u331": "(v)=>v*1000",
        "u332": "(v)=>v*1000000",
        "u333": "(v)=>v*10000000",
        "u334": "(v)=>v*100000000",
        "u335": "(v)=>v*1000000000",
        "u336": "(v)=>v*10000000000",
        "u337": "(v)=>v*100000000000",
        "u338": "(v)=>v*1000000000000",
        "u339": "(v)=>v*1e+15",
        "u340": "(v)=>v*1e+18",
        "u341": "(v)=>v*1e+21",
        "u342": "(v)=>v*1e+24",
        "u343": "(v)=>v*1e+27",
        "u344": "(v)=>v*1e+30",
        "u345": "(v)=>v*1e+33"
      },
      "description": "A gigaweber (GWb) is an SI unit of magneticFlux applying the giga‑ prefix (10^9). One gigaweber equals 1000000000 webers. The giga prefix denotes a factor of 10^9, so 1 gigaweber equals 10^9 webers. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigaweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigaweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigaweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigaweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigaweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigaweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigaweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigaweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u331",
      "name": "megaweber",
      "shortName": "MWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-18",
        "u326": "(v)=>v*1e-15",
        "u327": "(v)=>v*1e-12",
        "u328": "(v)=>v*1e-09",
        "u329": "(v)=>v*1e-06",
        "u330": "(v)=>v*0.001",
        "u332": "(v)=>v*1000",
        "u333": "(v)=>v*10000",
        "u334": "(v)=>v*100000",
        "u335": "(v)=>v*1000000",
        "u336": "(v)=>v*10000000",
        "u337": "(v)=>v*100000000",
        "u338": "(v)=>v*1000000000",
        "u339": "(v)=>v*1000000000000",
        "u340": "(v)=>v*1e+15",
        "u341": "(v)=>v*1e+18",
        "u342": "(v)=>v*1e+21",
        "u343": "(v)=>v*1e+24",
        "u344": "(v)=>v*1e+27",
        "u345": "(v)=>v*1e+30"
      },
      "description": "A megaweber (MWb) is an SI unit of magneticFlux applying the mega‑ prefix (10^6). One megaweber equals 1000000 webers. The mega prefix denotes a factor of 10^6, so 1 megaweber equals 10^6 webers. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megaweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megaweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megaweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megaweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megaweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megaweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megaweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megaweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u332",
      "name": "kiloweber",
      "shortName": "kWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-21",
        "u326": "(v)=>v*1e-18",
        "u327": "(v)=>v*1e-15",
        "u328": "(v)=>v*1e-12",
        "u329": "(v)=>v*1e-09",
        "u330": "(v)=>v*1e-06",
        "u331": "(v)=>v*0.001",
        "u333": "(v)=>v*10",
        "u334": "(v)=>v*100",
        "u335": "(v)=>v*1000",
        "u336": "(v)=>v*10000",
        "u337": "(v)=>v*100000",
        "u338": "(v)=>v*1000000",
        "u339": "(v)=>v*1000000000",
        "u340": "(v)=>v*1000000000000",
        "u341": "(v)=>v*1e+15",
        "u342": "(v)=>v*1e+18",
        "u343": "(v)=>v*1e+21",
        "u344": "(v)=>v*1e+24",
        "u345": "(v)=>v*1e+27"
      },
      "description": "A kiloweber (kWb) is an SI unit of magneticFlux applying the kilo‑ prefix (10^3). One kiloweber equals 1000 webers. The kilo prefix denotes a factor of 10^3, so 1 kiloweber equals 10^3 webers. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kiloweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kiloweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kiloweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kiloweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kiloweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kiloweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kiloweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kiloweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u333",
      "name": "hectoweber",
      "shortName": "hWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-22",
        "u326": "(v)=>v*1e-19",
        "u327": "(v)=>v*1e-16",
        "u328": "(v)=>v*1e-13",
        "u329": "(v)=>v*1e-10",
        "u330": "(v)=>v*1e-07",
        "u331": "(v)=>v*0.0001",
        "u332": "(v)=>v*0.1",
        "u334": "(v)=>v*10",
        "u335": "(v)=>v*100",
        "u336": "(v)=>v*1000",
        "u337": "(v)=>v*10000",
        "u338": "(v)=>v*100000",
        "u339": "(v)=>v*100000000",
        "u340": "(v)=>v*100000000000",
        "u341": "(v)=>v*100000000000000",
        "u342": "(v)=>v*1e+17",
        "u343": "(v)=>v*1e+20",
        "u344": "(v)=>v*1e+23",
        "u345": "(v)=>v*1e+26"
      },
      "description": "A hectoweber (hWb) is an SI unit of magneticFlux applying the hecto‑ prefix (10^2). One hectoweber equals 100 webers. The hecto prefix denotes a factor of 10^2, so 1 hectoweber equals 10^2 webers. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectoweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectoweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectoweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectoweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectoweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectoweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectoweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectoweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u334",
      "name": "decaweber",
      "shortName": "daWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-23",
        "u326": "(v)=>v*1e-20",
        "u327": "(v)=>v*1e-17",
        "u328": "(v)=>v*1e-14",
        "u329": "(v)=>v*1e-11",
        "u330": "(v)=>v*1e-08",
        "u331": "(v)=>v*1e-05",
        "u332": "(v)=>v*0.01",
        "u333": "(v)=>v*0.1",
        "u335": "(v)=>v*10",
        "u336": "(v)=>v*100",
        "u337": "(v)=>v*1000",
        "u338": "(v)=>v*10000",
        "u339": "(v)=>v*10000000",
        "u340": "(v)=>v*10000000000",
        "u341": "(v)=>v*10000000000000",
        "u342": "(v)=>v*1e+16",
        "u343": "(v)=>v*1e+19",
        "u344": "(v)=>v*1e+22",
        "u345": "(v)=>v*1e+25"
      },
      "description": "A decaweber (daWb) is an SI unit of magneticFlux applying the deca‑ prefix (10^1). One decaweber equals 10 webers. The deca prefix denotes a factor of 10^1, so 1 decaweber equals 10^1 webers. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decaweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decaweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decaweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decaweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decaweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decaweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decaweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decaweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u335",
      "name": "weber",
      "shortName": "Wb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-24",
        "u326": "(v)=>v*1e-21",
        "u327": "(v)=>v*1e-18",
        "u328": "(v)=>v*1e-15",
        "u329": "(v)=>v*1e-12",
        "u330": "(v)=>v*1e-09",
        "u331": "(v)=>v*1e-06",
        "u332": "(v)=>v*0.001",
        "u333": "(v)=>v*0.01",
        "u334": "(v)=>v*0.1",
        "u336": "(v)=>v*10",
        "u337": "(v)=>v*100",
        "u338": "(v)=>v*1000",
        "u339": "(v)=>v*1000000",
        "u340": "(v)=>v*1000000000",
        "u341": "(v)=>v*1000000000000",
        "u342": "(v)=>v*1e+15",
        "u343": "(v)=>v*1e+18",
        "u344": "(v)=>v*1e+21",
        "u345": "(v)=>v*1e+24"
      },
      "description": "The weber (Wb) is the SI derived unit of magnetic flux; one weber equals one volt‑second. Weber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of weber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent weber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, weber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when weber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding weber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed weber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of weber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u336",
      "name": "deciweber",
      "shortName": "dWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-25",
        "u326": "(v)=>v*1e-22",
        "u327": "(v)=>v*1e-19",
        "u328": "(v)=>v*1e-16",
        "u329": "(v)=>v*1e-13",
        "u330": "(v)=>v*1e-10",
        "u331": "(v)=>v*1e-07",
        "u332": "(v)=>v*0.0001",
        "u333": "(v)=>v*0.001",
        "u334": "(v)=>v*0.01",
        "u335": "(v)=>v*0.1",
        "u337": "(v)=>v*10",
        "u338": "(v)=>v*100",
        "u339": "(v)=>v*100000",
        "u340": "(v)=>v*100000000",
        "u341": "(v)=>v*100000000000",
        "u342": "(v)=>v*100000000000000",
        "u343": "(v)=>v*1e+17",
        "u344": "(v)=>v*1e+20",
        "u345": "(v)=>v*1e+23"
      },
      "description": "A deciweber (dWb) is an SI unit of magneticFlux applying the deci‑ prefix (10^-1). One deciweber equals 0.1 webers. The deci prefix denotes a factor of 10^-1, so 1 deciweber equals 10^-1 webers. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Deciweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of deciweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent deciweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, deciweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when deciweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding deciweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed deciweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of deciweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u337",
      "name": "centiweber",
      "shortName": "cWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-26",
        "u326": "(v)=>v*1e-23",
        "u327": "(v)=>v*1e-20",
        "u328": "(v)=>v*1e-17",
        "u329": "(v)=>v*1e-14",
        "u330": "(v)=>v*1e-11",
        "u331": "(v)=>v*1e-08",
        "u332": "(v)=>v*1e-05",
        "u333": "(v)=>v*0.0001",
        "u334": "(v)=>v*0.001",
        "u335": "(v)=>v*0.01",
        "u336": "(v)=>v*0.1",
        "u338": "(v)=>v*10",
        "u339": "(v)=>v*10000",
        "u340": "(v)=>v*10000000",
        "u341": "(v)=>v*10000000000",
        "u342": "(v)=>v*10000000000000",
        "u343": "(v)=>v*1e+16",
        "u344": "(v)=>v*1e+19",
        "u345": "(v)=>v*1e+22"
      },
      "description": "A centiweber (cWb) is an SI unit of magneticFlux applying the centi‑ prefix (10^-2). One centiweber equals 0.01 webers. The centi prefix denotes a factor of 10^-2, so 1 centiweber equals 10^-2 webers. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centiweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centiweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centiweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centiweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centiweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centiweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centiweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centiweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u338",
      "name": "milliweber",
      "shortName": "mWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-27",
        "u326": "(v)=>v*1e-24",
        "u327": "(v)=>v*1e-21",
        "u328": "(v)=>v*1e-18",
        "u329": "(v)=>v*1e-15",
        "u330": "(v)=>v*1e-12",
        "u331": "(v)=>v*1e-09",
        "u332": "(v)=>v*1e-06",
        "u333": "(v)=>v*1e-05",
        "u334": "(v)=>v*0.0001",
        "u335": "(v)=>v*0.001",
        "u336": "(v)=>v*0.01",
        "u337": "(v)=>v*0.1",
        "u339": "(v)=>v*1000",
        "u340": "(v)=>v*1000000",
        "u341": "(v)=>v*1000000000",
        "u342": "(v)=>v*1000000000000",
        "u343": "(v)=>v*1e+15",
        "u344": "(v)=>v*1e+18",
        "u345": "(v)=>v*1e+21"
      },
      "description": "A milliweber (mWb) is an SI unit of magneticFlux applying the milli‑ prefix (10^-3). One milliweber equals 0.001 webers. The milli prefix denotes a factor of 10^-3, so 1 milliweber equals 10^-3 webers. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Milliweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of milliweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent milliweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, milliweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when milliweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding milliweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed milliweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of milliweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u339",
      "name": "microweber",
      "shortName": "μWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-30",
        "u326": "(v)=>v*1e-27",
        "u327": "(v)=>v*1e-24",
        "u328": "(v)=>v*1e-21",
        "u329": "(v)=>v*1e-18",
        "u330": "(v)=>v*1e-15",
        "u331": "(v)=>v*1e-12",
        "u332": "(v)=>v*1e-09",
        "u333": "(v)=>v*1e-08",
        "u334": "(v)=>v*1e-07",
        "u335": "(v)=>v*1e-06",
        "u336": "(v)=>v*1e-05",
        "u337": "(v)=>v*0.0001",
        "u338": "(v)=>v*0.001",
        "u340": "(v)=>v*1000",
        "u341": "(v)=>v*1000000",
        "u342": "(v)=>v*1000000000",
        "u343": "(v)=>v*1000000000000",
        "u344": "(v)=>v*1e+15",
        "u345": "(v)=>v*1e+18"
      },
      "description": "A microweber (μWb) is an SI unit of magneticFlux applying the micro‑ prefix (10^-6). One microweber equals 1e-06 webers. The micro prefix denotes a factor of 10^-6, so 1 microweber equals 10^-6 webers. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u340",
      "name": "nanoweber",
      "shortName": "nWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-33",
        "u326": "(v)=>v*1e-30",
        "u327": "(v)=>v*1e-27",
        "u328": "(v)=>v*1e-24",
        "u329": "(v)=>v*1e-21",
        "u330": "(v)=>v*1e-18",
        "u331": "(v)=>v*1e-15",
        "u332": "(v)=>v*1e-12",
        "u333": "(v)=>v*1e-11",
        "u334": "(v)=>v*1e-10",
        "u335": "(v)=>v*1e-09",
        "u336": "(v)=>v*1e-08",
        "u337": "(v)=>v*1e-07",
        "u338": "(v)=>v*1e-06",
        "u339": "(v)=>v*0.001",
        "u341": "(v)=>v*1000",
        "u342": "(v)=>v*1000000",
        "u343": "(v)=>v*1000000000",
        "u344": "(v)=>v*1000000000000",
        "u345": "(v)=>v*1e+15"
      },
      "description": "A nanoweber (nWb) is an SI unit of magneticFlux applying the nano‑ prefix (10^-9). One nanoweber equals 1e-09 webers. The nano prefix denotes a factor of 10^-9, so 1 nanoweber equals 10^-9 webers. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanoweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanoweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanoweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanoweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanoweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanoweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanoweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanoweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u341",
      "name": "picoweber",
      "shortName": "pWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-36",
        "u326": "(v)=>v*1e-33",
        "u327": "(v)=>v*1e-30",
        "u328": "(v)=>v*1e-27",
        "u329": "(v)=>v*1e-24",
        "u330": "(v)=>v*1e-21",
        "u331": "(v)=>v*1e-18",
        "u332": "(v)=>v*1e-15",
        "u333": "(v)=>v*1e-14",
        "u334": "(v)=>v*1e-13",
        "u335": "(v)=>v*1e-12",
        "u336": "(v)=>v*1e-11",
        "u337": "(v)=>v*1e-10",
        "u338": "(v)=>v*1e-09",
        "u339": "(v)=>v*1e-06",
        "u340": "(v)=>v*0.001",
        "u342": "(v)=>v*1000",
        "u343": "(v)=>v*1000000",
        "u344": "(v)=>v*1000000000",
        "u345": "(v)=>v*1000000000000"
      },
      "description": "A picoweber (pWb) is an SI unit of magneticFlux applying the pico‑ prefix (10^-12). One picoweber equals 1e-12 webers. The pico prefix denotes a factor of 10^-12, so 1 picoweber equals 10^-12 webers. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picoweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picoweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picoweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picoweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picoweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picoweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picoweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picoweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u342",
      "name": "femtoweber",
      "shortName": "fWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-39",
        "u326": "(v)=>v*1e-36",
        "u327": "(v)=>v*1e-33",
        "u328": "(v)=>v*1e-30",
        "u329": "(v)=>v*1e-27",
        "u330": "(v)=>v*1e-24",
        "u331": "(v)=>v*1e-21",
        "u332": "(v)=>v*1e-18",
        "u333": "(v)=>v*1e-17",
        "u334": "(v)=>v*1e-16",
        "u335": "(v)=>v*1e-15",
        "u336": "(v)=>v*1e-14",
        "u337": "(v)=>v*1e-13",
        "u338": "(v)=>v*1e-12",
        "u339": "(v)=>v*1e-09",
        "u340": "(v)=>v*1e-06",
        "u341": "(v)=>v*0.001",
        "u343": "(v)=>v*1000",
        "u344": "(v)=>v*1000000",
        "u345": "(v)=>v*1000000000"
      },
      "description": "A femtoweber (fWb) is an SI unit of magneticFlux applying the femto‑ prefix (10^-15). One femtoweber equals 1e-15 webers. The femto prefix denotes a factor of 10^-15, so 1 femtoweber equals 10^-15 webers. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtoweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtoweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtoweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtoweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtoweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtoweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtoweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtoweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u343",
      "name": "attoweber",
      "shortName": "aWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-42",
        "u326": "(v)=>v*1e-39",
        "u327": "(v)=>v*1e-36",
        "u328": "(v)=>v*1e-33",
        "u329": "(v)=>v*1e-30",
        "u330": "(v)=>v*1e-27",
        "u331": "(v)=>v*1e-24",
        "u332": "(v)=>v*1e-21",
        "u333": "(v)=>v*1e-20",
        "u334": "(v)=>v*1e-19",
        "u335": "(v)=>v*1e-18",
        "u336": "(v)=>v*1e-17",
        "u337": "(v)=>v*1e-16",
        "u338": "(v)=>v*1e-15",
        "u339": "(v)=>v*1e-12",
        "u340": "(v)=>v*1e-09",
        "u341": "(v)=>v*1e-06",
        "u342": "(v)=>v*0.001",
        "u344": "(v)=>v*1000",
        "u345": "(v)=>v*1000000"
      },
      "description": "A attoweber (aWb) is an SI unit of magneticFlux applying the atto‑ prefix (10^-18). One attoweber equals 1e-18 webers. The atto prefix denotes a factor of 10^-18, so 1 attoweber equals 10^-18 webers. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attoweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attoweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attoweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attoweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attoweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attoweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attoweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attoweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u344",
      "name": "zeptoweber",
      "shortName": "zWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-45",
        "u326": "(v)=>v*1e-42",
        "u327": "(v)=>v*1e-39",
        "u328": "(v)=>v*1e-36",
        "u329": "(v)=>v*1e-33",
        "u330": "(v)=>v*1e-30",
        "u331": "(v)=>v*1e-27",
        "u332": "(v)=>v*1e-24",
        "u333": "(v)=>v*1e-23",
        "u334": "(v)=>v*1e-22",
        "u335": "(v)=>v*1e-21",
        "u336": "(v)=>v*1e-20",
        "u337": "(v)=>v*1e-19",
        "u338": "(v)=>v*1e-18",
        "u339": "(v)=>v*1e-15",
        "u340": "(v)=>v*1e-12",
        "u341": "(v)=>v*1e-09",
        "u342": "(v)=>v*1e-06",
        "u343": "(v)=>v*0.001",
        "u345": "(v)=>v*1000"
      },
      "description": "A zeptoweber (zWb) is an SI unit of magneticFlux applying the zepto‑ prefix (10^-21). One zeptoweber equals 1e-21 webers. The zepto prefix denotes a factor of 10^-21, so 1 zeptoweber equals 10^-21 webers. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptoweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptoweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptoweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptoweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptoweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptoweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptoweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptoweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u345",
      "name": "yoctoweber",
      "shortName": "yWb",
      "categoryId": "c17",
      "conversions": {
        "u325": "(v)=>v*1e-48",
        "u326": "(v)=>v*1e-45",
        "u327": "(v)=>v*1e-42",
        "u328": "(v)=>v*1e-39",
        "u329": "(v)=>v*1e-36",
        "u330": "(v)=>v*1e-33",
        "u331": "(v)=>v*1e-30",
        "u332": "(v)=>v*1e-27",
        "u333": "(v)=>v*1e-26",
        "u334": "(v)=>v*1e-25",
        "u335": "(v)=>v*1e-24",
        "u336": "(v)=>v*1e-23",
        "u337": "(v)=>v*1e-22",
        "u338": "(v)=>v*1e-21",
        "u339": "(v)=>v*1e-18",
        "u340": "(v)=>v*1e-15",
        "u341": "(v)=>v*1e-12",
        "u342": "(v)=>v*1e-09",
        "u343": "(v)=>v*1e-06",
        "u344": "(v)=>v*0.001"
      },
      "description": "A yoctoweber (yWb) is an SI unit of magneticFlux applying the yocto‑ prefix (10^-24). One yoctoweber equals 1e-24 webers. The yocto prefix denotes a factor of 10^-24, so 1 yoctoweber equals 10^-24 webers. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctoweber belongs to the broader physical quantity of magneticflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctoweber often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctoweber as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctoweber is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctoweber values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctoweber has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctoweber metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctoweber fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u346",
      "name": "yottatesla",
      "shortName": "YT",
      "categoryId": "c18",
      "conversions": {
        "u347": "(v)=>v*1000",
        "u348": "(v)=>v*1000000",
        "u349": "(v)=>v*1000000000",
        "u350": "(v)=>v*1000000000000",
        "u351": "(v)=>v*1e+15",
        "u352": "(v)=>v*1e+18",
        "u353": "(v)=>v*1e+21",
        "u354": "(v)=>v*1e+22",
        "u355": "(v)=>v*1e+23",
        "u356": "(v)=>v*1e+24",
        "u357": "(v)=>v*1e+25",
        "u358": "(v)=>v*1e+26",
        "u359": "(v)=>v*1e+27",
        "u360": "(v)=>v*1e+30",
        "u361": "(v)=>v*1e+33",
        "u362": "(v)=>v*1e+36",
        "u363": "(v)=>v*1e+39",
        "u364": "(v)=>v*1e+42",
        "u365": "(v)=>v*1e+45",
        "u366": "(v)=>v*1e+48"
      },
      "description": "A yottatesla (YT) is an SI unit of magneticFluxDensity applying the yotta‑ prefix (10^24). One yottatesla equals 1e+24 teslas. The yotta prefix denotes a factor of 10^24, so 1 yottatesla equals 10^24 teslas. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottatesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottatesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottatesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottatesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottatesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottatesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottatesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottatesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u347",
      "name": "zettatesla",
      "shortName": "ZT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*0.001",
        "u348": "(v)=>v*1000",
        "u349": "(v)=>v*1000000",
        "u350": "(v)=>v*1000000000",
        "u351": "(v)=>v*1000000000000",
        "u352": "(v)=>v*1e+15",
        "u353": "(v)=>v*1e+18",
        "u354": "(v)=>v*1e+19",
        "u355": "(v)=>v*1e+20",
        "u356": "(v)=>v*1e+21",
        "u357": "(v)=>v*1e+22",
        "u358": "(v)=>v*1e+23",
        "u359": "(v)=>v*1e+24",
        "u360": "(v)=>v*1e+27",
        "u361": "(v)=>v*1e+30",
        "u362": "(v)=>v*1e+33",
        "u363": "(v)=>v*1e+36",
        "u364": "(v)=>v*1e+39",
        "u365": "(v)=>v*1e+42",
        "u366": "(v)=>v*1e+45"
      },
      "description": "A zettatesla (ZT) is an SI unit of magneticFluxDensity applying the zetta‑ prefix (10^21). One zettatesla equals 1e+21 teslas. The zetta prefix denotes a factor of 10^21, so 1 zettatesla equals 10^21 teslas. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettatesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettatesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettatesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettatesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettatesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettatesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettatesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettatesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u348",
      "name": "exatesla",
      "shortName": "ET",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-06",
        "u347": "(v)=>v*0.001",
        "u349": "(v)=>v*1000",
        "u350": "(v)=>v*1000000",
        "u351": "(v)=>v*1000000000",
        "u352": "(v)=>v*1000000000000",
        "u353": "(v)=>v*1e+15",
        "u354": "(v)=>v*1e+16",
        "u355": "(v)=>v*1e+17",
        "u356": "(v)=>v*1e+18",
        "u357": "(v)=>v*1e+19",
        "u358": "(v)=>v*1e+20",
        "u359": "(v)=>v*1e+21",
        "u360": "(v)=>v*1e+24",
        "u361": "(v)=>v*1e+27",
        "u362": "(v)=>v*1e+30",
        "u363": "(v)=>v*1e+33",
        "u364": "(v)=>v*1e+36",
        "u365": "(v)=>v*1e+39",
        "u366": "(v)=>v*1e+42"
      },
      "description": "A exatesla (ET) is an SI unit of magneticFluxDensity applying the exa‑ prefix (10^18). One exatesla equals 1e+18 teslas. The exa prefix denotes a factor of 10^18, so 1 exatesla equals 10^18 teslas. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exatesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exatesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exatesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exatesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exatesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exatesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exatesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exatesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u349",
      "name": "petatesla",
      "shortName": "PT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-09",
        "u347": "(v)=>v*1e-06",
        "u348": "(v)=>v*0.001",
        "u350": "(v)=>v*1000",
        "u351": "(v)=>v*1000000",
        "u352": "(v)=>v*1000000000",
        "u353": "(v)=>v*1000000000000",
        "u354": "(v)=>v*10000000000000",
        "u355": "(v)=>v*100000000000000",
        "u356": "(v)=>v*1e+15",
        "u357": "(v)=>v*1e+16",
        "u358": "(v)=>v*1e+17",
        "u359": "(v)=>v*1e+18",
        "u360": "(v)=>v*1e+21",
        "u361": "(v)=>v*1e+24",
        "u362": "(v)=>v*1e+27",
        "u363": "(v)=>v*1e+30",
        "u364": "(v)=>v*1e+33",
        "u365": "(v)=>v*1e+36",
        "u366": "(v)=>v*1e+39"
      },
      "description": "A petatesla (PT) is an SI unit of magneticFluxDensity applying the peta‑ prefix (10^15). One petatesla equals 1e+15 teslas. The peta prefix denotes a factor of 10^15, so 1 petatesla equals 10^15 teslas. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petatesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petatesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petatesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petatesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petatesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petatesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petatesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petatesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u350",
      "name": "teratesla",
      "shortName": "TT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-12",
        "u347": "(v)=>v*1e-09",
        "u348": "(v)=>v*1e-06",
        "u349": "(v)=>v*0.001",
        "u351": "(v)=>v*1000",
        "u352": "(v)=>v*1000000",
        "u353": "(v)=>v*1000000000",
        "u354": "(v)=>v*10000000000",
        "u355": "(v)=>v*100000000000",
        "u356": "(v)=>v*1000000000000",
        "u357": "(v)=>v*10000000000000",
        "u358": "(v)=>v*100000000000000",
        "u359": "(v)=>v*1e+15",
        "u360": "(v)=>v*1e+18",
        "u361": "(v)=>v*1e+21",
        "u362": "(v)=>v*1e+24",
        "u363": "(v)=>v*1e+27",
        "u364": "(v)=>v*1e+30",
        "u365": "(v)=>v*1e+33",
        "u366": "(v)=>v*1e+36"
      },
      "description": "A teratesla (TT) is an SI unit of magneticFluxDensity applying the tera‑ prefix (10^12). One teratesla equals 1e+12 teslas. The tera prefix denotes a factor of 10^12, so 1 teratesla equals 10^12 teslas. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Teratesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teratesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teratesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teratesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teratesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teratesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teratesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teratesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u351",
      "name": "gigatesla",
      "shortName": "GT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-15",
        "u347": "(v)=>v*1e-12",
        "u348": "(v)=>v*1e-09",
        "u349": "(v)=>v*1e-06",
        "u350": "(v)=>v*0.001",
        "u352": "(v)=>v*1000",
        "u353": "(v)=>v*1000000",
        "u354": "(v)=>v*10000000",
        "u355": "(v)=>v*100000000",
        "u356": "(v)=>v*1000000000",
        "u357": "(v)=>v*10000000000",
        "u358": "(v)=>v*100000000000",
        "u359": "(v)=>v*1000000000000",
        "u360": "(v)=>v*1e+15",
        "u361": "(v)=>v*1e+18",
        "u362": "(v)=>v*1e+21",
        "u363": "(v)=>v*1e+24",
        "u364": "(v)=>v*1e+27",
        "u365": "(v)=>v*1e+30",
        "u366": "(v)=>v*1e+33"
      },
      "description": "A gigatesla (GT) is an SI unit of magneticFluxDensity applying the giga‑ prefix (10^9). One gigatesla equals 1000000000 teslas. The giga prefix denotes a factor of 10^9, so 1 gigatesla equals 10^9 teslas. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigatesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigatesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigatesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigatesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigatesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigatesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigatesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigatesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u352",
      "name": "megatesla",
      "shortName": "MT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-18",
        "u347": "(v)=>v*1e-15",
        "u348": "(v)=>v*1e-12",
        "u349": "(v)=>v*1e-09",
        "u350": "(v)=>v*1e-06",
        "u351": "(v)=>v*0.001",
        "u353": "(v)=>v*1000",
        "u354": "(v)=>v*10000",
        "u355": "(v)=>v*100000",
        "u356": "(v)=>v*1000000",
        "u357": "(v)=>v*10000000",
        "u358": "(v)=>v*100000000",
        "u359": "(v)=>v*1000000000",
        "u360": "(v)=>v*1000000000000",
        "u361": "(v)=>v*1e+15",
        "u362": "(v)=>v*1e+18",
        "u363": "(v)=>v*1e+21",
        "u364": "(v)=>v*1e+24",
        "u365": "(v)=>v*1e+27",
        "u366": "(v)=>v*1e+30"
      },
      "description": "A megatesla (MT) is an SI unit of magneticFluxDensity applying the mega‑ prefix (10^6). One megatesla equals 1000000 teslas. The mega prefix denotes a factor of 10^6, so 1 megatesla equals 10^6 teslas. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megatesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megatesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megatesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megatesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megatesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megatesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megatesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megatesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u353",
      "name": "kilotesla",
      "shortName": "kT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-21",
        "u347": "(v)=>v*1e-18",
        "u348": "(v)=>v*1e-15",
        "u349": "(v)=>v*1e-12",
        "u350": "(v)=>v*1e-09",
        "u351": "(v)=>v*1e-06",
        "u352": "(v)=>v*0.001",
        "u354": "(v)=>v*10",
        "u355": "(v)=>v*100",
        "u356": "(v)=>v*1000",
        "u357": "(v)=>v*10000",
        "u358": "(v)=>v*100000",
        "u359": "(v)=>v*1000000",
        "u360": "(v)=>v*1000000000",
        "u361": "(v)=>v*1000000000000",
        "u362": "(v)=>v*1e+15",
        "u363": "(v)=>v*1e+18",
        "u364": "(v)=>v*1e+21",
        "u365": "(v)=>v*1e+24",
        "u366": "(v)=>v*1e+27"
      },
      "description": "A kilotesla (kT) is an SI unit of magneticFluxDensity applying the kilo‑ prefix (10^3). One kilotesla equals 1000 teslas. The kilo prefix denotes a factor of 10^3, so 1 kilotesla equals 10^3 teslas. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilotesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilotesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilotesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilotesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilotesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilotesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilotesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilotesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u354",
      "name": "hectotesla",
      "shortName": "hT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-22",
        "u347": "(v)=>v*1e-19",
        "u348": "(v)=>v*1e-16",
        "u349": "(v)=>v*1e-13",
        "u350": "(v)=>v*1e-10",
        "u351": "(v)=>v*1e-07",
        "u352": "(v)=>v*0.0001",
        "u353": "(v)=>v*0.1",
        "u355": "(v)=>v*10",
        "u356": "(v)=>v*100",
        "u357": "(v)=>v*1000",
        "u358": "(v)=>v*10000",
        "u359": "(v)=>v*100000",
        "u360": "(v)=>v*100000000",
        "u361": "(v)=>v*100000000000",
        "u362": "(v)=>v*100000000000000",
        "u363": "(v)=>v*1e+17",
        "u364": "(v)=>v*1e+20",
        "u365": "(v)=>v*1e+23",
        "u366": "(v)=>v*1e+26"
      },
      "description": "A hectotesla (hT) is an SI unit of magneticFluxDensity applying the hecto‑ prefix (10^2). One hectotesla equals 100 teslas. The hecto prefix denotes a factor of 10^2, so 1 hectotesla equals 10^2 teslas. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectotesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectotesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectotesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectotesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectotesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectotesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectotesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectotesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u355",
      "name": "decatesla",
      "shortName": "daT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-23",
        "u347": "(v)=>v*1e-20",
        "u348": "(v)=>v*1e-17",
        "u349": "(v)=>v*1e-14",
        "u350": "(v)=>v*1e-11",
        "u351": "(v)=>v*1e-08",
        "u352": "(v)=>v*1e-05",
        "u353": "(v)=>v*0.01",
        "u354": "(v)=>v*0.1",
        "u356": "(v)=>v*10",
        "u357": "(v)=>v*100",
        "u358": "(v)=>v*1000",
        "u359": "(v)=>v*10000",
        "u360": "(v)=>v*10000000",
        "u361": "(v)=>v*10000000000",
        "u362": "(v)=>v*10000000000000",
        "u363": "(v)=>v*1e+16",
        "u364": "(v)=>v*1e+19",
        "u365": "(v)=>v*1e+22",
        "u366": "(v)=>v*1e+25"
      },
      "description": "A decatesla (daT) is an SI unit of magneticFluxDensity applying the deca‑ prefix (10^1). One decatesla equals 10 teslas. The deca prefix denotes a factor of 10^1, so 1 decatesla equals 10^1 teslas. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decatesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decatesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decatesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decatesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decatesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decatesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decatesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decatesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u356",
      "name": "tesla",
      "shortName": "T",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-24",
        "u347": "(v)=>v*1e-21",
        "u348": "(v)=>v*1e-18",
        "u349": "(v)=>v*1e-15",
        "u350": "(v)=>v*1e-12",
        "u351": "(v)=>v*1e-09",
        "u352": "(v)=>v*1e-06",
        "u353": "(v)=>v*0.001",
        "u354": "(v)=>v*0.01",
        "u355": "(v)=>v*0.1",
        "u357": "(v)=>v*10",
        "u358": "(v)=>v*100",
        "u359": "(v)=>v*1000",
        "u360": "(v)=>v*1000000",
        "u361": "(v)=>v*1000000000",
        "u362": "(v)=>v*1000000000000",
        "u363": "(v)=>v*1e+15",
        "u364": "(v)=>v*1e+18",
        "u365": "(v)=>v*1e+21",
        "u366": "(v)=>v*1e+24"
      },
      "description": "The tesla (T) is the SI derived unit of magnetic flux density, equal to one weber per square metre. Tesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of tesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent tesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, tesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when tesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding tesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed tesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of tesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u357",
      "name": "decitesla",
      "shortName": "dT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-25",
        "u347": "(v)=>v*1e-22",
        "u348": "(v)=>v*1e-19",
        "u349": "(v)=>v*1e-16",
        "u350": "(v)=>v*1e-13",
        "u351": "(v)=>v*1e-10",
        "u352": "(v)=>v*1e-07",
        "u353": "(v)=>v*0.0001",
        "u354": "(v)=>v*0.001",
        "u355": "(v)=>v*0.01",
        "u356": "(v)=>v*0.1",
        "u358": "(v)=>v*10",
        "u359": "(v)=>v*100",
        "u360": "(v)=>v*100000",
        "u361": "(v)=>v*100000000",
        "u362": "(v)=>v*100000000000",
        "u363": "(v)=>v*100000000000000",
        "u364": "(v)=>v*1e+17",
        "u365": "(v)=>v*1e+20",
        "u366": "(v)=>v*1e+23"
      },
      "description": "A decitesla (dT) is an SI unit of magneticFluxDensity applying the deci‑ prefix (10^-1). One decitesla equals 0.1 teslas. The deci prefix denotes a factor of 10^-1, so 1 decitesla equals 10^-1 teslas. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decitesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decitesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decitesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decitesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decitesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decitesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decitesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decitesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u358",
      "name": "centitesla",
      "shortName": "cT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-26",
        "u347": "(v)=>v*1e-23",
        "u348": "(v)=>v*1e-20",
        "u349": "(v)=>v*1e-17",
        "u350": "(v)=>v*1e-14",
        "u351": "(v)=>v*1e-11",
        "u352": "(v)=>v*1e-08",
        "u353": "(v)=>v*1e-05",
        "u354": "(v)=>v*0.0001",
        "u355": "(v)=>v*0.001",
        "u356": "(v)=>v*0.01",
        "u357": "(v)=>v*0.1",
        "u359": "(v)=>v*10",
        "u360": "(v)=>v*10000",
        "u361": "(v)=>v*10000000",
        "u362": "(v)=>v*10000000000",
        "u363": "(v)=>v*10000000000000",
        "u364": "(v)=>v*1e+16",
        "u365": "(v)=>v*1e+19",
        "u366": "(v)=>v*1e+22"
      },
      "description": "A centitesla (cT) is an SI unit of magneticFluxDensity applying the centi‑ prefix (10^-2). One centitesla equals 0.01 teslas. The centi prefix denotes a factor of 10^-2, so 1 centitesla equals 10^-2 teslas. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centitesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centitesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centitesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centitesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centitesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centitesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centitesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centitesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u359",
      "name": "millitesla",
      "shortName": "mT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-27",
        "u347": "(v)=>v*1e-24",
        "u348": "(v)=>v*1e-21",
        "u349": "(v)=>v*1e-18",
        "u350": "(v)=>v*1e-15",
        "u351": "(v)=>v*1e-12",
        "u352": "(v)=>v*1e-09",
        "u353": "(v)=>v*1e-06",
        "u354": "(v)=>v*1e-05",
        "u355": "(v)=>v*0.0001",
        "u356": "(v)=>v*0.001",
        "u357": "(v)=>v*0.01",
        "u358": "(v)=>v*0.1",
        "u360": "(v)=>v*1000",
        "u361": "(v)=>v*1000000",
        "u362": "(v)=>v*1000000000",
        "u363": "(v)=>v*1000000000000",
        "u364": "(v)=>v*1e+15",
        "u365": "(v)=>v*1e+18",
        "u366": "(v)=>v*1e+21"
      },
      "description": "A millitesla (mT) is an SI unit of magneticFluxDensity applying the milli‑ prefix (10^-3). One millitesla equals 0.001 teslas. The milli prefix denotes a factor of 10^-3, so 1 millitesla equals 10^-3 teslas. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millitesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millitesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millitesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millitesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millitesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millitesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millitesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millitesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u360",
      "name": "microtesla",
      "shortName": "μT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-30",
        "u347": "(v)=>v*1e-27",
        "u348": "(v)=>v*1e-24",
        "u349": "(v)=>v*1e-21",
        "u350": "(v)=>v*1e-18",
        "u351": "(v)=>v*1e-15",
        "u352": "(v)=>v*1e-12",
        "u353": "(v)=>v*1e-09",
        "u354": "(v)=>v*1e-08",
        "u355": "(v)=>v*1e-07",
        "u356": "(v)=>v*1e-06",
        "u357": "(v)=>v*1e-05",
        "u358": "(v)=>v*0.0001",
        "u359": "(v)=>v*0.001",
        "u361": "(v)=>v*1000",
        "u362": "(v)=>v*1000000",
        "u363": "(v)=>v*1000000000",
        "u364": "(v)=>v*1000000000000",
        "u365": "(v)=>v*1e+15",
        "u366": "(v)=>v*1e+18"
      },
      "description": "A microtesla (μT) is an SI unit of magneticFluxDensity applying the micro‑ prefix (10^-6). One microtesla equals 1e-06 teslas. The micro prefix denotes a factor of 10^-6, so 1 microtesla equals 10^-6 teslas. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microtesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microtesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microtesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microtesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microtesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microtesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microtesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microtesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u361",
      "name": "nanotesla",
      "shortName": "nT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-33",
        "u347": "(v)=>v*1e-30",
        "u348": "(v)=>v*1e-27",
        "u349": "(v)=>v*1e-24",
        "u350": "(v)=>v*1e-21",
        "u351": "(v)=>v*1e-18",
        "u352": "(v)=>v*1e-15",
        "u353": "(v)=>v*1e-12",
        "u354": "(v)=>v*1e-11",
        "u355": "(v)=>v*1e-10",
        "u356": "(v)=>v*1e-09",
        "u357": "(v)=>v*1e-08",
        "u358": "(v)=>v*1e-07",
        "u359": "(v)=>v*1e-06",
        "u360": "(v)=>v*0.001",
        "u362": "(v)=>v*1000",
        "u363": "(v)=>v*1000000",
        "u364": "(v)=>v*1000000000",
        "u365": "(v)=>v*1000000000000",
        "u366": "(v)=>v*1e+15"
      },
      "description": "A nanotesla (nT) is an SI unit of magneticFluxDensity applying the nano‑ prefix (10^-9). One nanotesla equals 1e-09 teslas. The nano prefix denotes a factor of 10^-9, so 1 nanotesla equals 10^-9 teslas. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanotesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanotesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanotesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanotesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanotesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanotesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanotesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanotesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u362",
      "name": "picotesla",
      "shortName": "pT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-36",
        "u347": "(v)=>v*1e-33",
        "u348": "(v)=>v*1e-30",
        "u349": "(v)=>v*1e-27",
        "u350": "(v)=>v*1e-24",
        "u351": "(v)=>v*1e-21",
        "u352": "(v)=>v*1e-18",
        "u353": "(v)=>v*1e-15",
        "u354": "(v)=>v*1e-14",
        "u355": "(v)=>v*1e-13",
        "u356": "(v)=>v*1e-12",
        "u357": "(v)=>v*1e-11",
        "u358": "(v)=>v*1e-10",
        "u359": "(v)=>v*1e-09",
        "u360": "(v)=>v*1e-06",
        "u361": "(v)=>v*0.001",
        "u363": "(v)=>v*1000",
        "u364": "(v)=>v*1000000",
        "u365": "(v)=>v*1000000000",
        "u366": "(v)=>v*1000000000000"
      },
      "description": "A picotesla (pT) is an SI unit of magneticFluxDensity applying the pico‑ prefix (10^-12). One picotesla equals 1e-12 teslas. The pico prefix denotes a factor of 10^-12, so 1 picotesla equals 10^-12 teslas. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picotesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picotesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picotesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picotesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picotesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picotesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picotesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picotesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u363",
      "name": "femtotesla",
      "shortName": "fT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-39",
        "u347": "(v)=>v*1e-36",
        "u348": "(v)=>v*1e-33",
        "u349": "(v)=>v*1e-30",
        "u350": "(v)=>v*1e-27",
        "u351": "(v)=>v*1e-24",
        "u352": "(v)=>v*1e-21",
        "u353": "(v)=>v*1e-18",
        "u354": "(v)=>v*1e-17",
        "u355": "(v)=>v*1e-16",
        "u356": "(v)=>v*1e-15",
        "u357": "(v)=>v*1e-14",
        "u358": "(v)=>v*1e-13",
        "u359": "(v)=>v*1e-12",
        "u360": "(v)=>v*1e-09",
        "u361": "(v)=>v*1e-06",
        "u362": "(v)=>v*0.001",
        "u364": "(v)=>v*1000",
        "u365": "(v)=>v*1000000",
        "u366": "(v)=>v*1000000000"
      },
      "description": "A femtotesla (fT) is an SI unit of magneticFluxDensity applying the femto‑ prefix (10^-15). One femtotesla equals 1e-15 teslas. The femto prefix denotes a factor of 10^-15, so 1 femtotesla equals 10^-15 teslas. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtotesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtotesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtotesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtotesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtotesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtotesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtotesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtotesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u364",
      "name": "attotesla",
      "shortName": "aT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-42",
        "u347": "(v)=>v*1e-39",
        "u348": "(v)=>v*1e-36",
        "u349": "(v)=>v*1e-33",
        "u350": "(v)=>v*1e-30",
        "u351": "(v)=>v*1e-27",
        "u352": "(v)=>v*1e-24",
        "u353": "(v)=>v*1e-21",
        "u354": "(v)=>v*1e-20",
        "u355": "(v)=>v*1e-19",
        "u356": "(v)=>v*1e-18",
        "u357": "(v)=>v*1e-17",
        "u358": "(v)=>v*1e-16",
        "u359": "(v)=>v*1e-15",
        "u360": "(v)=>v*1e-12",
        "u361": "(v)=>v*1e-09",
        "u362": "(v)=>v*1e-06",
        "u363": "(v)=>v*0.001",
        "u365": "(v)=>v*1000",
        "u366": "(v)=>v*1000000"
      },
      "description": "A attotesla (aT) is an SI unit of magneticFluxDensity applying the atto‑ prefix (10^-18). One attotesla equals 1e-18 teslas. The atto prefix denotes a factor of 10^-18, so 1 attotesla equals 10^-18 teslas. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attotesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attotesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attotesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attotesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attotesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attotesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attotesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attotesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u365",
      "name": "zeptotesla",
      "shortName": "zT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-45",
        "u347": "(v)=>v*1e-42",
        "u348": "(v)=>v*1e-39",
        "u349": "(v)=>v*1e-36",
        "u350": "(v)=>v*1e-33",
        "u351": "(v)=>v*1e-30",
        "u352": "(v)=>v*1e-27",
        "u353": "(v)=>v*1e-24",
        "u354": "(v)=>v*1e-23",
        "u355": "(v)=>v*1e-22",
        "u356": "(v)=>v*1e-21",
        "u357": "(v)=>v*1e-20",
        "u358": "(v)=>v*1e-19",
        "u359": "(v)=>v*1e-18",
        "u360": "(v)=>v*1e-15",
        "u361": "(v)=>v*1e-12",
        "u362": "(v)=>v*1e-09",
        "u363": "(v)=>v*1e-06",
        "u364": "(v)=>v*0.001",
        "u366": "(v)=>v*1000"
      },
      "description": "A zeptotesla (zT) is an SI unit of magneticFluxDensity applying the zepto‑ prefix (10^-21). One zeptotesla equals 1e-21 teslas. The zepto prefix denotes a factor of 10^-21, so 1 zeptotesla equals 10^-21 teslas. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptotesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptotesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptotesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptotesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptotesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptotesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptotesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptotesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u366",
      "name": "yoctotesla",
      "shortName": "yT",
      "categoryId": "c18",
      "conversions": {
        "u346": "(v)=>v*1e-48",
        "u347": "(v)=>v*1e-45",
        "u348": "(v)=>v*1e-42",
        "u349": "(v)=>v*1e-39",
        "u350": "(v)=>v*1e-36",
        "u351": "(v)=>v*1e-33",
        "u352": "(v)=>v*1e-30",
        "u353": "(v)=>v*1e-27",
        "u354": "(v)=>v*1e-26",
        "u355": "(v)=>v*1e-25",
        "u356": "(v)=>v*1e-24",
        "u357": "(v)=>v*1e-23",
        "u358": "(v)=>v*1e-22",
        "u359": "(v)=>v*1e-21",
        "u360": "(v)=>v*1e-18",
        "u361": "(v)=>v*1e-15",
        "u362": "(v)=>v*1e-12",
        "u363": "(v)=>v*1e-09",
        "u364": "(v)=>v*1e-06",
        "u365": "(v)=>v*0.001"
      },
      "description": "A yoctotesla (yT) is an SI unit of magneticFluxDensity applying the yocto‑ prefix (10^-24). One yoctotesla equals 1e-24 teslas. The yocto prefix denotes a factor of 10^-24, so 1 yoctotesla equals 10^-24 teslas. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctotesla belongs to the broader physical quantity of magneticfluxdensity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctotesla often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctotesla as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctotesla is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctotesla values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctotesla has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctotesla metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctotesla fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u367",
      "name": "yottasiemens",
      "shortName": "YS",
      "categoryId": "c5",
      "conversions": {
        "u368": "(v)=>v*1000",
        "u369": "(v)=>v*1000000",
        "u370": "(v)=>v*1000000000",
        "u371": "(v)=>v*1000000000000",
        "u372": "(v)=>v*1e+15",
        "u373": "(v)=>v*1e+18",
        "u374": "(v)=>v*1e+21",
        "u375": "(v)=>v*1e+22",
        "u376": "(v)=>v*1e+23",
        "u377": "(v)=>v*1e+24",
        "u378": "(v)=>v*1e+25",
        "u379": "(v)=>v*1e+26",
        "u380": "(v)=>v*1e+27",
        "u381": "(v)=>v*1e+30",
        "u382": "(v)=>v*1e+33",
        "u383": "(v)=>v*1e+36",
        "u384": "(v)=>v*1e+39",
        "u385": "(v)=>v*1e+42",
        "u386": "(v)=>v*1e+45",
        "u387": "(v)=>v*1e+48"
      },
      "description": "A yottasiemens (YS) is an SI unit of conductance applying the yotta‑ prefix (10^24). One yottasiemens equals 1e+24 siemenss. The yotta prefix denotes a factor of 10^24, so 1 yottasiemens equals 10^24 siemens. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottasiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottasiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottasiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottasiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottasiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottasiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottasiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottasiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u368",
      "name": "zettasiemens",
      "shortName": "ZS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*0.001",
        "u369": "(v)=>v*1000",
        "u370": "(v)=>v*1000000",
        "u371": "(v)=>v*1000000000",
        "u372": "(v)=>v*1000000000000",
        "u373": "(v)=>v*1e+15",
        "u374": "(v)=>v*1e+18",
        "u375": "(v)=>v*1e+19",
        "u376": "(v)=>v*1e+20",
        "u377": "(v)=>v*1e+21",
        "u378": "(v)=>v*1e+22",
        "u379": "(v)=>v*1e+23",
        "u380": "(v)=>v*1e+24",
        "u381": "(v)=>v*1e+27",
        "u382": "(v)=>v*1e+30",
        "u383": "(v)=>v*1e+33",
        "u384": "(v)=>v*1e+36",
        "u385": "(v)=>v*1e+39",
        "u386": "(v)=>v*1e+42",
        "u387": "(v)=>v*1e+45"
      },
      "description": "A zettasiemens (ZS) is an SI unit of conductance applying the zetta‑ prefix (10^21). One zettasiemens equals 1e+21 siemenss. The zetta prefix denotes a factor of 10^21, so 1 zettasiemens equals 10^21 siemens. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettasiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettasiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettasiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettasiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettasiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettasiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettasiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettasiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u369",
      "name": "exasiemens",
      "shortName": "ES",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-06",
        "u368": "(v)=>v*0.001",
        "u370": "(v)=>v*1000",
        "u371": "(v)=>v*1000000",
        "u372": "(v)=>v*1000000000",
        "u373": "(v)=>v*1000000000000",
        "u374": "(v)=>v*1e+15",
        "u375": "(v)=>v*1e+16",
        "u376": "(v)=>v*1e+17",
        "u377": "(v)=>v*1e+18",
        "u378": "(v)=>v*1e+19",
        "u379": "(v)=>v*1e+20",
        "u380": "(v)=>v*1e+21",
        "u381": "(v)=>v*1e+24",
        "u382": "(v)=>v*1e+27",
        "u383": "(v)=>v*1e+30",
        "u384": "(v)=>v*1e+33",
        "u385": "(v)=>v*1e+36",
        "u386": "(v)=>v*1e+39",
        "u387": "(v)=>v*1e+42"
      },
      "description": "A exasiemens (ES) is an SI unit of conductance applying the exa‑ prefix (10^18). One exasiemens equals 1e+18 siemenss. The exa prefix denotes a factor of 10^18, so 1 exasiemens equals 10^18 siemens. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exasiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exasiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exasiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exasiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exasiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exasiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exasiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exasiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u370",
      "name": "petasiemens",
      "shortName": "PS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-09",
        "u368": "(v)=>v*1e-06",
        "u369": "(v)=>v*0.001",
        "u371": "(v)=>v*1000",
        "u372": "(v)=>v*1000000",
        "u373": "(v)=>v*1000000000",
        "u374": "(v)=>v*1000000000000",
        "u375": "(v)=>v*10000000000000",
        "u376": "(v)=>v*100000000000000",
        "u377": "(v)=>v*1e+15",
        "u378": "(v)=>v*1e+16",
        "u379": "(v)=>v*1e+17",
        "u380": "(v)=>v*1e+18",
        "u381": "(v)=>v*1e+21",
        "u382": "(v)=>v*1e+24",
        "u383": "(v)=>v*1e+27",
        "u384": "(v)=>v*1e+30",
        "u385": "(v)=>v*1e+33",
        "u386": "(v)=>v*1e+36",
        "u387": "(v)=>v*1e+39"
      },
      "description": "A petasiemens (PS) is an SI unit of conductance applying the peta‑ prefix (10^15). One petasiemens equals 1e+15 siemenss. The peta prefix denotes a factor of 10^15, so 1 petasiemens equals 10^15 siemens. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petasiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petasiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petasiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petasiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petasiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petasiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petasiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petasiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u371",
      "name": "terasiemens",
      "shortName": "TS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-12",
        "u368": "(v)=>v*1e-09",
        "u369": "(v)=>v*1e-06",
        "u370": "(v)=>v*0.001",
        "u372": "(v)=>v*1000",
        "u373": "(v)=>v*1000000",
        "u374": "(v)=>v*1000000000",
        "u375": "(v)=>v*10000000000",
        "u376": "(v)=>v*100000000000",
        "u377": "(v)=>v*1000000000000",
        "u378": "(v)=>v*10000000000000",
        "u379": "(v)=>v*100000000000000",
        "u380": "(v)=>v*1e+15",
        "u381": "(v)=>v*1e+18",
        "u382": "(v)=>v*1e+21",
        "u383": "(v)=>v*1e+24",
        "u384": "(v)=>v*1e+27",
        "u385": "(v)=>v*1e+30",
        "u386": "(v)=>v*1e+33",
        "u387": "(v)=>v*1e+36"
      },
      "description": "A terasiemens (TS) is an SI unit of conductance applying the tera‑ prefix (10^12). One terasiemens equals 1e+12 siemenss. The tera prefix denotes a factor of 10^12, so 1 terasiemens equals 10^12 siemens. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Terasiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terasiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terasiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terasiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terasiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terasiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terasiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terasiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u372",
      "name": "gigasiemens",
      "shortName": "GS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-15",
        "u368": "(v)=>v*1e-12",
        "u369": "(v)=>v*1e-09",
        "u370": "(v)=>v*1e-06",
        "u371": "(v)=>v*0.001",
        "u373": "(v)=>v*1000",
        "u374": "(v)=>v*1000000",
        "u375": "(v)=>v*10000000",
        "u376": "(v)=>v*100000000",
        "u377": "(v)=>v*1000000000",
        "u378": "(v)=>v*10000000000",
        "u379": "(v)=>v*100000000000",
        "u380": "(v)=>v*1000000000000",
        "u381": "(v)=>v*1e+15",
        "u382": "(v)=>v*1e+18",
        "u383": "(v)=>v*1e+21",
        "u384": "(v)=>v*1e+24",
        "u385": "(v)=>v*1e+27",
        "u386": "(v)=>v*1e+30",
        "u387": "(v)=>v*1e+33"
      },
      "description": "A gigasiemens (GS) is an SI unit of conductance applying the giga‑ prefix (10^9). One gigasiemens equals 1000000000 siemenss. The giga prefix denotes a factor of 10^9, so 1 gigasiemens equals 10^9 siemens. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigasiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigasiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigasiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigasiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigasiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigasiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigasiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigasiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u373",
      "name": "megasiemens",
      "shortName": "MS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-18",
        "u368": "(v)=>v*1e-15",
        "u369": "(v)=>v*1e-12",
        "u370": "(v)=>v*1e-09",
        "u371": "(v)=>v*1e-06",
        "u372": "(v)=>v*0.001",
        "u374": "(v)=>v*1000",
        "u375": "(v)=>v*10000",
        "u376": "(v)=>v*100000",
        "u377": "(v)=>v*1000000",
        "u378": "(v)=>v*10000000",
        "u379": "(v)=>v*100000000",
        "u380": "(v)=>v*1000000000",
        "u381": "(v)=>v*1000000000000",
        "u382": "(v)=>v*1e+15",
        "u383": "(v)=>v*1e+18",
        "u384": "(v)=>v*1e+21",
        "u385": "(v)=>v*1e+24",
        "u386": "(v)=>v*1e+27",
        "u387": "(v)=>v*1e+30"
      },
      "description": "A megasiemens (MS) is an SI unit of conductance applying the mega‑ prefix (10^6). One megasiemens equals 1000000 siemenss. The mega prefix denotes a factor of 10^6, so 1 megasiemens equals 10^6 siemens. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megasiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megasiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megasiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megasiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megasiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megasiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megasiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megasiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u374",
      "name": "kilosiemens",
      "shortName": "kS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-21",
        "u368": "(v)=>v*1e-18",
        "u369": "(v)=>v*1e-15",
        "u370": "(v)=>v*1e-12",
        "u371": "(v)=>v*1e-09",
        "u372": "(v)=>v*1e-06",
        "u373": "(v)=>v*0.001",
        "u375": "(v)=>v*10",
        "u376": "(v)=>v*100",
        "u377": "(v)=>v*1000",
        "u378": "(v)=>v*10000",
        "u379": "(v)=>v*100000",
        "u380": "(v)=>v*1000000",
        "u381": "(v)=>v*1000000000",
        "u382": "(v)=>v*1000000000000",
        "u383": "(v)=>v*1e+15",
        "u384": "(v)=>v*1e+18",
        "u385": "(v)=>v*1e+21",
        "u386": "(v)=>v*1e+24",
        "u387": "(v)=>v*1e+27"
      },
      "description": "A kilosiemens (kS) is an SI unit of conductance applying the kilo‑ prefix (10^3). One kilosiemens equals 1000 siemenss. The kilo prefix denotes a factor of 10^3, so 1 kilosiemens equals 10^3 siemens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilosiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilosiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilosiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilosiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilosiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilosiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilosiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilosiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u375",
      "name": "hectosiemens",
      "shortName": "hS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-22",
        "u368": "(v)=>v*1e-19",
        "u369": "(v)=>v*1e-16",
        "u370": "(v)=>v*1e-13",
        "u371": "(v)=>v*1e-10",
        "u372": "(v)=>v*1e-07",
        "u373": "(v)=>v*0.0001",
        "u374": "(v)=>v*0.1",
        "u376": "(v)=>v*10",
        "u377": "(v)=>v*100",
        "u378": "(v)=>v*1000",
        "u379": "(v)=>v*10000",
        "u380": "(v)=>v*100000",
        "u381": "(v)=>v*100000000",
        "u382": "(v)=>v*100000000000",
        "u383": "(v)=>v*100000000000000",
        "u384": "(v)=>v*1e+17",
        "u385": "(v)=>v*1e+20",
        "u386": "(v)=>v*1e+23",
        "u387": "(v)=>v*1e+26"
      },
      "description": "A hectosiemens (hS) is an SI unit of conductance applying the hecto‑ prefix (10^2). One hectosiemens equals 100 siemenss. The hecto prefix denotes a factor of 10^2, so 1 hectosiemens equals 10^2 siemens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectosiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectosiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectosiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectosiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectosiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectosiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectosiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectosiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u376",
      "name": "decasiemens",
      "shortName": "daS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-23",
        "u368": "(v)=>v*1e-20",
        "u369": "(v)=>v*1e-17",
        "u370": "(v)=>v*1e-14",
        "u371": "(v)=>v*1e-11",
        "u372": "(v)=>v*1e-08",
        "u373": "(v)=>v*1e-05",
        "u374": "(v)=>v*0.01",
        "u375": "(v)=>v*0.1",
        "u377": "(v)=>v*10",
        "u378": "(v)=>v*100",
        "u379": "(v)=>v*1000",
        "u380": "(v)=>v*10000",
        "u381": "(v)=>v*10000000",
        "u382": "(v)=>v*10000000000",
        "u383": "(v)=>v*10000000000000",
        "u384": "(v)=>v*1e+16",
        "u385": "(v)=>v*1e+19",
        "u386": "(v)=>v*1e+22",
        "u387": "(v)=>v*1e+25"
      },
      "description": "A decasiemens (daS) is an SI unit of conductance applying the deca‑ prefix (10^1). One decasiemens equals 10 siemenss. The deca prefix denotes a factor of 10^1, so 1 decasiemens equals 10^1 siemens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decasiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decasiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decasiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decasiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decasiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decasiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decasiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decasiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u377",
      "name": "siemens",
      "shortName": "S",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-24",
        "u368": "(v)=>v*1e-21",
        "u369": "(v)=>v*1e-18",
        "u370": "(v)=>v*1e-15",
        "u371": "(v)=>v*1e-12",
        "u372": "(v)=>v*1e-09",
        "u373": "(v)=>v*1e-06",
        "u374": "(v)=>v*0.001",
        "u375": "(v)=>v*0.01",
        "u376": "(v)=>v*0.1",
        "u378": "(v)=>v*10",
        "u379": "(v)=>v*100",
        "u380": "(v)=>v*1000",
        "u381": "(v)=>v*1000000",
        "u382": "(v)=>v*1000000000",
        "u383": "(v)=>v*1000000000000",
        "u384": "(v)=>v*1e+15",
        "u385": "(v)=>v*1e+18",
        "u386": "(v)=>v*1e+21",
        "u387": "(v)=>v*1e+24"
      },
      "description": "The siemens (S) is the SI derived unit of electrical conductance, equal to the reciprocal of one ohm. Siemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of siemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent siemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, siemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when siemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding siemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed siemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of siemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u378",
      "name": "decisiemens",
      "shortName": "dS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-25",
        "u368": "(v)=>v*1e-22",
        "u369": "(v)=>v*1e-19",
        "u370": "(v)=>v*1e-16",
        "u371": "(v)=>v*1e-13",
        "u372": "(v)=>v*1e-10",
        "u373": "(v)=>v*1e-07",
        "u374": "(v)=>v*0.0001",
        "u375": "(v)=>v*0.001",
        "u376": "(v)=>v*0.01",
        "u377": "(v)=>v*0.1",
        "u379": "(v)=>v*10",
        "u380": "(v)=>v*100",
        "u381": "(v)=>v*100000",
        "u382": "(v)=>v*100000000",
        "u383": "(v)=>v*100000000000",
        "u384": "(v)=>v*100000000000000",
        "u385": "(v)=>v*1e+17",
        "u386": "(v)=>v*1e+20",
        "u387": "(v)=>v*1e+23"
      },
      "description": "A decisiemens (dS) is an SI unit of conductance applying the deci‑ prefix (10^-1). One decisiemens equals 0.1 siemenss. The deci prefix denotes a factor of 10^-1, so 1 decisiemens equals 10^-1 siemens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decisiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decisiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decisiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decisiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decisiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decisiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decisiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decisiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u379",
      "name": "centisiemens",
      "shortName": "cS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-26",
        "u368": "(v)=>v*1e-23",
        "u369": "(v)=>v*1e-20",
        "u370": "(v)=>v*1e-17",
        "u371": "(v)=>v*1e-14",
        "u372": "(v)=>v*1e-11",
        "u373": "(v)=>v*1e-08",
        "u374": "(v)=>v*1e-05",
        "u375": "(v)=>v*0.0001",
        "u376": "(v)=>v*0.001",
        "u377": "(v)=>v*0.01",
        "u378": "(v)=>v*0.1",
        "u380": "(v)=>v*10",
        "u381": "(v)=>v*10000",
        "u382": "(v)=>v*10000000",
        "u383": "(v)=>v*10000000000",
        "u384": "(v)=>v*10000000000000",
        "u385": "(v)=>v*1e+16",
        "u386": "(v)=>v*1e+19",
        "u387": "(v)=>v*1e+22"
      },
      "description": "A centisiemens (cS) is an SI unit of conductance applying the centi‑ prefix (10^-2). One centisiemens equals 0.01 siemenss. The centi prefix denotes a factor of 10^-2, so 1 centisiemens equals 10^-2 siemens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centisiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centisiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centisiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centisiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centisiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centisiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centisiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centisiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u380",
      "name": "millisiemens",
      "shortName": "mS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-27",
        "u368": "(v)=>v*1e-24",
        "u369": "(v)=>v*1e-21",
        "u370": "(v)=>v*1e-18",
        "u371": "(v)=>v*1e-15",
        "u372": "(v)=>v*1e-12",
        "u373": "(v)=>v*1e-09",
        "u374": "(v)=>v*1e-06",
        "u375": "(v)=>v*1e-05",
        "u376": "(v)=>v*0.0001",
        "u377": "(v)=>v*0.001",
        "u378": "(v)=>v*0.01",
        "u379": "(v)=>v*0.1",
        "u381": "(v)=>v*1000",
        "u382": "(v)=>v*1000000",
        "u383": "(v)=>v*1000000000",
        "u384": "(v)=>v*1000000000000",
        "u385": "(v)=>v*1e+15",
        "u386": "(v)=>v*1e+18",
        "u387": "(v)=>v*1e+21"
      },
      "description": "A millisiemens (mS) is an SI unit of conductance applying the milli‑ prefix (10^-3). One millisiemens equals 0.001 siemenss. The milli prefix denotes a factor of 10^-3, so 1 millisiemens equals 10^-3 siemens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millisiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millisiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millisiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millisiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millisiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millisiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millisiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millisiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u381",
      "name": "microsiemens",
      "shortName": "μS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-30",
        "u368": "(v)=>v*1e-27",
        "u369": "(v)=>v*1e-24",
        "u370": "(v)=>v*1e-21",
        "u371": "(v)=>v*1e-18",
        "u372": "(v)=>v*1e-15",
        "u373": "(v)=>v*1e-12",
        "u374": "(v)=>v*1e-09",
        "u375": "(v)=>v*1e-08",
        "u376": "(v)=>v*1e-07",
        "u377": "(v)=>v*1e-06",
        "u378": "(v)=>v*1e-05",
        "u379": "(v)=>v*0.0001",
        "u380": "(v)=>v*0.001",
        "u382": "(v)=>v*1000",
        "u383": "(v)=>v*1000000",
        "u384": "(v)=>v*1000000000",
        "u385": "(v)=>v*1000000000000",
        "u386": "(v)=>v*1e+15",
        "u387": "(v)=>v*1e+18"
      },
      "description": "A microsiemens (μS) is an SI unit of conductance applying the micro‑ prefix (10^-6). One microsiemens equals 1e-06 siemenss. The micro prefix denotes a factor of 10^-6, so 1 microsiemens equals 10^-6 siemens. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microsiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microsiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microsiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microsiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microsiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microsiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microsiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microsiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u382",
      "name": "nanosiemens",
      "shortName": "nS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-33",
        "u368": "(v)=>v*1e-30",
        "u369": "(v)=>v*1e-27",
        "u370": "(v)=>v*1e-24",
        "u371": "(v)=>v*1e-21",
        "u372": "(v)=>v*1e-18",
        "u373": "(v)=>v*1e-15",
        "u374": "(v)=>v*1e-12",
        "u375": "(v)=>v*1e-11",
        "u376": "(v)=>v*1e-10",
        "u377": "(v)=>v*1e-09",
        "u378": "(v)=>v*1e-08",
        "u379": "(v)=>v*1e-07",
        "u380": "(v)=>v*1e-06",
        "u381": "(v)=>v*0.001",
        "u383": "(v)=>v*1000",
        "u384": "(v)=>v*1000000",
        "u385": "(v)=>v*1000000000",
        "u386": "(v)=>v*1000000000000",
        "u387": "(v)=>v*1e+15"
      },
      "description": "A nanosiemens (nS) is an SI unit of conductance applying the nano‑ prefix (10^-9). One nanosiemens equals 1e-09 siemenss. The nano prefix denotes a factor of 10^-9, so 1 nanosiemens equals 10^-9 siemens. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanosiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanosiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanosiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanosiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanosiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanosiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanosiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanosiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u383",
      "name": "picosiemens",
      "shortName": "pS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-36",
        "u368": "(v)=>v*1e-33",
        "u369": "(v)=>v*1e-30",
        "u370": "(v)=>v*1e-27",
        "u371": "(v)=>v*1e-24",
        "u372": "(v)=>v*1e-21",
        "u373": "(v)=>v*1e-18",
        "u374": "(v)=>v*1e-15",
        "u375": "(v)=>v*1e-14",
        "u376": "(v)=>v*1e-13",
        "u377": "(v)=>v*1e-12",
        "u378": "(v)=>v*1e-11",
        "u379": "(v)=>v*1e-10",
        "u380": "(v)=>v*1e-09",
        "u381": "(v)=>v*1e-06",
        "u382": "(v)=>v*0.001",
        "u384": "(v)=>v*1000",
        "u385": "(v)=>v*1000000",
        "u386": "(v)=>v*1000000000",
        "u387": "(v)=>v*1000000000000"
      },
      "description": "A picosiemens (pS) is an SI unit of conductance applying the pico‑ prefix (10^-12). One picosiemens equals 1e-12 siemenss. The pico prefix denotes a factor of 10^-12, so 1 picosiemens equals 10^-12 siemens. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picosiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picosiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picosiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picosiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picosiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picosiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picosiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picosiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u384",
      "name": "femtosiemens",
      "shortName": "fS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-39",
        "u368": "(v)=>v*1e-36",
        "u369": "(v)=>v*1e-33",
        "u370": "(v)=>v*1e-30",
        "u371": "(v)=>v*1e-27",
        "u372": "(v)=>v*1e-24",
        "u373": "(v)=>v*1e-21",
        "u374": "(v)=>v*1e-18",
        "u375": "(v)=>v*1e-17",
        "u376": "(v)=>v*1e-16",
        "u377": "(v)=>v*1e-15",
        "u378": "(v)=>v*1e-14",
        "u379": "(v)=>v*1e-13",
        "u380": "(v)=>v*1e-12",
        "u381": "(v)=>v*1e-09",
        "u382": "(v)=>v*1e-06",
        "u383": "(v)=>v*0.001",
        "u385": "(v)=>v*1000",
        "u386": "(v)=>v*1000000",
        "u387": "(v)=>v*1000000000"
      },
      "description": "A femtosiemens (fS) is an SI unit of conductance applying the femto‑ prefix (10^-15). One femtosiemens equals 1e-15 siemenss. The femto prefix denotes a factor of 10^-15, so 1 femtosiemens equals 10^-15 siemens. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtosiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtosiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtosiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtosiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtosiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtosiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtosiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtosiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u385",
      "name": "attosiemens",
      "shortName": "aS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-42",
        "u368": "(v)=>v*1e-39",
        "u369": "(v)=>v*1e-36",
        "u370": "(v)=>v*1e-33",
        "u371": "(v)=>v*1e-30",
        "u372": "(v)=>v*1e-27",
        "u373": "(v)=>v*1e-24",
        "u374": "(v)=>v*1e-21",
        "u375": "(v)=>v*1e-20",
        "u376": "(v)=>v*1e-19",
        "u377": "(v)=>v*1e-18",
        "u378": "(v)=>v*1e-17",
        "u379": "(v)=>v*1e-16",
        "u380": "(v)=>v*1e-15",
        "u381": "(v)=>v*1e-12",
        "u382": "(v)=>v*1e-09",
        "u383": "(v)=>v*1e-06",
        "u384": "(v)=>v*0.001",
        "u386": "(v)=>v*1000",
        "u387": "(v)=>v*1000000"
      },
      "description": "A attosiemens (aS) is an SI unit of conductance applying the atto‑ prefix (10^-18). One attosiemens equals 1e-18 siemenss. The atto prefix denotes a factor of 10^-18, so 1 attosiemens equals 10^-18 siemens. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attosiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attosiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attosiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attosiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attosiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attosiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attosiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attosiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u386",
      "name": "zeptosiemens",
      "shortName": "zS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-45",
        "u368": "(v)=>v*1e-42",
        "u369": "(v)=>v*1e-39",
        "u370": "(v)=>v*1e-36",
        "u371": "(v)=>v*1e-33",
        "u372": "(v)=>v*1e-30",
        "u373": "(v)=>v*1e-27",
        "u374": "(v)=>v*1e-24",
        "u375": "(v)=>v*1e-23",
        "u376": "(v)=>v*1e-22",
        "u377": "(v)=>v*1e-21",
        "u378": "(v)=>v*1e-20",
        "u379": "(v)=>v*1e-19",
        "u380": "(v)=>v*1e-18",
        "u381": "(v)=>v*1e-15",
        "u382": "(v)=>v*1e-12",
        "u383": "(v)=>v*1e-09",
        "u384": "(v)=>v*1e-06",
        "u385": "(v)=>v*0.001",
        "u387": "(v)=>v*1000"
      },
      "description": "A zeptosiemens (zS) is an SI unit of conductance applying the zepto‑ prefix (10^-21). One zeptosiemens equals 1e-21 siemenss. The zepto prefix denotes a factor of 10^-21, so 1 zeptosiemens equals 10^-21 siemens. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptosiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptosiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptosiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptosiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptosiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptosiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptosiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptosiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u387",
      "name": "yoctosiemens",
      "shortName": "yS",
      "categoryId": "c5",
      "conversions": {
        "u367": "(v)=>v*1e-48",
        "u368": "(v)=>v*1e-45",
        "u369": "(v)=>v*1e-42",
        "u370": "(v)=>v*1e-39",
        "u371": "(v)=>v*1e-36",
        "u372": "(v)=>v*1e-33",
        "u373": "(v)=>v*1e-30",
        "u374": "(v)=>v*1e-27",
        "u375": "(v)=>v*1e-26",
        "u376": "(v)=>v*1e-25",
        "u377": "(v)=>v*1e-24",
        "u378": "(v)=>v*1e-23",
        "u379": "(v)=>v*1e-22",
        "u380": "(v)=>v*1e-21",
        "u381": "(v)=>v*1e-18",
        "u382": "(v)=>v*1e-15",
        "u383": "(v)=>v*1e-12",
        "u384": "(v)=>v*1e-09",
        "u385": "(v)=>v*1e-06",
        "u386": "(v)=>v*0.001"
      },
      "description": "A yoctosiemens (yS) is an SI unit of conductance applying the yocto‑ prefix (10^-24). One yoctosiemens equals 1e-24 siemenss. The yocto prefix denotes a factor of 10^-24, so 1 yoctosiemens equals 10^-24 siemens. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctosiemens belongs to the broader physical quantity of conductance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctosiemens often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctosiemens as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctosiemens is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctosiemens values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctosiemens has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctosiemens metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctosiemens fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u388",
      "name": "yottalumen",
      "shortName": "Ylm",
      "categoryId": "c16",
      "conversions": {
        "u389": "(v)=>v*1000",
        "u390": "(v)=>v*1000000",
        "u391": "(v)=>v*1000000000",
        "u392": "(v)=>v*1000000000000",
        "u393": "(v)=>v*1e+15",
        "u394": "(v)=>v*1e+18",
        "u395": "(v)=>v*1e+21",
        "u396": "(v)=>v*1e+22",
        "u397": "(v)=>v*1e+23",
        "u398": "(v)=>v*1e+24",
        "u399": "(v)=>v*1e+25",
        "u400": "(v)=>v*1e+26",
        "u401": "(v)=>v*1e+27",
        "u402": "(v)=>v*1e+30",
        "u403": "(v)=>v*1e+33",
        "u404": "(v)=>v*1e+36",
        "u405": "(v)=>v*1e+39",
        "u406": "(v)=>v*1e+42",
        "u407": "(v)=>v*1e+45",
        "u408": "(v)=>v*1e+48"
      },
      "description": "A yottalumen (Ylm) is an SI unit of luminousFlux applying the yotta‑ prefix (10^24). One yottalumen equals 1e+24 lumens. The yotta prefix denotes a factor of 10^24, so 1 yottalumen equals 10^24 lumens. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottalumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottalumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottalumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottalumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottalumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottalumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottalumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottalumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u389",
      "name": "zettalumen",
      "shortName": "Zlm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*0.001",
        "u390": "(v)=>v*1000",
        "u391": "(v)=>v*1000000",
        "u392": "(v)=>v*1000000000",
        "u393": "(v)=>v*1000000000000",
        "u394": "(v)=>v*1e+15",
        "u395": "(v)=>v*1e+18",
        "u396": "(v)=>v*1e+19",
        "u397": "(v)=>v*1e+20",
        "u398": "(v)=>v*1e+21",
        "u399": "(v)=>v*1e+22",
        "u400": "(v)=>v*1e+23",
        "u401": "(v)=>v*1e+24",
        "u402": "(v)=>v*1e+27",
        "u403": "(v)=>v*1e+30",
        "u404": "(v)=>v*1e+33",
        "u405": "(v)=>v*1e+36",
        "u406": "(v)=>v*1e+39",
        "u407": "(v)=>v*1e+42",
        "u408": "(v)=>v*1e+45"
      },
      "description": "A zettalumen (Zlm) is an SI unit of luminousFlux applying the zetta‑ prefix (10^21). One zettalumen equals 1e+21 lumens. The zetta prefix denotes a factor of 10^21, so 1 zettalumen equals 10^21 lumens. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettalumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettalumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettalumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettalumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettalumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettalumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettalumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettalumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u390",
      "name": "exalumen",
      "shortName": "Elm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-06",
        "u389": "(v)=>v*0.001",
        "u391": "(v)=>v*1000",
        "u392": "(v)=>v*1000000",
        "u393": "(v)=>v*1000000000",
        "u394": "(v)=>v*1000000000000",
        "u395": "(v)=>v*1e+15",
        "u396": "(v)=>v*1e+16",
        "u397": "(v)=>v*1e+17",
        "u398": "(v)=>v*1e+18",
        "u399": "(v)=>v*1e+19",
        "u400": "(v)=>v*1e+20",
        "u401": "(v)=>v*1e+21",
        "u402": "(v)=>v*1e+24",
        "u403": "(v)=>v*1e+27",
        "u404": "(v)=>v*1e+30",
        "u405": "(v)=>v*1e+33",
        "u406": "(v)=>v*1e+36",
        "u407": "(v)=>v*1e+39",
        "u408": "(v)=>v*1e+42"
      },
      "description": "A exalumen (Elm) is an SI unit of luminousFlux applying the exa‑ prefix (10^18). One exalumen equals 1e+18 lumens. The exa prefix denotes a factor of 10^18, so 1 exalumen equals 10^18 lumens. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exalumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exalumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exalumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exalumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exalumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exalumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exalumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exalumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u391",
      "name": "petalumen",
      "shortName": "Plm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-09",
        "u389": "(v)=>v*1e-06",
        "u390": "(v)=>v*0.001",
        "u392": "(v)=>v*1000",
        "u393": "(v)=>v*1000000",
        "u394": "(v)=>v*1000000000",
        "u395": "(v)=>v*1000000000000",
        "u396": "(v)=>v*10000000000000",
        "u397": "(v)=>v*100000000000000",
        "u398": "(v)=>v*1e+15",
        "u399": "(v)=>v*1e+16",
        "u400": "(v)=>v*1e+17",
        "u401": "(v)=>v*1e+18",
        "u402": "(v)=>v*1e+21",
        "u403": "(v)=>v*1e+24",
        "u404": "(v)=>v*1e+27",
        "u405": "(v)=>v*1e+30",
        "u406": "(v)=>v*1e+33",
        "u407": "(v)=>v*1e+36",
        "u408": "(v)=>v*1e+39"
      },
      "description": "A petalumen (Plm) is an SI unit of luminousFlux applying the peta‑ prefix (10^15). One petalumen equals 1e+15 lumens. The peta prefix denotes a factor of 10^15, so 1 petalumen equals 10^15 lumens. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petalumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petalumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petalumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petalumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petalumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petalumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petalumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petalumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u392",
      "name": "teralumen",
      "shortName": "Tlm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-12",
        "u389": "(v)=>v*1e-09",
        "u390": "(v)=>v*1e-06",
        "u391": "(v)=>v*0.001",
        "u393": "(v)=>v*1000",
        "u394": "(v)=>v*1000000",
        "u395": "(v)=>v*1000000000",
        "u396": "(v)=>v*10000000000",
        "u397": "(v)=>v*100000000000",
        "u398": "(v)=>v*1000000000000",
        "u399": "(v)=>v*10000000000000",
        "u400": "(v)=>v*100000000000000",
        "u401": "(v)=>v*1e+15",
        "u402": "(v)=>v*1e+18",
        "u403": "(v)=>v*1e+21",
        "u404": "(v)=>v*1e+24",
        "u405": "(v)=>v*1e+27",
        "u406": "(v)=>v*1e+30",
        "u407": "(v)=>v*1e+33",
        "u408": "(v)=>v*1e+36"
      },
      "description": "A teralumen (Tlm) is an SI unit of luminousFlux applying the tera‑ prefix (10^12). One teralumen equals 1e+12 lumens. The tera prefix denotes a factor of 10^12, so 1 teralumen equals 10^12 lumens. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Teralumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teralumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teralumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teralumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teralumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teralumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teralumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teralumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u393",
      "name": "gigalumen",
      "shortName": "Glm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-15",
        "u389": "(v)=>v*1e-12",
        "u390": "(v)=>v*1e-09",
        "u391": "(v)=>v*1e-06",
        "u392": "(v)=>v*0.001",
        "u394": "(v)=>v*1000",
        "u395": "(v)=>v*1000000",
        "u396": "(v)=>v*10000000",
        "u397": "(v)=>v*100000000",
        "u398": "(v)=>v*1000000000",
        "u399": "(v)=>v*10000000000",
        "u400": "(v)=>v*100000000000",
        "u401": "(v)=>v*1000000000000",
        "u402": "(v)=>v*1e+15",
        "u403": "(v)=>v*1e+18",
        "u404": "(v)=>v*1e+21",
        "u405": "(v)=>v*1e+24",
        "u406": "(v)=>v*1e+27",
        "u407": "(v)=>v*1e+30",
        "u408": "(v)=>v*1e+33"
      },
      "description": "A gigalumen (Glm) is an SI unit of luminousFlux applying the giga‑ prefix (10^9). One gigalumen equals 1000000000 lumens. The giga prefix denotes a factor of 10^9, so 1 gigalumen equals 10^9 lumens. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigalumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigalumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigalumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigalumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigalumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigalumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigalumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigalumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u394",
      "name": "megalumen",
      "shortName": "Mlm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-18",
        "u389": "(v)=>v*1e-15",
        "u390": "(v)=>v*1e-12",
        "u391": "(v)=>v*1e-09",
        "u392": "(v)=>v*1e-06",
        "u393": "(v)=>v*0.001",
        "u395": "(v)=>v*1000",
        "u396": "(v)=>v*10000",
        "u397": "(v)=>v*100000",
        "u398": "(v)=>v*1000000",
        "u399": "(v)=>v*10000000",
        "u400": "(v)=>v*100000000",
        "u401": "(v)=>v*1000000000",
        "u402": "(v)=>v*1000000000000",
        "u403": "(v)=>v*1e+15",
        "u404": "(v)=>v*1e+18",
        "u405": "(v)=>v*1e+21",
        "u406": "(v)=>v*1e+24",
        "u407": "(v)=>v*1e+27",
        "u408": "(v)=>v*1e+30"
      },
      "description": "A megalumen (Mlm) is an SI unit of luminousFlux applying the mega‑ prefix (10^6). One megalumen equals 1000000 lumens. The mega prefix denotes a factor of 10^6, so 1 megalumen equals 10^6 lumens. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megalumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megalumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megalumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megalumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megalumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megalumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megalumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megalumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u395",
      "name": "kilolumen",
      "shortName": "klm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-21",
        "u389": "(v)=>v*1e-18",
        "u390": "(v)=>v*1e-15",
        "u391": "(v)=>v*1e-12",
        "u392": "(v)=>v*1e-09",
        "u393": "(v)=>v*1e-06",
        "u394": "(v)=>v*0.001",
        "u396": "(v)=>v*10",
        "u397": "(v)=>v*100",
        "u398": "(v)=>v*1000",
        "u399": "(v)=>v*10000",
        "u400": "(v)=>v*100000",
        "u401": "(v)=>v*1000000",
        "u402": "(v)=>v*1000000000",
        "u403": "(v)=>v*1000000000000",
        "u404": "(v)=>v*1e+15",
        "u405": "(v)=>v*1e+18",
        "u406": "(v)=>v*1e+21",
        "u407": "(v)=>v*1e+24",
        "u408": "(v)=>v*1e+27"
      },
      "description": "A kilolumen (klm) is an SI unit of luminousFlux applying the kilo‑ prefix (10^3). One kilolumen equals 1000 lumens. The kilo prefix denotes a factor of 10^3, so 1 kilolumen equals 10^3 lumens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilolumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilolumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilolumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilolumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilolumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilolumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilolumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilolumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u396",
      "name": "hectolumen",
      "shortName": "hlm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-22",
        "u389": "(v)=>v*1e-19",
        "u390": "(v)=>v*1e-16",
        "u391": "(v)=>v*1e-13",
        "u392": "(v)=>v*1e-10",
        "u393": "(v)=>v*1e-07",
        "u394": "(v)=>v*0.0001",
        "u395": "(v)=>v*0.1",
        "u397": "(v)=>v*10",
        "u398": "(v)=>v*100",
        "u399": "(v)=>v*1000",
        "u400": "(v)=>v*10000",
        "u401": "(v)=>v*100000",
        "u402": "(v)=>v*100000000",
        "u403": "(v)=>v*100000000000",
        "u404": "(v)=>v*100000000000000",
        "u405": "(v)=>v*1e+17",
        "u406": "(v)=>v*1e+20",
        "u407": "(v)=>v*1e+23",
        "u408": "(v)=>v*1e+26"
      },
      "description": "A hectolumen (hlm) is an SI unit of luminousFlux applying the hecto‑ prefix (10^2). One hectolumen equals 100 lumens. The hecto prefix denotes a factor of 10^2, so 1 hectolumen equals 10^2 lumens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectolumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectolumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectolumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectolumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectolumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectolumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectolumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectolumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u397",
      "name": "decalumen",
      "shortName": "dalm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-23",
        "u389": "(v)=>v*1e-20",
        "u390": "(v)=>v*1e-17",
        "u391": "(v)=>v*1e-14",
        "u392": "(v)=>v*1e-11",
        "u393": "(v)=>v*1e-08",
        "u394": "(v)=>v*1e-05",
        "u395": "(v)=>v*0.01",
        "u396": "(v)=>v*0.1",
        "u398": "(v)=>v*10",
        "u399": "(v)=>v*100",
        "u400": "(v)=>v*1000",
        "u401": "(v)=>v*10000",
        "u402": "(v)=>v*10000000",
        "u403": "(v)=>v*10000000000",
        "u404": "(v)=>v*10000000000000",
        "u405": "(v)=>v*1e+16",
        "u406": "(v)=>v*1e+19",
        "u407": "(v)=>v*1e+22",
        "u408": "(v)=>v*1e+25"
      },
      "description": "A decalumen (dalm) is an SI unit of luminousFlux applying the deca‑ prefix (10^1). One decalumen equals 10 lumens. The deca prefix denotes a factor of 10^1, so 1 decalumen equals 10^1 lumens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decalumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decalumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decalumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decalumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decalumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decalumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decalumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decalumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u398",
      "name": "lumen",
      "shortName": "lm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-24",
        "u389": "(v)=>v*1e-21",
        "u390": "(v)=>v*1e-18",
        "u391": "(v)=>v*1e-15",
        "u392": "(v)=>v*1e-12",
        "u393": "(v)=>v*1e-09",
        "u394": "(v)=>v*1e-06",
        "u395": "(v)=>v*0.001",
        "u396": "(v)=>v*0.01",
        "u397": "(v)=>v*0.1",
        "u399": "(v)=>v*10",
        "u400": "(v)=>v*100",
        "u401": "(v)=>v*1000",
        "u402": "(v)=>v*1000000",
        "u403": "(v)=>v*1000000000",
        "u404": "(v)=>v*1000000000000",
        "u405": "(v)=>v*1e+15",
        "u406": "(v)=>v*1e+18",
        "u407": "(v)=>v*1e+21",
        "u408": "(v)=>v*1e+24"
      },
      "description": "The lumen (lm) is the SI derived unit of luminous flux; it is the luminous power emitted within a solid angle of one steradian by a point source of one candela. Lumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of lumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent lumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, lumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when lumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding lumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed lumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of lumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u399",
      "name": "decilumen",
      "shortName": "dlm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-25",
        "u389": "(v)=>v*1e-22",
        "u390": "(v)=>v*1e-19",
        "u391": "(v)=>v*1e-16",
        "u392": "(v)=>v*1e-13",
        "u393": "(v)=>v*1e-10",
        "u394": "(v)=>v*1e-07",
        "u395": "(v)=>v*0.0001",
        "u396": "(v)=>v*0.001",
        "u397": "(v)=>v*0.01",
        "u398": "(v)=>v*0.1",
        "u400": "(v)=>v*10",
        "u401": "(v)=>v*100",
        "u402": "(v)=>v*100000",
        "u403": "(v)=>v*100000000",
        "u404": "(v)=>v*100000000000",
        "u405": "(v)=>v*100000000000000",
        "u406": "(v)=>v*1e+17",
        "u407": "(v)=>v*1e+20",
        "u408": "(v)=>v*1e+23"
      },
      "description": "A decilumen (dlm) is an SI unit of luminousFlux applying the deci‑ prefix (10^-1). One decilumen equals 0.1 lumens. The deci prefix denotes a factor of 10^-1, so 1 decilumen equals 10^-1 lumens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decilumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decilumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decilumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decilumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decilumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decilumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decilumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decilumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u400",
      "name": "centilumen",
      "shortName": "clm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-26",
        "u389": "(v)=>v*1e-23",
        "u390": "(v)=>v*1e-20",
        "u391": "(v)=>v*1e-17",
        "u392": "(v)=>v*1e-14",
        "u393": "(v)=>v*1e-11",
        "u394": "(v)=>v*1e-08",
        "u395": "(v)=>v*1e-05",
        "u396": "(v)=>v*0.0001",
        "u397": "(v)=>v*0.001",
        "u398": "(v)=>v*0.01",
        "u399": "(v)=>v*0.1",
        "u401": "(v)=>v*10",
        "u402": "(v)=>v*10000",
        "u403": "(v)=>v*10000000",
        "u404": "(v)=>v*10000000000",
        "u405": "(v)=>v*10000000000000",
        "u406": "(v)=>v*1e+16",
        "u407": "(v)=>v*1e+19",
        "u408": "(v)=>v*1e+22"
      },
      "description": "A centilumen (clm) is an SI unit of luminousFlux applying the centi‑ prefix (10^-2). One centilumen equals 0.01 lumens. The centi prefix denotes a factor of 10^-2, so 1 centilumen equals 10^-2 lumens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centilumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centilumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centilumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centilumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centilumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centilumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centilumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centilumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u401",
      "name": "millilumen",
      "shortName": "mlm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-27",
        "u389": "(v)=>v*1e-24",
        "u390": "(v)=>v*1e-21",
        "u391": "(v)=>v*1e-18",
        "u392": "(v)=>v*1e-15",
        "u393": "(v)=>v*1e-12",
        "u394": "(v)=>v*1e-09",
        "u395": "(v)=>v*1e-06",
        "u396": "(v)=>v*1e-05",
        "u397": "(v)=>v*0.0001",
        "u398": "(v)=>v*0.001",
        "u399": "(v)=>v*0.01",
        "u400": "(v)=>v*0.1",
        "u402": "(v)=>v*1000",
        "u403": "(v)=>v*1000000",
        "u404": "(v)=>v*1000000000",
        "u405": "(v)=>v*1000000000000",
        "u406": "(v)=>v*1e+15",
        "u407": "(v)=>v*1e+18",
        "u408": "(v)=>v*1e+21"
      },
      "description": "A millilumen (mlm) is an SI unit of luminousFlux applying the milli‑ prefix (10^-3). One millilumen equals 0.001 lumens. The milli prefix denotes a factor of 10^-3, so 1 millilumen equals 10^-3 lumens. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millilumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millilumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millilumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millilumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millilumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millilumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millilumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millilumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u402",
      "name": "microlumen",
      "shortName": "μlm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-30",
        "u389": "(v)=>v*1e-27",
        "u390": "(v)=>v*1e-24",
        "u391": "(v)=>v*1e-21",
        "u392": "(v)=>v*1e-18",
        "u393": "(v)=>v*1e-15",
        "u394": "(v)=>v*1e-12",
        "u395": "(v)=>v*1e-09",
        "u396": "(v)=>v*1e-08",
        "u397": "(v)=>v*1e-07",
        "u398": "(v)=>v*1e-06",
        "u399": "(v)=>v*1e-05",
        "u400": "(v)=>v*0.0001",
        "u401": "(v)=>v*0.001",
        "u403": "(v)=>v*1000",
        "u404": "(v)=>v*1000000",
        "u405": "(v)=>v*1000000000",
        "u406": "(v)=>v*1000000000000",
        "u407": "(v)=>v*1e+15",
        "u408": "(v)=>v*1e+18"
      },
      "description": "A microlumen (μlm) is an SI unit of luminousFlux applying the micro‑ prefix (10^-6). One microlumen equals 1e-06 lumens. The micro prefix denotes a factor of 10^-6, so 1 microlumen equals 10^-6 lumens. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microlumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microlumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microlumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microlumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microlumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microlumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microlumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microlumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u403",
      "name": "nanolumen",
      "shortName": "nlm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-33",
        "u389": "(v)=>v*1e-30",
        "u390": "(v)=>v*1e-27",
        "u391": "(v)=>v*1e-24",
        "u392": "(v)=>v*1e-21",
        "u393": "(v)=>v*1e-18",
        "u394": "(v)=>v*1e-15",
        "u395": "(v)=>v*1e-12",
        "u396": "(v)=>v*1e-11",
        "u397": "(v)=>v*1e-10",
        "u398": "(v)=>v*1e-09",
        "u399": "(v)=>v*1e-08",
        "u400": "(v)=>v*1e-07",
        "u401": "(v)=>v*1e-06",
        "u402": "(v)=>v*0.001",
        "u404": "(v)=>v*1000",
        "u405": "(v)=>v*1000000",
        "u406": "(v)=>v*1000000000",
        "u407": "(v)=>v*1000000000000",
        "u408": "(v)=>v*1e+15"
      },
      "description": "A nanolumen (nlm) is an SI unit of luminousFlux applying the nano‑ prefix (10^-9). One nanolumen equals 1e-09 lumens. The nano prefix denotes a factor of 10^-9, so 1 nanolumen equals 10^-9 lumens. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanolumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanolumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanolumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanolumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanolumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanolumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanolumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanolumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u404",
      "name": "picolumen",
      "shortName": "plm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-36",
        "u389": "(v)=>v*1e-33",
        "u390": "(v)=>v*1e-30",
        "u391": "(v)=>v*1e-27",
        "u392": "(v)=>v*1e-24",
        "u393": "(v)=>v*1e-21",
        "u394": "(v)=>v*1e-18",
        "u395": "(v)=>v*1e-15",
        "u396": "(v)=>v*1e-14",
        "u397": "(v)=>v*1e-13",
        "u398": "(v)=>v*1e-12",
        "u399": "(v)=>v*1e-11",
        "u400": "(v)=>v*1e-10",
        "u401": "(v)=>v*1e-09",
        "u402": "(v)=>v*1e-06",
        "u403": "(v)=>v*0.001",
        "u405": "(v)=>v*1000",
        "u406": "(v)=>v*1000000",
        "u407": "(v)=>v*1000000000",
        "u408": "(v)=>v*1000000000000"
      },
      "description": "A picolumen (plm) is an SI unit of luminousFlux applying the pico‑ prefix (10^-12). One picolumen equals 1e-12 lumens. The pico prefix denotes a factor of 10^-12, so 1 picolumen equals 10^-12 lumens. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picolumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picolumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picolumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picolumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picolumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picolumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picolumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picolumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u405",
      "name": "femtolumen",
      "shortName": "flm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-39",
        "u389": "(v)=>v*1e-36",
        "u390": "(v)=>v*1e-33",
        "u391": "(v)=>v*1e-30",
        "u392": "(v)=>v*1e-27",
        "u393": "(v)=>v*1e-24",
        "u394": "(v)=>v*1e-21",
        "u395": "(v)=>v*1e-18",
        "u396": "(v)=>v*1e-17",
        "u397": "(v)=>v*1e-16",
        "u398": "(v)=>v*1e-15",
        "u399": "(v)=>v*1e-14",
        "u400": "(v)=>v*1e-13",
        "u401": "(v)=>v*1e-12",
        "u402": "(v)=>v*1e-09",
        "u403": "(v)=>v*1e-06",
        "u404": "(v)=>v*0.001",
        "u406": "(v)=>v*1000",
        "u407": "(v)=>v*1000000",
        "u408": "(v)=>v*1000000000"
      },
      "description": "A femtolumen (flm) is an SI unit of luminousFlux applying the femto‑ prefix (10^-15). One femtolumen equals 1e-15 lumens. The femto prefix denotes a factor of 10^-15, so 1 femtolumen equals 10^-15 lumens. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtolumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtolumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtolumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtolumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtolumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtolumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtolumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtolumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u406",
      "name": "attolumen",
      "shortName": "alm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-42",
        "u389": "(v)=>v*1e-39",
        "u390": "(v)=>v*1e-36",
        "u391": "(v)=>v*1e-33",
        "u392": "(v)=>v*1e-30",
        "u393": "(v)=>v*1e-27",
        "u394": "(v)=>v*1e-24",
        "u395": "(v)=>v*1e-21",
        "u396": "(v)=>v*1e-20",
        "u397": "(v)=>v*1e-19",
        "u398": "(v)=>v*1e-18",
        "u399": "(v)=>v*1e-17",
        "u400": "(v)=>v*1e-16",
        "u401": "(v)=>v*1e-15",
        "u402": "(v)=>v*1e-12",
        "u403": "(v)=>v*1e-09",
        "u404": "(v)=>v*1e-06",
        "u405": "(v)=>v*0.001",
        "u407": "(v)=>v*1000",
        "u408": "(v)=>v*1000000"
      },
      "description": "A attolumen (alm) is an SI unit of luminousFlux applying the atto‑ prefix (10^-18). One attolumen equals 1e-18 lumens. The atto prefix denotes a factor of 10^-18, so 1 attolumen equals 10^-18 lumens. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attolumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attolumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attolumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attolumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attolumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attolumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attolumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attolumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u407",
      "name": "zeptolumen",
      "shortName": "zlm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-45",
        "u389": "(v)=>v*1e-42",
        "u390": "(v)=>v*1e-39",
        "u391": "(v)=>v*1e-36",
        "u392": "(v)=>v*1e-33",
        "u393": "(v)=>v*1e-30",
        "u394": "(v)=>v*1e-27",
        "u395": "(v)=>v*1e-24",
        "u396": "(v)=>v*1e-23",
        "u397": "(v)=>v*1e-22",
        "u398": "(v)=>v*1e-21",
        "u399": "(v)=>v*1e-20",
        "u400": "(v)=>v*1e-19",
        "u401": "(v)=>v*1e-18",
        "u402": "(v)=>v*1e-15",
        "u403": "(v)=>v*1e-12",
        "u404": "(v)=>v*1e-09",
        "u405": "(v)=>v*1e-06",
        "u406": "(v)=>v*0.001",
        "u408": "(v)=>v*1000"
      },
      "description": "A zeptolumen (zlm) is an SI unit of luminousFlux applying the zepto‑ prefix (10^-21). One zeptolumen equals 1e-21 lumens. The zepto prefix denotes a factor of 10^-21, so 1 zeptolumen equals 10^-21 lumens. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptolumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptolumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptolumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptolumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptolumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptolumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptolumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptolumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u408",
      "name": "yoctolumen",
      "shortName": "ylm",
      "categoryId": "c16",
      "conversions": {
        "u388": "(v)=>v*1e-48",
        "u389": "(v)=>v*1e-45",
        "u390": "(v)=>v*1e-42",
        "u391": "(v)=>v*1e-39",
        "u392": "(v)=>v*1e-36",
        "u393": "(v)=>v*1e-33",
        "u394": "(v)=>v*1e-30",
        "u395": "(v)=>v*1e-27",
        "u396": "(v)=>v*1e-26",
        "u397": "(v)=>v*1e-25",
        "u398": "(v)=>v*1e-24",
        "u399": "(v)=>v*1e-23",
        "u400": "(v)=>v*1e-22",
        "u401": "(v)=>v*1e-21",
        "u402": "(v)=>v*1e-18",
        "u403": "(v)=>v*1e-15",
        "u404": "(v)=>v*1e-12",
        "u405": "(v)=>v*1e-09",
        "u406": "(v)=>v*1e-06",
        "u407": "(v)=>v*0.001"
      },
      "description": "A yoctolumen (ylm) is an SI unit of luminousFlux applying the yocto‑ prefix (10^-24). One yoctolumen equals 1e-24 lumens. The yocto prefix denotes a factor of 10^-24, so 1 yoctolumen equals 10^-24 lumens. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctolumen belongs to the broader physical quantity of luminousflux. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctolumen often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctolumen as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctolumen is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctolumen values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctolumen has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctolumen metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctolumen fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u409",
      "name": "yottalux",
      "shortName": "Ylx",
      "categoryId": "c13",
      "conversions": {
        "u410": "(v)=>v*1000",
        "u411": "(v)=>v*1000000",
        "u412": "(v)=>v*1000000000",
        "u413": "(v)=>v*1000000000000",
        "u414": "(v)=>v*1e+15",
        "u415": "(v)=>v*1e+18",
        "u416": "(v)=>v*1e+21",
        "u417": "(v)=>v*1e+22",
        "u418": "(v)=>v*1e+23",
        "u419": "(v)=>v*1e+24",
        "u420": "(v)=>v*1e+25",
        "u421": "(v)=>v*1e+26",
        "u422": "(v)=>v*1e+27",
        "u423": "(v)=>v*1e+30",
        "u424": "(v)=>v*1e+33",
        "u425": "(v)=>v*1e+36",
        "u426": "(v)=>v*1e+39",
        "u427": "(v)=>v*1e+42",
        "u428": "(v)=>v*1e+45",
        "u429": "(v)=>v*1e+48"
      },
      "description": "A yottalux (Ylx) is an SI unit of illuminance applying the yotta‑ prefix (10^24). One yottalux equals 1e+24 luxs. The yotta prefix denotes a factor of 10^24, so 1 yottalux equals 10^24 luxs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Yottalux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottalux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottalux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottalux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottalux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottalux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottalux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottalux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u410",
      "name": "zettalux",
      "shortName": "Zlx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*0.001",
        "u411": "(v)=>v*1000",
        "u412": "(v)=>v*1000000",
        "u413": "(v)=>v*1000000000",
        "u414": "(v)=>v*1000000000000",
        "u415": "(v)=>v*1e+15",
        "u416": "(v)=>v*1e+18",
        "u417": "(v)=>v*1e+19",
        "u418": "(v)=>v*1e+20",
        "u419": "(v)=>v*1e+21",
        "u420": "(v)=>v*1e+22",
        "u421": "(v)=>v*1e+23",
        "u422": "(v)=>v*1e+24",
        "u423": "(v)=>v*1e+27",
        "u424": "(v)=>v*1e+30",
        "u425": "(v)=>v*1e+33",
        "u426": "(v)=>v*1e+36",
        "u427": "(v)=>v*1e+39",
        "u428": "(v)=>v*1e+42",
        "u429": "(v)=>v*1e+45"
      },
      "description": "A zettalux (Zlx) is an SI unit of illuminance applying the zetta‑ prefix (10^21). One zettalux equals 1e+21 luxs. The zetta prefix denotes a factor of 10^21, so 1 zettalux equals 10^21 luxs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Zettalux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettalux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettalux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettalux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettalux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettalux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettalux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettalux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u411",
      "name": "exalux",
      "shortName": "Elx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-06",
        "u410": "(v)=>v*0.001",
        "u412": "(v)=>v*1000",
        "u413": "(v)=>v*1000000",
        "u414": "(v)=>v*1000000000",
        "u415": "(v)=>v*1000000000000",
        "u416": "(v)=>v*1e+15",
        "u417": "(v)=>v*1e+16",
        "u418": "(v)=>v*1e+17",
        "u419": "(v)=>v*1e+18",
        "u420": "(v)=>v*1e+19",
        "u421": "(v)=>v*1e+20",
        "u422": "(v)=>v*1e+21",
        "u423": "(v)=>v*1e+24",
        "u424": "(v)=>v*1e+27",
        "u425": "(v)=>v*1e+30",
        "u426": "(v)=>v*1e+33",
        "u427": "(v)=>v*1e+36",
        "u428": "(v)=>v*1e+39",
        "u429": "(v)=>v*1e+42"
      },
      "description": "A exalux (Elx) is an SI unit of illuminance applying the exa‑ prefix (10^18). One exalux equals 1e+18 luxs. The exa prefix denotes a factor of 10^18, so 1 exalux equals 10^18 luxs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Exalux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exalux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exalux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exalux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exalux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exalux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exalux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exalux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u412",
      "name": "petalux",
      "shortName": "Plx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-09",
        "u410": "(v)=>v*1e-06",
        "u411": "(v)=>v*0.001",
        "u413": "(v)=>v*1000",
        "u414": "(v)=>v*1000000",
        "u415": "(v)=>v*1000000000",
        "u416": "(v)=>v*1000000000000",
        "u417": "(v)=>v*10000000000000",
        "u418": "(v)=>v*100000000000000",
        "u419": "(v)=>v*1e+15",
        "u420": "(v)=>v*1e+16",
        "u421": "(v)=>v*1e+17",
        "u422": "(v)=>v*1e+18",
        "u423": "(v)=>v*1e+21",
        "u424": "(v)=>v*1e+24",
        "u425": "(v)=>v*1e+27",
        "u426": "(v)=>v*1e+30",
        "u427": "(v)=>v*1e+33",
        "u428": "(v)=>v*1e+36",
        "u429": "(v)=>v*1e+39"
      },
      "description": "A petalux (Plx) is an SI unit of illuminance applying the peta‑ prefix (10^15). One petalux equals 1e+15 luxs. The peta prefix denotes a factor of 10^15, so 1 petalux equals 10^15 luxs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Petalux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petalux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petalux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petalux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petalux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petalux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petalux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petalux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u413",
      "name": "teralux",
      "shortName": "Tlx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-12",
        "u410": "(v)=>v*1e-09",
        "u411": "(v)=>v*1e-06",
        "u412": "(v)=>v*0.001",
        "u414": "(v)=>v*1000",
        "u415": "(v)=>v*1000000",
        "u416": "(v)=>v*1000000000",
        "u417": "(v)=>v*10000000000",
        "u418": "(v)=>v*100000000000",
        "u419": "(v)=>v*1000000000000",
        "u420": "(v)=>v*10000000000000",
        "u421": "(v)=>v*100000000000000",
        "u422": "(v)=>v*1e+15",
        "u423": "(v)=>v*1e+18",
        "u424": "(v)=>v*1e+21",
        "u425": "(v)=>v*1e+24",
        "u426": "(v)=>v*1e+27",
        "u427": "(v)=>v*1e+30",
        "u428": "(v)=>v*1e+33",
        "u429": "(v)=>v*1e+36"
      },
      "description": "A teralux (Tlx) is an SI unit of illuminance applying the tera‑ prefix (10^12). One teralux equals 1e+12 luxs. The tera prefix denotes a factor of 10^12, so 1 teralux equals 10^12 luxs. Such immensely large magnitudes are primarily encountered in scientific and engineering contexts. Teralux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teralux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teralux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teralux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teralux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teralux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teralux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teralux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u414",
      "name": "gigalux",
      "shortName": "Glx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-15",
        "u410": "(v)=>v*1e-12",
        "u411": "(v)=>v*1e-09",
        "u412": "(v)=>v*1e-06",
        "u413": "(v)=>v*0.001",
        "u415": "(v)=>v*1000",
        "u416": "(v)=>v*1000000",
        "u417": "(v)=>v*10000000",
        "u418": "(v)=>v*100000000",
        "u419": "(v)=>v*1000000000",
        "u420": "(v)=>v*10000000000",
        "u421": "(v)=>v*100000000000",
        "u422": "(v)=>v*1000000000000",
        "u423": "(v)=>v*1e+15",
        "u424": "(v)=>v*1e+18",
        "u425": "(v)=>v*1e+21",
        "u426": "(v)=>v*1e+24",
        "u427": "(v)=>v*1e+27",
        "u428": "(v)=>v*1e+30",
        "u429": "(v)=>v*1e+33"
      },
      "description": "A gigalux (Glx) is an SI unit of illuminance applying the giga‑ prefix (10^9). One gigalux equals 1000000000 luxs. The giga prefix denotes a factor of 10^9, so 1 gigalux equals 10^9 luxs. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Gigalux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigalux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigalux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigalux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigalux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigalux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigalux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigalux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u415",
      "name": "megalux",
      "shortName": "Mlx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-18",
        "u410": "(v)=>v*1e-15",
        "u411": "(v)=>v*1e-12",
        "u412": "(v)=>v*1e-09",
        "u413": "(v)=>v*1e-06",
        "u414": "(v)=>v*0.001",
        "u416": "(v)=>v*1000",
        "u417": "(v)=>v*10000",
        "u418": "(v)=>v*100000",
        "u419": "(v)=>v*1000000",
        "u420": "(v)=>v*10000000",
        "u421": "(v)=>v*100000000",
        "u422": "(v)=>v*1000000000",
        "u423": "(v)=>v*1000000000000",
        "u424": "(v)=>v*1e+15",
        "u425": "(v)=>v*1e+18",
        "u426": "(v)=>v*1e+21",
        "u427": "(v)=>v*1e+24",
        "u428": "(v)=>v*1e+27",
        "u429": "(v)=>v*1e+30"
      },
      "description": "A megalux (Mlx) is an SI unit of illuminance applying the mega‑ prefix (10^6). One megalux equals 1000000 luxs. The mega prefix denotes a factor of 10^6, so 1 megalux equals 10^6 luxs. Such very large magnitudes are primarily encountered in scientific and engineering contexts. Megalux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megalux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megalux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megalux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megalux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megalux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megalux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megalux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u416",
      "name": "kilolux",
      "shortName": "klx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-21",
        "u410": "(v)=>v*1e-18",
        "u411": "(v)=>v*1e-15",
        "u412": "(v)=>v*1e-12",
        "u413": "(v)=>v*1e-09",
        "u414": "(v)=>v*1e-06",
        "u415": "(v)=>v*0.001",
        "u417": "(v)=>v*10",
        "u418": "(v)=>v*100",
        "u419": "(v)=>v*1000",
        "u420": "(v)=>v*10000",
        "u421": "(v)=>v*100000",
        "u422": "(v)=>v*1000000",
        "u423": "(v)=>v*1000000000",
        "u424": "(v)=>v*1000000000000",
        "u425": "(v)=>v*1e+15",
        "u426": "(v)=>v*1e+18",
        "u427": "(v)=>v*1e+21",
        "u428": "(v)=>v*1e+24",
        "u429": "(v)=>v*1e+27"
      },
      "description": "A kilolux (klx) is an SI unit of illuminance applying the kilo‑ prefix (10^3). One kilolux equals 1000 luxs. The kilo prefix denotes a factor of 10^3, so 1 kilolux equals 10^3 luxs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilolux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilolux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilolux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilolux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilolux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilolux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilolux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilolux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u417",
      "name": "hectolux",
      "shortName": "hlx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-22",
        "u410": "(v)=>v*1e-19",
        "u411": "(v)=>v*1e-16",
        "u412": "(v)=>v*1e-13",
        "u413": "(v)=>v*1e-10",
        "u414": "(v)=>v*1e-07",
        "u415": "(v)=>v*0.0001",
        "u416": "(v)=>v*0.1",
        "u418": "(v)=>v*10",
        "u419": "(v)=>v*100",
        "u420": "(v)=>v*1000",
        "u421": "(v)=>v*10000",
        "u422": "(v)=>v*100000",
        "u423": "(v)=>v*100000000",
        "u424": "(v)=>v*100000000000",
        "u425": "(v)=>v*100000000000000",
        "u426": "(v)=>v*1e+17",
        "u427": "(v)=>v*1e+20",
        "u428": "(v)=>v*1e+23",
        "u429": "(v)=>v*1e+26"
      },
      "description": "A hectolux (hlx) is an SI unit of illuminance applying the hecto‑ prefix (10^2). One hectolux equals 100 luxs. The hecto prefix denotes a factor of 10^2, so 1 hectolux equals 10^2 luxs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Hectolux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectolux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectolux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectolux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectolux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectolux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectolux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectolux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u418",
      "name": "decalux",
      "shortName": "dalx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-23",
        "u410": "(v)=>v*1e-20",
        "u411": "(v)=>v*1e-17",
        "u412": "(v)=>v*1e-14",
        "u413": "(v)=>v*1e-11",
        "u414": "(v)=>v*1e-08",
        "u415": "(v)=>v*1e-05",
        "u416": "(v)=>v*0.01",
        "u417": "(v)=>v*0.1",
        "u419": "(v)=>v*10",
        "u420": "(v)=>v*100",
        "u421": "(v)=>v*1000",
        "u422": "(v)=>v*10000",
        "u423": "(v)=>v*10000000",
        "u424": "(v)=>v*10000000000",
        "u425": "(v)=>v*10000000000000",
        "u426": "(v)=>v*1e+16",
        "u427": "(v)=>v*1e+19",
        "u428": "(v)=>v*1e+22",
        "u429": "(v)=>v*1e+25"
      },
      "description": "A decalux (dalx) is an SI unit of illuminance applying the deca‑ prefix (10^1). One decalux equals 10 luxs. The deca prefix denotes a factor of 10^1, so 1 decalux equals 10^1 luxs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decalux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decalux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decalux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decalux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decalux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decalux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decalux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decalux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u419",
      "name": "lux",
      "shortName": "lx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-24",
        "u410": "(v)=>v*1e-21",
        "u411": "(v)=>v*1e-18",
        "u412": "(v)=>v*1e-15",
        "u413": "(v)=>v*1e-12",
        "u414": "(v)=>v*1e-09",
        "u415": "(v)=>v*1e-06",
        "u416": "(v)=>v*0.001",
        "u417": "(v)=>v*0.01",
        "u418": "(v)=>v*0.1",
        "u420": "(v)=>v*10",
        "u421": "(v)=>v*100",
        "u422": "(v)=>v*1000",
        "u423": "(v)=>v*1000000",
        "u424": "(v)=>v*1000000000",
        "u425": "(v)=>v*1000000000000",
        "u426": "(v)=>v*1e+15",
        "u427": "(v)=>v*1e+18",
        "u428": "(v)=>v*1e+21",
        "u429": "(v)=>v*1e+24"
      },
      "description": "The lux (lx) is the SI derived unit of illuminance, equal to one lumen per square metre. Lux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of lux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent lux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, lux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when lux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding lux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed lux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of lux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-derived",
        "metric"
      ]
    },
    {
      "id": "u420",
      "name": "decilux",
      "shortName": "dlx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-25",
        "u410": "(v)=>v*1e-22",
        "u411": "(v)=>v*1e-19",
        "u412": "(v)=>v*1e-16",
        "u413": "(v)=>v*1e-13",
        "u414": "(v)=>v*1e-10",
        "u415": "(v)=>v*1e-07",
        "u416": "(v)=>v*0.0001",
        "u417": "(v)=>v*0.001",
        "u418": "(v)=>v*0.01",
        "u419": "(v)=>v*0.1",
        "u421": "(v)=>v*10",
        "u422": "(v)=>v*100",
        "u423": "(v)=>v*100000",
        "u424": "(v)=>v*100000000",
        "u425": "(v)=>v*100000000000",
        "u426": "(v)=>v*100000000000000",
        "u427": "(v)=>v*1e+17",
        "u428": "(v)=>v*1e+20",
        "u429": "(v)=>v*1e+23"
      },
      "description": "A decilux (dlx) is an SI unit of illuminance applying the deci‑ prefix (10^-1). One decilux equals 0.1 luxs. The deci prefix denotes a factor of 10^-1, so 1 decilux equals 10^-1 luxs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Decilux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decilux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decilux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decilux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decilux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decilux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decilux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decilux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u421",
      "name": "centilux",
      "shortName": "clx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-26",
        "u410": "(v)=>v*1e-23",
        "u411": "(v)=>v*1e-20",
        "u412": "(v)=>v*1e-17",
        "u413": "(v)=>v*1e-14",
        "u414": "(v)=>v*1e-11",
        "u415": "(v)=>v*1e-08",
        "u416": "(v)=>v*1e-05",
        "u417": "(v)=>v*0.0001",
        "u418": "(v)=>v*0.001",
        "u419": "(v)=>v*0.01",
        "u420": "(v)=>v*0.1",
        "u422": "(v)=>v*10",
        "u423": "(v)=>v*10000",
        "u424": "(v)=>v*10000000",
        "u425": "(v)=>v*10000000000",
        "u426": "(v)=>v*10000000000000",
        "u427": "(v)=>v*1e+16",
        "u428": "(v)=>v*1e+19",
        "u429": "(v)=>v*1e+22"
      },
      "description": "A centilux (clx) is an SI unit of illuminance applying the centi‑ prefix (10^-2). One centilux equals 0.01 luxs. The centi prefix denotes a factor of 10^-2, so 1 centilux equals 10^-2 luxs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Centilux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centilux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centilux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centilux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centilux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centilux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centilux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centilux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u422",
      "name": "millilux",
      "shortName": "mlx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-27",
        "u410": "(v)=>v*1e-24",
        "u411": "(v)=>v*1e-21",
        "u412": "(v)=>v*1e-18",
        "u413": "(v)=>v*1e-15",
        "u414": "(v)=>v*1e-12",
        "u415": "(v)=>v*1e-09",
        "u416": "(v)=>v*1e-06",
        "u417": "(v)=>v*1e-05",
        "u418": "(v)=>v*0.0001",
        "u419": "(v)=>v*0.001",
        "u420": "(v)=>v*0.01",
        "u421": "(v)=>v*0.1",
        "u423": "(v)=>v*1000",
        "u424": "(v)=>v*1000000",
        "u425": "(v)=>v*1000000000",
        "u426": "(v)=>v*1000000000000",
        "u427": "(v)=>v*1e+15",
        "u428": "(v)=>v*1e+18",
        "u429": "(v)=>v*1e+21"
      },
      "description": "A millilux (mlx) is an SI unit of illuminance applying the milli‑ prefix (10^-3). One millilux equals 0.001 luxs. The milli prefix denotes a factor of 10^-3, so 1 millilux equals 10^-3 luxs. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Millilux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millilux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millilux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millilux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millilux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millilux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millilux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millilux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u423",
      "name": "microlux",
      "shortName": "μlx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-30",
        "u410": "(v)=>v*1e-27",
        "u411": "(v)=>v*1e-24",
        "u412": "(v)=>v*1e-21",
        "u413": "(v)=>v*1e-18",
        "u414": "(v)=>v*1e-15",
        "u415": "(v)=>v*1e-12",
        "u416": "(v)=>v*1e-09",
        "u417": "(v)=>v*1e-08",
        "u418": "(v)=>v*1e-07",
        "u419": "(v)=>v*1e-06",
        "u420": "(v)=>v*1e-05",
        "u421": "(v)=>v*0.0001",
        "u422": "(v)=>v*0.001",
        "u424": "(v)=>v*1000",
        "u425": "(v)=>v*1000000",
        "u426": "(v)=>v*1000000000",
        "u427": "(v)=>v*1000000000000",
        "u428": "(v)=>v*1e+15",
        "u429": "(v)=>v*1e+18"
      },
      "description": "A microlux (μlx) is an SI unit of illuminance applying the micro‑ prefix (10^-6). One microlux equals 1e-06 luxs. The micro prefix denotes a factor of 10^-6, so 1 microlux equals 10^-6 luxs. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Microlux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microlux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microlux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microlux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microlux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microlux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microlux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microlux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u424",
      "name": "nanolux",
      "shortName": "nlx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-33",
        "u410": "(v)=>v*1e-30",
        "u411": "(v)=>v*1e-27",
        "u412": "(v)=>v*1e-24",
        "u413": "(v)=>v*1e-21",
        "u414": "(v)=>v*1e-18",
        "u415": "(v)=>v*1e-15",
        "u416": "(v)=>v*1e-12",
        "u417": "(v)=>v*1e-11",
        "u418": "(v)=>v*1e-10",
        "u419": "(v)=>v*1e-09",
        "u420": "(v)=>v*1e-08",
        "u421": "(v)=>v*1e-07",
        "u422": "(v)=>v*1e-06",
        "u423": "(v)=>v*0.001",
        "u425": "(v)=>v*1000",
        "u426": "(v)=>v*1000000",
        "u427": "(v)=>v*1000000000",
        "u428": "(v)=>v*1000000000000",
        "u429": "(v)=>v*1e+15"
      },
      "description": "A nanolux (nlx) is an SI unit of illuminance applying the nano‑ prefix (10^-9). One nanolux equals 1e-09 luxs. The nano prefix denotes a factor of 10^-9, so 1 nanolux equals 10^-9 luxs. Such very small magnitudes are primarily encountered in scientific and engineering contexts. Nanolux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanolux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanolux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanolux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanolux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanolux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanolux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanolux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u425",
      "name": "picolux",
      "shortName": "plx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-36",
        "u410": "(v)=>v*1e-33",
        "u411": "(v)=>v*1e-30",
        "u412": "(v)=>v*1e-27",
        "u413": "(v)=>v*1e-24",
        "u414": "(v)=>v*1e-21",
        "u415": "(v)=>v*1e-18",
        "u416": "(v)=>v*1e-15",
        "u417": "(v)=>v*1e-14",
        "u418": "(v)=>v*1e-13",
        "u419": "(v)=>v*1e-12",
        "u420": "(v)=>v*1e-11",
        "u421": "(v)=>v*1e-10",
        "u422": "(v)=>v*1e-09",
        "u423": "(v)=>v*1e-06",
        "u424": "(v)=>v*0.001",
        "u426": "(v)=>v*1000",
        "u427": "(v)=>v*1000000",
        "u428": "(v)=>v*1000000000",
        "u429": "(v)=>v*1000000000000"
      },
      "description": "A picolux (plx) is an SI unit of illuminance applying the pico‑ prefix (10^-12). One picolux equals 1e-12 luxs. The pico prefix denotes a factor of 10^-12, so 1 picolux equals 10^-12 luxs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Picolux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picolux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picolux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picolux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picolux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picolux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picolux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picolux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u426",
      "name": "femtolux",
      "shortName": "flx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-39",
        "u410": "(v)=>v*1e-36",
        "u411": "(v)=>v*1e-33",
        "u412": "(v)=>v*1e-30",
        "u413": "(v)=>v*1e-27",
        "u414": "(v)=>v*1e-24",
        "u415": "(v)=>v*1e-21",
        "u416": "(v)=>v*1e-18",
        "u417": "(v)=>v*1e-17",
        "u418": "(v)=>v*1e-16",
        "u419": "(v)=>v*1e-15",
        "u420": "(v)=>v*1e-14",
        "u421": "(v)=>v*1e-13",
        "u422": "(v)=>v*1e-12",
        "u423": "(v)=>v*1e-09",
        "u424": "(v)=>v*1e-06",
        "u425": "(v)=>v*0.001",
        "u427": "(v)=>v*1000",
        "u428": "(v)=>v*1000000",
        "u429": "(v)=>v*1000000000"
      },
      "description": "A femtolux (flx) is an SI unit of illuminance applying the femto‑ prefix (10^-15). One femtolux equals 1e-15 luxs. The femto prefix denotes a factor of 10^-15, so 1 femtolux equals 10^-15 luxs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Femtolux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtolux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtolux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtolux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtolux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtolux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtolux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtolux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u427",
      "name": "attolux",
      "shortName": "alx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-42",
        "u410": "(v)=>v*1e-39",
        "u411": "(v)=>v*1e-36",
        "u412": "(v)=>v*1e-33",
        "u413": "(v)=>v*1e-30",
        "u414": "(v)=>v*1e-27",
        "u415": "(v)=>v*1e-24",
        "u416": "(v)=>v*1e-21",
        "u417": "(v)=>v*1e-20",
        "u418": "(v)=>v*1e-19",
        "u419": "(v)=>v*1e-18",
        "u420": "(v)=>v*1e-17",
        "u421": "(v)=>v*1e-16",
        "u422": "(v)=>v*1e-15",
        "u423": "(v)=>v*1e-12",
        "u424": "(v)=>v*1e-09",
        "u425": "(v)=>v*1e-06",
        "u426": "(v)=>v*0.001",
        "u428": "(v)=>v*1000",
        "u429": "(v)=>v*1000000"
      },
      "description": "A attolux (alx) is an SI unit of illuminance applying the atto‑ prefix (10^-18). One attolux equals 1e-18 luxs. The atto prefix denotes a factor of 10^-18, so 1 attolux equals 10^-18 luxs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Attolux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attolux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attolux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attolux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attolux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attolux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attolux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attolux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u428",
      "name": "zeptolux",
      "shortName": "zlx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-45",
        "u410": "(v)=>v*1e-42",
        "u411": "(v)=>v*1e-39",
        "u412": "(v)=>v*1e-36",
        "u413": "(v)=>v*1e-33",
        "u414": "(v)=>v*1e-30",
        "u415": "(v)=>v*1e-27",
        "u416": "(v)=>v*1e-24",
        "u417": "(v)=>v*1e-23",
        "u418": "(v)=>v*1e-22",
        "u419": "(v)=>v*1e-21",
        "u420": "(v)=>v*1e-20",
        "u421": "(v)=>v*1e-19",
        "u422": "(v)=>v*1e-18",
        "u423": "(v)=>v*1e-15",
        "u424": "(v)=>v*1e-12",
        "u425": "(v)=>v*1e-09",
        "u426": "(v)=>v*1e-06",
        "u427": "(v)=>v*0.001",
        "u429": "(v)=>v*1000"
      },
      "description": "A zeptolux (zlx) is an SI unit of illuminance applying the zepto‑ prefix (10^-21). One zeptolux equals 1e-21 luxs. The zepto prefix denotes a factor of 10^-21, so 1 zeptolux equals 10^-21 luxs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Zeptolux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptolux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptolux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptolux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptolux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptolux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptolux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptolux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u429",
      "name": "yoctolux",
      "shortName": "ylx",
      "categoryId": "c13",
      "conversions": {
        "u409": "(v)=>v*1e-48",
        "u410": "(v)=>v*1e-45",
        "u411": "(v)=>v*1e-42",
        "u412": "(v)=>v*1e-39",
        "u413": "(v)=>v*1e-36",
        "u414": "(v)=>v*1e-33",
        "u415": "(v)=>v*1e-30",
        "u416": "(v)=>v*1e-27",
        "u417": "(v)=>v*1e-26",
        "u418": "(v)=>v*1e-25",
        "u419": "(v)=>v*1e-24",
        "u420": "(v)=>v*1e-23",
        "u421": "(v)=>v*1e-22",
        "u422": "(v)=>v*1e-21",
        "u423": "(v)=>v*1e-18",
        "u424": "(v)=>v*1e-15",
        "u425": "(v)=>v*1e-12",
        "u426": "(v)=>v*1e-09",
        "u427": "(v)=>v*1e-06",
        "u428": "(v)=>v*0.001"
      },
      "description": "A yoctolux (ylx) is an SI unit of illuminance applying the yocto‑ prefix (10^-24). One yoctolux equals 1e-24 luxs. The yocto prefix denotes a factor of 10^-24, so 1 yoctolux equals 10^-24 luxs. Such extremely small magnitudes are primarily encountered in scientific and engineering contexts. Yoctolux belongs to the broader physical quantity of illuminance. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctolux often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctolux as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctolux is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctolux values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctolux has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctolux metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctolux fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u430",
      "name": "yottapascal‑second",
      "shortName": "YPas",
      "categoryId": "c26",
      "conversions": {
        "u431": "(v)=>v*1000",
        "u432": "(v)=>v*1000000",
        "u433": "(v)=>v*1000000000",
        "u434": "(v)=>v*1000000000000",
        "u435": "(v)=>v*1e+15",
        "u436": "(v)=>v*1e+18",
        "u437": "(v)=>v*1e+21",
        "u438": "(v)=>v*1e+22",
        "u439": "(v)=>v*1e+23",
        "u440": "(v)=>v*1e+24",
        "u441": "(v)=>v*1e+25",
        "u442": "(v)=>v*1e+26",
        "u443": "(v)=>v*1e+27",
        "u444": "(v)=>v*1e+30",
        "u445": "(v)=>v*1e+33",
        "u446": "(v)=>v*1e+36",
        "u447": "(v)=>v*1e+39",
        "u448": "(v)=>v*1e+42",
        "u449": "(v)=>v*1e+45",
        "u450": "(v)=>v*1e+48"
      },
      "description": "A yottapascal‑second (YPas) is an SI unit of viscosity applying the yotta‑ prefix (10^24). One yottapascal‑second equals 1e+24 pascal‑seconds. The yotta prefix denotes a factor of 10^24, so 1 yottapascal‑second equals 10^24 pascal‑seconds. Such immensely large magnitudes are primarily encountered in specialist rheological studies. Yottapascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottapascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottapascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottapascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottapascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottapascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottapascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottapascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u431",
      "name": "zettapascal‑second",
      "shortName": "ZPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*0.001",
        "u432": "(v)=>v*1000",
        "u433": "(v)=>v*1000000",
        "u434": "(v)=>v*1000000000",
        "u435": "(v)=>v*1000000000000",
        "u436": "(v)=>v*1e+15",
        "u437": "(v)=>v*1e+18",
        "u438": "(v)=>v*1e+19",
        "u439": "(v)=>v*1e+20",
        "u440": "(v)=>v*1e+21",
        "u441": "(v)=>v*1e+22",
        "u442": "(v)=>v*1e+23",
        "u443": "(v)=>v*1e+24",
        "u444": "(v)=>v*1e+27",
        "u445": "(v)=>v*1e+30",
        "u446": "(v)=>v*1e+33",
        "u447": "(v)=>v*1e+36",
        "u448": "(v)=>v*1e+39",
        "u449": "(v)=>v*1e+42",
        "u450": "(v)=>v*1e+45"
      },
      "description": "A zettapascal‑second (ZPas) is an SI unit of viscosity applying the zetta‑ prefix (10^21). One zettapascal‑second equals 1e+21 pascal‑seconds. The zetta prefix denotes a factor of 10^21, so 1 zettapascal‑second equals 10^21 pascal‑seconds. Such immensely large magnitudes are primarily encountered in specialist rheological studies. Zettapascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettapascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettapascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettapascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettapascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettapascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettapascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettapascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u432",
      "name": "exapascal‑second",
      "shortName": "EPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-06",
        "u431": "(v)=>v*0.001",
        "u433": "(v)=>v*1000",
        "u434": "(v)=>v*1000000",
        "u435": "(v)=>v*1000000000",
        "u436": "(v)=>v*1000000000000",
        "u437": "(v)=>v*1e+15",
        "u438": "(v)=>v*1e+16",
        "u439": "(v)=>v*1e+17",
        "u440": "(v)=>v*1e+18",
        "u441": "(v)=>v*1e+19",
        "u442": "(v)=>v*1e+20",
        "u443": "(v)=>v*1e+21",
        "u444": "(v)=>v*1e+24",
        "u445": "(v)=>v*1e+27",
        "u446": "(v)=>v*1e+30",
        "u447": "(v)=>v*1e+33",
        "u448": "(v)=>v*1e+36",
        "u449": "(v)=>v*1e+39",
        "u450": "(v)=>v*1e+42"
      },
      "description": "A exapascal‑second (EPas) is an SI unit of viscosity applying the exa‑ prefix (10^18). One exapascal‑second equals 1e+18 pascal‑seconds. The exa prefix denotes a factor of 10^18, so 1 exapascal‑second equals 10^18 pascal‑seconds. Such immensely large magnitudes are primarily encountered in specialist rheological studies. Exapascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exapascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exapascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exapascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exapascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exapascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exapascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exapascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u433",
      "name": "petapascal‑second",
      "shortName": "PPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-09",
        "u431": "(v)=>v*1e-06",
        "u432": "(v)=>v*0.001",
        "u434": "(v)=>v*1000",
        "u435": "(v)=>v*1000000",
        "u436": "(v)=>v*1000000000",
        "u437": "(v)=>v*1000000000000",
        "u438": "(v)=>v*10000000000000",
        "u439": "(v)=>v*100000000000000",
        "u440": "(v)=>v*1e+15",
        "u441": "(v)=>v*1e+16",
        "u442": "(v)=>v*1e+17",
        "u443": "(v)=>v*1e+18",
        "u444": "(v)=>v*1e+21",
        "u445": "(v)=>v*1e+24",
        "u446": "(v)=>v*1e+27",
        "u447": "(v)=>v*1e+30",
        "u448": "(v)=>v*1e+33",
        "u449": "(v)=>v*1e+36",
        "u450": "(v)=>v*1e+39"
      },
      "description": "A petapascal‑second (PPas) is an SI unit of viscosity applying the peta‑ prefix (10^15). One petapascal‑second equals 1e+15 pascal‑seconds. The peta prefix denotes a factor of 10^15, so 1 petapascal‑second equals 10^15 pascal‑seconds. Such immensely large magnitudes are primarily encountered in specialist rheological studies. Petapascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petapascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petapascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petapascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petapascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petapascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petapascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petapascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u434",
      "name": "terapascal‑second",
      "shortName": "TPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-12",
        "u431": "(v)=>v*1e-09",
        "u432": "(v)=>v*1e-06",
        "u433": "(v)=>v*0.001",
        "u435": "(v)=>v*1000",
        "u436": "(v)=>v*1000000",
        "u437": "(v)=>v*1000000000",
        "u438": "(v)=>v*10000000000",
        "u439": "(v)=>v*100000000000",
        "u440": "(v)=>v*1000000000000",
        "u441": "(v)=>v*10000000000000",
        "u442": "(v)=>v*100000000000000",
        "u443": "(v)=>v*1e+15",
        "u444": "(v)=>v*1e+18",
        "u445": "(v)=>v*1e+21",
        "u446": "(v)=>v*1e+24",
        "u447": "(v)=>v*1e+27",
        "u448": "(v)=>v*1e+30",
        "u449": "(v)=>v*1e+33",
        "u450": "(v)=>v*1e+36"
      },
      "description": "A terapascal‑second (TPas) is an SI unit of viscosity applying the tera‑ prefix (10^12). One terapascal‑second equals 1e+12 pascal‑seconds. The tera prefix denotes a factor of 10^12, so 1 terapascal‑second equals 10^12 pascal‑seconds. Such immensely large magnitudes are primarily encountered in specialist rheological studies. Terapascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terapascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terapascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terapascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terapascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terapascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terapascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terapascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u435",
      "name": "gigapascal‑second",
      "shortName": "GPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-15",
        "u431": "(v)=>v*1e-12",
        "u432": "(v)=>v*1e-09",
        "u433": "(v)=>v*1e-06",
        "u434": "(v)=>v*0.001",
        "u436": "(v)=>v*1000",
        "u437": "(v)=>v*1000000",
        "u438": "(v)=>v*10000000",
        "u439": "(v)=>v*100000000",
        "u440": "(v)=>v*1000000000",
        "u441": "(v)=>v*10000000000",
        "u442": "(v)=>v*100000000000",
        "u443": "(v)=>v*1000000000000",
        "u444": "(v)=>v*1e+15",
        "u445": "(v)=>v*1e+18",
        "u446": "(v)=>v*1e+21",
        "u447": "(v)=>v*1e+24",
        "u448": "(v)=>v*1e+27",
        "u449": "(v)=>v*1e+30",
        "u450": "(v)=>v*1e+33"
      },
      "description": "A gigapascal‑second (GPas) is an SI unit of viscosity applying the giga‑ prefix (10^9). One gigapascal‑second equals 1000000000 pascal‑seconds. The giga prefix denotes a factor of 10^9, so 1 gigapascal‑second equals 10^9 pascal‑seconds. Such very large magnitudes are primarily encountered in specialist rheological studies. Gigapascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigapascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigapascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigapascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigapascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigapascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigapascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigapascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u436",
      "name": "megapascal‑second",
      "shortName": "MPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-18",
        "u431": "(v)=>v*1e-15",
        "u432": "(v)=>v*1e-12",
        "u433": "(v)=>v*1e-09",
        "u434": "(v)=>v*1e-06",
        "u435": "(v)=>v*0.001",
        "u437": "(v)=>v*1000",
        "u438": "(v)=>v*10000",
        "u439": "(v)=>v*100000",
        "u440": "(v)=>v*1000000",
        "u441": "(v)=>v*10000000",
        "u442": "(v)=>v*100000000",
        "u443": "(v)=>v*1000000000",
        "u444": "(v)=>v*1000000000000",
        "u445": "(v)=>v*1e+15",
        "u446": "(v)=>v*1e+18",
        "u447": "(v)=>v*1e+21",
        "u448": "(v)=>v*1e+24",
        "u449": "(v)=>v*1e+27",
        "u450": "(v)=>v*1e+30"
      },
      "description": "A megapascal‑second (MPas) is an SI unit of viscosity applying the mega‑ prefix (10^6). One megapascal‑second equals 1000000 pascal‑seconds. The mega prefix denotes a factor of 10^6, so 1 megapascal‑second equals 10^6 pascal‑seconds. Such very large magnitudes are primarily encountered in specialist rheological studies. Megapascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megapascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megapascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megapascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megapascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megapascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megapascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megapascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u437",
      "name": "kilopascal‑second",
      "shortName": "kPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-21",
        "u431": "(v)=>v*1e-18",
        "u432": "(v)=>v*1e-15",
        "u433": "(v)=>v*1e-12",
        "u434": "(v)=>v*1e-09",
        "u435": "(v)=>v*1e-06",
        "u436": "(v)=>v*0.001",
        "u438": "(v)=>v*10",
        "u439": "(v)=>v*100",
        "u440": "(v)=>v*1000",
        "u441": "(v)=>v*10000",
        "u442": "(v)=>v*100000",
        "u443": "(v)=>v*1000000",
        "u444": "(v)=>v*1000000000",
        "u445": "(v)=>v*1000000000000",
        "u446": "(v)=>v*1e+15",
        "u447": "(v)=>v*1e+18",
        "u448": "(v)=>v*1e+21",
        "u449": "(v)=>v*1e+24",
        "u450": "(v)=>v*1e+27"
      },
      "description": "A kilopascal‑second (kPas) is an SI unit of viscosity applying the kilo‑ prefix (10^3). One kilopascal‑second equals 1000 pascal‑seconds. The kilo prefix denotes a factor of 10^3, so 1 kilopascal‑second equals 10^3 pascal‑seconds. Such scaled magnitudes are primarily encountered in specialist rheological studies. Kilopascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilopascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilopascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilopascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilopascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilopascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilopascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilopascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u438",
      "name": "hectopascal‑second",
      "shortName": "hPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-22",
        "u431": "(v)=>v*1e-19",
        "u432": "(v)=>v*1e-16",
        "u433": "(v)=>v*1e-13",
        "u434": "(v)=>v*1e-10",
        "u435": "(v)=>v*1e-07",
        "u436": "(v)=>v*0.0001",
        "u437": "(v)=>v*0.1",
        "u439": "(v)=>v*10",
        "u440": "(v)=>v*100",
        "u441": "(v)=>v*1000",
        "u442": "(v)=>v*10000",
        "u443": "(v)=>v*100000",
        "u444": "(v)=>v*100000000",
        "u445": "(v)=>v*100000000000",
        "u446": "(v)=>v*100000000000000",
        "u447": "(v)=>v*1e+17",
        "u448": "(v)=>v*1e+20",
        "u449": "(v)=>v*1e+23",
        "u450": "(v)=>v*1e+26"
      },
      "description": "A hectopascal‑second (hPas) is an SI unit of viscosity applying the hecto‑ prefix (10^2). One hectopascal‑second equals 100 pascal‑seconds. The hecto prefix denotes a factor of 10^2, so 1 hectopascal‑second equals 10^2 pascal‑seconds. Such scaled magnitudes are primarily encountered in specialist rheological studies. Hectopascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectopascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectopascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectopascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectopascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectopascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectopascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectopascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u439",
      "name": "decapascal‑second",
      "shortName": "daPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-23",
        "u431": "(v)=>v*1e-20",
        "u432": "(v)=>v*1e-17",
        "u433": "(v)=>v*1e-14",
        "u434": "(v)=>v*1e-11",
        "u435": "(v)=>v*1e-08",
        "u436": "(v)=>v*1e-05",
        "u437": "(v)=>v*0.01",
        "u438": "(v)=>v*0.1",
        "u440": "(v)=>v*10",
        "u441": "(v)=>v*100",
        "u442": "(v)=>v*1000",
        "u443": "(v)=>v*10000",
        "u444": "(v)=>v*10000000",
        "u445": "(v)=>v*10000000000",
        "u446": "(v)=>v*10000000000000",
        "u447": "(v)=>v*1e+16",
        "u448": "(v)=>v*1e+19",
        "u449": "(v)=>v*1e+22",
        "u450": "(v)=>v*1e+25"
      },
      "description": "A decapascal‑second (daPas) is an SI unit of viscosity applying the deca‑ prefix (10^1). One decapascal‑second equals 10 pascal‑seconds. The deca prefix denotes a factor of 10^1, so 1 decapascal‑second equals 10^1 pascal‑seconds. Such scaled magnitudes are primarily encountered in specialist rheological studies. Decapascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decapascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decapascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decapascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decapascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decapascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decapascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decapascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u440",
      "name": "pascal‑second",
      "shortName": "Pas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-24",
        "u431": "(v)=>v*1e-21",
        "u432": "(v)=>v*1e-18",
        "u433": "(v)=>v*1e-15",
        "u434": "(v)=>v*1e-12",
        "u435": "(v)=>v*1e-09",
        "u436": "(v)=>v*1e-06",
        "u437": "(v)=>v*0.001",
        "u438": "(v)=>v*0.01",
        "u439": "(v)=>v*0.1",
        "u441": "(v)=>v*10",
        "u442": "(v)=>v*100",
        "u443": "(v)=>v*1000",
        "u444": "(v)=>v*1000000",
        "u445": "(v)=>v*1000000000",
        "u446": "(v)=>v*1000000000000",
        "u447": "(v)=>v*1e+15",
        "u448": "(v)=>v*1e+18",
        "u449": "(v)=>v*1e+21",
        "u450": "(v)=>v*1e+24"
      },
      "description": "The pascal‑second (Pa·s) is the SI derived unit of dynamic viscosity. Pascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of pascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent pascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, pascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when pascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding pascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed pascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of pascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u441",
      "name": "decipascal‑second",
      "shortName": "dPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-25",
        "u431": "(v)=>v*1e-22",
        "u432": "(v)=>v*1e-19",
        "u433": "(v)=>v*1e-16",
        "u434": "(v)=>v*1e-13",
        "u435": "(v)=>v*1e-10",
        "u436": "(v)=>v*1e-07",
        "u437": "(v)=>v*0.0001",
        "u438": "(v)=>v*0.001",
        "u439": "(v)=>v*0.01",
        "u440": "(v)=>v*0.1",
        "u442": "(v)=>v*10",
        "u443": "(v)=>v*100",
        "u444": "(v)=>v*100000",
        "u445": "(v)=>v*100000000",
        "u446": "(v)=>v*100000000000",
        "u447": "(v)=>v*100000000000000",
        "u448": "(v)=>v*1e+17",
        "u449": "(v)=>v*1e+20",
        "u450": "(v)=>v*1e+23"
      },
      "description": "A decipascal‑second (dPas) is an SI unit of viscosity applying the deci‑ prefix (10^-1). One decipascal‑second equals 0.1 pascal‑seconds. The deci prefix denotes a factor of 10^-1, so 1 decipascal‑second equals 10^-1 pascal‑seconds. Such scaled magnitudes are primarily encountered in specialist rheological studies. Decipascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decipascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decipascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decipascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decipascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decipascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decipascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decipascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u442",
      "name": "centipascal‑second",
      "shortName": "cPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-26",
        "u431": "(v)=>v*1e-23",
        "u432": "(v)=>v*1e-20",
        "u433": "(v)=>v*1e-17",
        "u434": "(v)=>v*1e-14",
        "u435": "(v)=>v*1e-11",
        "u436": "(v)=>v*1e-08",
        "u437": "(v)=>v*1e-05",
        "u438": "(v)=>v*0.0001",
        "u439": "(v)=>v*0.001",
        "u440": "(v)=>v*0.01",
        "u441": "(v)=>v*0.1",
        "u443": "(v)=>v*10",
        "u444": "(v)=>v*10000",
        "u445": "(v)=>v*10000000",
        "u446": "(v)=>v*10000000000",
        "u447": "(v)=>v*10000000000000",
        "u448": "(v)=>v*1e+16",
        "u449": "(v)=>v*1e+19",
        "u450": "(v)=>v*1e+22"
      },
      "description": "A centipascal‑second (cPas) is an SI unit of viscosity applying the centi‑ prefix (10^-2). One centipascal‑second equals 0.01 pascal‑seconds. The centi prefix denotes a factor of 10^-2, so 1 centipascal‑second equals 10^-2 pascal‑seconds. Such scaled magnitudes are primarily encountered in specialist rheological studies. Centipascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centipascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centipascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centipascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centipascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centipascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centipascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centipascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u443",
      "name": "millipascal‑second",
      "shortName": "mPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-27",
        "u431": "(v)=>v*1e-24",
        "u432": "(v)=>v*1e-21",
        "u433": "(v)=>v*1e-18",
        "u434": "(v)=>v*1e-15",
        "u435": "(v)=>v*1e-12",
        "u436": "(v)=>v*1e-09",
        "u437": "(v)=>v*1e-06",
        "u438": "(v)=>v*1e-05",
        "u439": "(v)=>v*0.0001",
        "u440": "(v)=>v*0.001",
        "u441": "(v)=>v*0.01",
        "u442": "(v)=>v*0.1",
        "u444": "(v)=>v*1000",
        "u445": "(v)=>v*1000000",
        "u446": "(v)=>v*1000000000",
        "u447": "(v)=>v*1000000000000",
        "u448": "(v)=>v*1e+15",
        "u449": "(v)=>v*1e+18",
        "u450": "(v)=>v*1e+21"
      },
      "description": "A millipascal‑second (mPas) is an SI unit of viscosity applying the milli‑ prefix (10^-3). One millipascal‑second equals 0.001 pascal‑seconds. The milli prefix denotes a factor of 10^-3, so 1 millipascal‑second equals 10^-3 pascal‑seconds. Such scaled magnitudes are primarily encountered in specialist rheological studies. Millipascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millipascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millipascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millipascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millipascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millipascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millipascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millipascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u444",
      "name": "micropascal‑second",
      "shortName": "μPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-30",
        "u431": "(v)=>v*1e-27",
        "u432": "(v)=>v*1e-24",
        "u433": "(v)=>v*1e-21",
        "u434": "(v)=>v*1e-18",
        "u435": "(v)=>v*1e-15",
        "u436": "(v)=>v*1e-12",
        "u437": "(v)=>v*1e-09",
        "u438": "(v)=>v*1e-08",
        "u439": "(v)=>v*1e-07",
        "u440": "(v)=>v*1e-06",
        "u441": "(v)=>v*1e-05",
        "u442": "(v)=>v*0.0001",
        "u443": "(v)=>v*0.001",
        "u445": "(v)=>v*1000",
        "u446": "(v)=>v*1000000",
        "u447": "(v)=>v*1000000000",
        "u448": "(v)=>v*1000000000000",
        "u449": "(v)=>v*1e+15",
        "u450": "(v)=>v*1e+18"
      },
      "description": "A micropascal‑second (μPas) is an SI unit of viscosity applying the micro‑ prefix (10^-6). One micropascal‑second equals 1e-06 pascal‑seconds. The micro prefix denotes a factor of 10^-6, so 1 micropascal‑second equals 10^-6 pascal‑seconds. Such very small magnitudes are primarily encountered in specialist rheological studies. Micropascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of micropascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent micropascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, micropascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when micropascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding micropascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed micropascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of micropascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u445",
      "name": "nanopascal‑second",
      "shortName": "nPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-33",
        "u431": "(v)=>v*1e-30",
        "u432": "(v)=>v*1e-27",
        "u433": "(v)=>v*1e-24",
        "u434": "(v)=>v*1e-21",
        "u435": "(v)=>v*1e-18",
        "u436": "(v)=>v*1e-15",
        "u437": "(v)=>v*1e-12",
        "u438": "(v)=>v*1e-11",
        "u439": "(v)=>v*1e-10",
        "u440": "(v)=>v*1e-09",
        "u441": "(v)=>v*1e-08",
        "u442": "(v)=>v*1e-07",
        "u443": "(v)=>v*1e-06",
        "u444": "(v)=>v*0.001",
        "u446": "(v)=>v*1000",
        "u447": "(v)=>v*1000000",
        "u448": "(v)=>v*1000000000",
        "u449": "(v)=>v*1000000000000",
        "u450": "(v)=>v*1e+15"
      },
      "description": "A nanopascal‑second (nPas) is an SI unit of viscosity applying the nano‑ prefix (10^-9). One nanopascal‑second equals 1e-09 pascal‑seconds. The nano prefix denotes a factor of 10^-9, so 1 nanopascal‑second equals 10^-9 pascal‑seconds. Such very small magnitudes are primarily encountered in specialist rheological studies. Nanopascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanopascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanopascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanopascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanopascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanopascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanopascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanopascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u446",
      "name": "picopascal‑second",
      "shortName": "pPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-36",
        "u431": "(v)=>v*1e-33",
        "u432": "(v)=>v*1e-30",
        "u433": "(v)=>v*1e-27",
        "u434": "(v)=>v*1e-24",
        "u435": "(v)=>v*1e-21",
        "u436": "(v)=>v*1e-18",
        "u437": "(v)=>v*1e-15",
        "u438": "(v)=>v*1e-14",
        "u439": "(v)=>v*1e-13",
        "u440": "(v)=>v*1e-12",
        "u441": "(v)=>v*1e-11",
        "u442": "(v)=>v*1e-10",
        "u443": "(v)=>v*1e-09",
        "u444": "(v)=>v*1e-06",
        "u445": "(v)=>v*0.001",
        "u447": "(v)=>v*1000",
        "u448": "(v)=>v*1000000",
        "u449": "(v)=>v*1000000000",
        "u450": "(v)=>v*1000000000000"
      },
      "description": "A picopascal‑second (pPas) is an SI unit of viscosity applying the pico‑ prefix (10^-12). One picopascal‑second equals 1e-12 pascal‑seconds. The pico prefix denotes a factor of 10^-12, so 1 picopascal‑second equals 10^-12 pascal‑seconds. Such extremely small magnitudes are primarily encountered in specialist rheological studies. Picopascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picopascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picopascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picopascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picopascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picopascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picopascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picopascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u447",
      "name": "femtopascal‑second",
      "shortName": "fPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-39",
        "u431": "(v)=>v*1e-36",
        "u432": "(v)=>v*1e-33",
        "u433": "(v)=>v*1e-30",
        "u434": "(v)=>v*1e-27",
        "u435": "(v)=>v*1e-24",
        "u436": "(v)=>v*1e-21",
        "u437": "(v)=>v*1e-18",
        "u438": "(v)=>v*1e-17",
        "u439": "(v)=>v*1e-16",
        "u440": "(v)=>v*1e-15",
        "u441": "(v)=>v*1e-14",
        "u442": "(v)=>v*1e-13",
        "u443": "(v)=>v*1e-12",
        "u444": "(v)=>v*1e-09",
        "u445": "(v)=>v*1e-06",
        "u446": "(v)=>v*0.001",
        "u448": "(v)=>v*1000",
        "u449": "(v)=>v*1000000",
        "u450": "(v)=>v*1000000000"
      },
      "description": "A femtopascal‑second (fPas) is an SI unit of viscosity applying the femto‑ prefix (10^-15). One femtopascal‑second equals 1e-15 pascal‑seconds. The femto prefix denotes a factor of 10^-15, so 1 femtopascal‑second equals 10^-15 pascal‑seconds. Such extremely small magnitudes are primarily encountered in specialist rheological studies. Femtopascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtopascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtopascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtopascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtopascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtopascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtopascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtopascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u448",
      "name": "attopascal‑second",
      "shortName": "aPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-42",
        "u431": "(v)=>v*1e-39",
        "u432": "(v)=>v*1e-36",
        "u433": "(v)=>v*1e-33",
        "u434": "(v)=>v*1e-30",
        "u435": "(v)=>v*1e-27",
        "u436": "(v)=>v*1e-24",
        "u437": "(v)=>v*1e-21",
        "u438": "(v)=>v*1e-20",
        "u439": "(v)=>v*1e-19",
        "u440": "(v)=>v*1e-18",
        "u441": "(v)=>v*1e-17",
        "u442": "(v)=>v*1e-16",
        "u443": "(v)=>v*1e-15",
        "u444": "(v)=>v*1e-12",
        "u445": "(v)=>v*1e-09",
        "u446": "(v)=>v*1e-06",
        "u447": "(v)=>v*0.001",
        "u449": "(v)=>v*1000",
        "u450": "(v)=>v*1000000"
      },
      "description": "A attopascal‑second (aPas) is an SI unit of viscosity applying the atto‑ prefix (10^-18). One attopascal‑second equals 1e-18 pascal‑seconds. The atto prefix denotes a factor of 10^-18, so 1 attopascal‑second equals 10^-18 pascal‑seconds. Such extremely small magnitudes are primarily encountered in specialist rheological studies. Attopascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attopascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attopascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attopascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attopascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attopascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attopascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attopascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u449",
      "name": "zeptopascal‑second",
      "shortName": "zPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-45",
        "u431": "(v)=>v*1e-42",
        "u432": "(v)=>v*1e-39",
        "u433": "(v)=>v*1e-36",
        "u434": "(v)=>v*1e-33",
        "u435": "(v)=>v*1e-30",
        "u436": "(v)=>v*1e-27",
        "u437": "(v)=>v*1e-24",
        "u438": "(v)=>v*1e-23",
        "u439": "(v)=>v*1e-22",
        "u440": "(v)=>v*1e-21",
        "u441": "(v)=>v*1e-20",
        "u442": "(v)=>v*1e-19",
        "u443": "(v)=>v*1e-18",
        "u444": "(v)=>v*1e-15",
        "u445": "(v)=>v*1e-12",
        "u446": "(v)=>v*1e-09",
        "u447": "(v)=>v*1e-06",
        "u448": "(v)=>v*0.001",
        "u450": "(v)=>v*1000"
      },
      "description": "A zeptopascal‑second (zPas) is an SI unit of viscosity applying the zepto‑ prefix (10^-21). One zeptopascal‑second equals 1e-21 pascal‑seconds. The zepto prefix denotes a factor of 10^-21, so 1 zeptopascal‑second equals 10^-21 pascal‑seconds. Such extremely small magnitudes are primarily encountered in specialist rheological studies. Zeptopascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptopascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptopascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptopascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptopascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptopascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptopascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptopascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u450",
      "name": "yoctopascal‑second",
      "shortName": "yPas",
      "categoryId": "c26",
      "conversions": {
        "u430": "(v)=>v*1e-48",
        "u431": "(v)=>v*1e-45",
        "u432": "(v)=>v*1e-42",
        "u433": "(v)=>v*1e-39",
        "u434": "(v)=>v*1e-36",
        "u435": "(v)=>v*1e-33",
        "u436": "(v)=>v*1e-30",
        "u437": "(v)=>v*1e-27",
        "u438": "(v)=>v*1e-26",
        "u439": "(v)=>v*1e-25",
        "u440": "(v)=>v*1e-24",
        "u441": "(v)=>v*1e-23",
        "u442": "(v)=>v*1e-22",
        "u443": "(v)=>v*1e-21",
        "u444": "(v)=>v*1e-18",
        "u445": "(v)=>v*1e-15",
        "u446": "(v)=>v*1e-12",
        "u447": "(v)=>v*1e-09",
        "u448": "(v)=>v*1e-06",
        "u449": "(v)=>v*0.001"
      },
      "description": "A yoctopascal‑second (yPas) is an SI unit of viscosity applying the yocto‑ prefix (10^-24). One yoctopascal‑second equals 1e-24 pascal‑seconds. The yocto prefix denotes a factor of 10^-24, so 1 yoctopascal‑second equals 10^-24 pascal‑seconds. Such extremely small magnitudes are primarily encountered in specialist rheological studies. Yoctopascal‑second belongs to the broader physical quantity of viscosity. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctopascal‑second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctopascal‑second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctopascal‑second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctopascal‑second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctopascal‑second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctopascal‑second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctopascal‑second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u451",
      "name": "yottabit per second",
      "shortName": "Ybps",
      "categoryId": "c14",
      "conversions": {
        "u452": "(v)=>v*1000",
        "u453": "(v)=>v*1000000",
        "u454": "(v)=>v*1000000000",
        "u455": "(v)=>v*1000000000000",
        "u456": "(v)=>v*1e+15",
        "u457": "(v)=>v*1e+18",
        "u458": "(v)=>v*1e+21",
        "u459": "(v)=>v*1e+22",
        "u460": "(v)=>v*1e+23",
        "u461": "(v)=>v*1e+24",
        "u462": "(v)=>v*1e+25",
        "u463": "(v)=>v*1e+26",
        "u464": "(v)=>v*1e+27",
        "u465": "(v)=>v*1e+30",
        "u466": "(v)=>v*1e+33",
        "u467": "(v)=>v*1e+36",
        "u468": "(v)=>v*1e+39",
        "u469": "(v)=>v*1e+42",
        "u470": "(v)=>v*1e+45",
        "u471": "(v)=>v*1e+48"
      },
      "description": "A yottabit per second (Ybps) is an SI unit of infoRate applying the yotta‑ prefix (10^24). One yottabit per second equals 1e+24 bit per seconds. The yotta prefix denotes a factor of 10^24, so 1 yottabit per second equals 10^24 bits per second. Such immensely large magnitudes are primarily encountered in petascale and exascale data‑centre planning. Yottabit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yottabit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yottabit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yottabit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yottabit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yottabit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yottabit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yottabit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u452",
      "name": "zettabit per second",
      "shortName": "Zbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*0.001",
        "u453": "(v)=>v*1000",
        "u454": "(v)=>v*1000000",
        "u455": "(v)=>v*1000000000",
        "u456": "(v)=>v*1000000000000",
        "u457": "(v)=>v*1e+15",
        "u458": "(v)=>v*1e+18",
        "u459": "(v)=>v*1e+19",
        "u460": "(v)=>v*1e+20",
        "u461": "(v)=>v*1e+21",
        "u462": "(v)=>v*1e+22",
        "u463": "(v)=>v*1e+23",
        "u464": "(v)=>v*1e+24",
        "u465": "(v)=>v*1e+27",
        "u466": "(v)=>v*1e+30",
        "u467": "(v)=>v*1e+33",
        "u468": "(v)=>v*1e+36",
        "u469": "(v)=>v*1e+39",
        "u470": "(v)=>v*1e+42",
        "u471": "(v)=>v*1e+45"
      },
      "description": "A zettabit per second (Zbps) is an SI unit of infoRate applying the zetta‑ prefix (10^21). One zettabit per second equals 1e+21 bit per seconds. The zetta prefix denotes a factor of 10^21, so 1 zettabit per second equals 10^21 bits per second. Such immensely large magnitudes are primarily encountered in petascale and exascale data‑centre planning. Zettabit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zettabit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zettabit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zettabit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zettabit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zettabit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zettabit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zettabit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u453",
      "name": "exabit per second",
      "shortName": "Ebps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-06",
        "u452": "(v)=>v*0.001",
        "u454": "(v)=>v*1000",
        "u455": "(v)=>v*1000000",
        "u456": "(v)=>v*1000000000",
        "u457": "(v)=>v*1000000000000",
        "u458": "(v)=>v*1e+15",
        "u459": "(v)=>v*1e+16",
        "u460": "(v)=>v*1e+17",
        "u461": "(v)=>v*1e+18",
        "u462": "(v)=>v*1e+19",
        "u463": "(v)=>v*1e+20",
        "u464": "(v)=>v*1e+21",
        "u465": "(v)=>v*1e+24",
        "u466": "(v)=>v*1e+27",
        "u467": "(v)=>v*1e+30",
        "u468": "(v)=>v*1e+33",
        "u469": "(v)=>v*1e+36",
        "u470": "(v)=>v*1e+39",
        "u471": "(v)=>v*1e+42"
      },
      "description": "A exabit per second (Ebps) is an SI unit of infoRate applying the exa‑ prefix (10^18). One exabit per second equals 1e+18 bit per seconds. The exa prefix denotes a factor of 10^18, so 1 exabit per second equals 10^18 bits per second. Such immensely large magnitudes are primarily encountered in petascale and exascale data‑centre planning. Exabit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of exabit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent exabit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, exabit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when exabit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding exabit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed exabit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of exabit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u454",
      "name": "petabit per second",
      "shortName": "Pbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-09",
        "u452": "(v)=>v*1e-06",
        "u453": "(v)=>v*0.001",
        "u455": "(v)=>v*1000",
        "u456": "(v)=>v*1000000",
        "u457": "(v)=>v*1000000000",
        "u458": "(v)=>v*1000000000000",
        "u459": "(v)=>v*10000000000000",
        "u460": "(v)=>v*100000000000000",
        "u461": "(v)=>v*1e+15",
        "u462": "(v)=>v*1e+16",
        "u463": "(v)=>v*1e+17",
        "u464": "(v)=>v*1e+18",
        "u465": "(v)=>v*1e+21",
        "u466": "(v)=>v*1e+24",
        "u467": "(v)=>v*1e+27",
        "u468": "(v)=>v*1e+30",
        "u469": "(v)=>v*1e+33",
        "u470": "(v)=>v*1e+36",
        "u471": "(v)=>v*1e+39"
      },
      "description": "A petabit per second (Pbps) is an SI unit of infoRate applying the peta‑ prefix (10^15). One petabit per second equals 1e+15 bit per seconds. The peta prefix denotes a factor of 10^15, so 1 petabit per second equals 10^15 bits per second. Such immensely large magnitudes are primarily encountered in petascale and exascale data‑centre planning. Petabit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of petabit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent petabit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, petabit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when petabit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding petabit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed petabit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of petabit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u455",
      "name": "terabit per second",
      "shortName": "Tbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-12",
        "u452": "(v)=>v*1e-09",
        "u453": "(v)=>v*1e-06",
        "u454": "(v)=>v*0.001",
        "u456": "(v)=>v*1000",
        "u457": "(v)=>v*1000000",
        "u458": "(v)=>v*1000000000",
        "u459": "(v)=>v*10000000000",
        "u460": "(v)=>v*100000000000",
        "u461": "(v)=>v*1000000000000",
        "u462": "(v)=>v*10000000000000",
        "u463": "(v)=>v*100000000000000",
        "u464": "(v)=>v*1e+15",
        "u465": "(v)=>v*1e+18",
        "u466": "(v)=>v*1e+21",
        "u467": "(v)=>v*1e+24",
        "u468": "(v)=>v*1e+27",
        "u469": "(v)=>v*1e+30",
        "u470": "(v)=>v*1e+33",
        "u471": "(v)=>v*1e+36"
      },
      "description": "A terabit per second (Tbps) is an SI unit of infoRate applying the tera‑ prefix (10^12). One terabit per second equals 1e+12 bit per seconds. The tera prefix denotes a factor of 10^12, so 1 terabit per second equals 10^12 bits per second. Such immensely large magnitudes are primarily encountered in petascale and exascale data‑centre planning. Terabit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of terabit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent terabit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, terabit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when terabit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding terabit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed terabit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of terabit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u456",
      "name": "gigabit per second",
      "shortName": "Gbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-15",
        "u452": "(v)=>v*1e-12",
        "u453": "(v)=>v*1e-09",
        "u454": "(v)=>v*1e-06",
        "u455": "(v)=>v*0.001",
        "u457": "(v)=>v*1000",
        "u458": "(v)=>v*1000000",
        "u459": "(v)=>v*10000000",
        "u460": "(v)=>v*100000000",
        "u461": "(v)=>v*1000000000",
        "u462": "(v)=>v*10000000000",
        "u463": "(v)=>v*100000000000",
        "u464": "(v)=>v*1000000000000",
        "u465": "(v)=>v*1e+15",
        "u466": "(v)=>v*1e+18",
        "u467": "(v)=>v*1e+21",
        "u468": "(v)=>v*1e+24",
        "u469": "(v)=>v*1e+27",
        "u470": "(v)=>v*1e+30",
        "u471": "(v)=>v*1e+33"
      },
      "description": "A gigabit per second (Gbps) is an SI unit of infoRate applying the giga‑ prefix (10^9). One gigabit per second equals 1000000000 bit per seconds. The giga prefix denotes a factor of 10^9, so 1 gigabit per second equals 10^9 bits per second. Such very large magnitudes are primarily encountered in high‑performance computing and enterprise storage. Gigabit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gigabit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gigabit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gigabit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gigabit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gigabit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gigabit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gigabit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u457",
      "name": "megabit per second",
      "shortName": "Mbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-18",
        "u452": "(v)=>v*1e-15",
        "u453": "(v)=>v*1e-12",
        "u454": "(v)=>v*1e-09",
        "u455": "(v)=>v*1e-06",
        "u456": "(v)=>v*0.001",
        "u458": "(v)=>v*1000",
        "u459": "(v)=>v*10000",
        "u460": "(v)=>v*100000",
        "u461": "(v)=>v*1000000",
        "u462": "(v)=>v*10000000",
        "u463": "(v)=>v*100000000",
        "u464": "(v)=>v*1000000000",
        "u465": "(v)=>v*1000000000000",
        "u466": "(v)=>v*1e+15",
        "u467": "(v)=>v*1e+18",
        "u468": "(v)=>v*1e+21",
        "u469": "(v)=>v*1e+24",
        "u470": "(v)=>v*1e+27",
        "u471": "(v)=>v*1e+30"
      },
      "description": "A megabit per second (Mbps) is an SI unit of infoRate applying the mega‑ prefix (10^6). One megabit per second equals 1000000 bit per seconds. The mega prefix denotes a factor of 10^6, so 1 megabit per second equals 10^6 bits per second. Such very large magnitudes are primarily encountered in high‑performance computing and enterprise storage. Megabit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of megabit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent megabit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, megabit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when megabit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding megabit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed megabit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of megabit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u458",
      "name": "kilobit per second",
      "shortName": "kbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-21",
        "u452": "(v)=>v*1e-18",
        "u453": "(v)=>v*1e-15",
        "u454": "(v)=>v*1e-12",
        "u455": "(v)=>v*1e-09",
        "u456": "(v)=>v*1e-06",
        "u457": "(v)=>v*0.001",
        "u459": "(v)=>v*10",
        "u460": "(v)=>v*100",
        "u461": "(v)=>v*1000",
        "u462": "(v)=>v*10000",
        "u463": "(v)=>v*100000",
        "u464": "(v)=>v*1000000",
        "u465": "(v)=>v*1000000000",
        "u466": "(v)=>v*1000000000000",
        "u467": "(v)=>v*1e+15",
        "u468": "(v)=>v*1e+18",
        "u469": "(v)=>v*1e+21",
        "u470": "(v)=>v*1e+24",
        "u471": "(v)=>v*1e+27"
      },
      "description": "A kilobit per second (kbps) is an SI unit of infoRate applying the kilo‑ prefix (10^3). One kilobit per second equals 1000 bit per seconds. The kilo prefix denotes a factor of 10^3, so 1 kilobit per second equals 10^3 bits per second. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Kilobit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilobit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilobit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilobit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilobit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilobit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilobit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilobit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u459",
      "name": "hectobit per second",
      "shortName": "hbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-22",
        "u452": "(v)=>v*1e-19",
        "u453": "(v)=>v*1e-16",
        "u454": "(v)=>v*1e-13",
        "u455": "(v)=>v*1e-10",
        "u456": "(v)=>v*1e-07",
        "u457": "(v)=>v*0.0001",
        "u458": "(v)=>v*0.1",
        "u460": "(v)=>v*10",
        "u461": "(v)=>v*100",
        "u462": "(v)=>v*1000",
        "u463": "(v)=>v*10000",
        "u464": "(v)=>v*100000",
        "u465": "(v)=>v*100000000",
        "u466": "(v)=>v*100000000000",
        "u467": "(v)=>v*100000000000000",
        "u468": "(v)=>v*1e+17",
        "u469": "(v)=>v*1e+20",
        "u470": "(v)=>v*1e+23",
        "u471": "(v)=>v*1e+26"
      },
      "description": "A hectobit per second (hbps) is an SI unit of infoRate applying the hecto‑ prefix (10^2). One hectobit per second equals 100 bit per seconds. The hecto prefix denotes a factor of 10^2, so 1 hectobit per second equals 10^2 bits per second. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Hectobit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectobit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectobit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectobit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectobit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectobit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectobit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectobit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u460",
      "name": "decabit per second",
      "shortName": "dabps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-23",
        "u452": "(v)=>v*1e-20",
        "u453": "(v)=>v*1e-17",
        "u454": "(v)=>v*1e-14",
        "u455": "(v)=>v*1e-11",
        "u456": "(v)=>v*1e-08",
        "u457": "(v)=>v*1e-05",
        "u458": "(v)=>v*0.01",
        "u459": "(v)=>v*0.1",
        "u461": "(v)=>v*10",
        "u462": "(v)=>v*100",
        "u463": "(v)=>v*1000",
        "u464": "(v)=>v*10000",
        "u465": "(v)=>v*10000000",
        "u466": "(v)=>v*10000000000",
        "u467": "(v)=>v*10000000000000",
        "u468": "(v)=>v*1e+16",
        "u469": "(v)=>v*1e+19",
        "u470": "(v)=>v*1e+22",
        "u471": "(v)=>v*1e+25"
      },
      "description": "A decabit per second (dabps) is an SI unit of infoRate applying the deca‑ prefix (10^1). One decabit per second equals 10 bit per seconds. The deca prefix denotes a factor of 10^1, so 1 decabit per second equals 10^1 bits per second. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Decabit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decabit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decabit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decabit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decabit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decabit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decabit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decabit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u461",
      "name": "bit per second",
      "shortName": "bps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-24",
        "u452": "(v)=>v*1e-21",
        "u453": "(v)=>v*1e-18",
        "u454": "(v)=>v*1e-15",
        "u455": "(v)=>v*1e-12",
        "u456": "(v)=>v*1e-09",
        "u457": "(v)=>v*1e-06",
        "u458": "(v)=>v*0.001",
        "u459": "(v)=>v*0.01",
        "u460": "(v)=>v*0.1",
        "u462": "(v)=>v*10",
        "u463": "(v)=>v*100",
        "u464": "(v)=>v*1000",
        "u465": "(v)=>v*1000000",
        "u466": "(v)=>v*1000000000",
        "u467": "(v)=>v*1000000000000",
        "u468": "(v)=>v*1e+15",
        "u469": "(v)=>v*1e+18",
        "u470": "(v)=>v*1e+21",
        "u471": "(v)=>v*1e+24"
      },
      "description": "A bit per second (bit/s) is a unit of information transfer rate equal to one binary digit transmitted each second. Bit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of bit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent bit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, bit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when bit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding bit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed bit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of bit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u462",
      "name": "decibit per second",
      "shortName": "dbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-25",
        "u452": "(v)=>v*1e-22",
        "u453": "(v)=>v*1e-19",
        "u454": "(v)=>v*1e-16",
        "u455": "(v)=>v*1e-13",
        "u456": "(v)=>v*1e-10",
        "u457": "(v)=>v*1e-07",
        "u458": "(v)=>v*0.0001",
        "u459": "(v)=>v*0.001",
        "u460": "(v)=>v*0.01",
        "u461": "(v)=>v*0.1",
        "u463": "(v)=>v*10",
        "u464": "(v)=>v*100",
        "u465": "(v)=>v*100000",
        "u466": "(v)=>v*100000000",
        "u467": "(v)=>v*100000000000",
        "u468": "(v)=>v*100000000000000",
        "u469": "(v)=>v*1e+17",
        "u470": "(v)=>v*1e+20",
        "u471": "(v)=>v*1e+23"
      },
      "description": "A decibit per second (dbps) is an SI unit of infoRate applying the deci‑ prefix (10^-1). One decibit per second equals 0.1 bit per seconds. The deci prefix denotes a factor of 10^-1, so 1 decibit per second equals 10^-1 bits per second. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Decibit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of decibit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent decibit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, decibit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when decibit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding decibit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed decibit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of decibit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u463",
      "name": "centibit per second",
      "shortName": "cbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-26",
        "u452": "(v)=>v*1e-23",
        "u453": "(v)=>v*1e-20",
        "u454": "(v)=>v*1e-17",
        "u455": "(v)=>v*1e-14",
        "u456": "(v)=>v*1e-11",
        "u457": "(v)=>v*1e-08",
        "u458": "(v)=>v*1e-05",
        "u459": "(v)=>v*0.0001",
        "u460": "(v)=>v*0.001",
        "u461": "(v)=>v*0.01",
        "u462": "(v)=>v*0.1",
        "u464": "(v)=>v*10",
        "u465": "(v)=>v*10000",
        "u466": "(v)=>v*10000000",
        "u467": "(v)=>v*10000000000",
        "u468": "(v)=>v*10000000000000",
        "u469": "(v)=>v*1e+16",
        "u470": "(v)=>v*1e+19",
        "u471": "(v)=>v*1e+22"
      },
      "description": "A centibit per second (cbps) is an SI unit of infoRate applying the centi‑ prefix (10^-2). One centibit per second equals 0.01 bit per seconds. The centi prefix denotes a factor of 10^-2, so 1 centibit per second equals 10^-2 bits per second. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Centibit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of centibit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent centibit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, centibit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when centibit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding centibit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed centibit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of centibit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u464",
      "name": "millibit per second",
      "shortName": "mbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-27",
        "u452": "(v)=>v*1e-24",
        "u453": "(v)=>v*1e-21",
        "u454": "(v)=>v*1e-18",
        "u455": "(v)=>v*1e-15",
        "u456": "(v)=>v*1e-12",
        "u457": "(v)=>v*1e-09",
        "u458": "(v)=>v*1e-06",
        "u459": "(v)=>v*1e-05",
        "u460": "(v)=>v*0.0001",
        "u461": "(v)=>v*0.001",
        "u462": "(v)=>v*0.01",
        "u463": "(v)=>v*0.1",
        "u465": "(v)=>v*1000",
        "u466": "(v)=>v*1000000",
        "u467": "(v)=>v*1000000000",
        "u468": "(v)=>v*1000000000000",
        "u469": "(v)=>v*1e+15",
        "u470": "(v)=>v*1e+18",
        "u471": "(v)=>v*1e+21"
      },
      "description": "A millibit per second (mbps) is an SI unit of infoRate applying the milli‑ prefix (10^-3). One millibit per second equals 0.001 bit per seconds. The milli prefix denotes a factor of 10^-3, so 1 millibit per second equals 10^-3 bits per second. Such scaled magnitudes are primarily encountered in general information‑technology specifications. Millibit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of millibit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent millibit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, millibit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when millibit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding millibit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed millibit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of millibit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u465",
      "name": "microbit per second",
      "shortName": "μbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-30",
        "u452": "(v)=>v*1e-27",
        "u453": "(v)=>v*1e-24",
        "u454": "(v)=>v*1e-21",
        "u455": "(v)=>v*1e-18",
        "u456": "(v)=>v*1e-15",
        "u457": "(v)=>v*1e-12",
        "u458": "(v)=>v*1e-09",
        "u459": "(v)=>v*1e-08",
        "u460": "(v)=>v*1e-07",
        "u461": "(v)=>v*1e-06",
        "u462": "(v)=>v*1e-05",
        "u463": "(v)=>v*0.0001",
        "u464": "(v)=>v*0.001",
        "u466": "(v)=>v*1000",
        "u467": "(v)=>v*1000000",
        "u468": "(v)=>v*1000000000",
        "u469": "(v)=>v*1000000000000",
        "u470": "(v)=>v*1e+15",
        "u471": "(v)=>v*1e+18"
      },
      "description": "A microbit per second (μbps) is an SI unit of infoRate applying the micro‑ prefix (10^-6). One microbit per second equals 1e-06 bit per seconds. The micro prefix denotes a factor of 10^-6, so 1 microbit per second equals 10^-6 bits per second. Such very small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Microbit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of microbit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent microbit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, microbit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when microbit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding microbit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed microbit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of microbit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u466",
      "name": "nanobit per second",
      "shortName": "nbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-33",
        "u452": "(v)=>v*1e-30",
        "u453": "(v)=>v*1e-27",
        "u454": "(v)=>v*1e-24",
        "u455": "(v)=>v*1e-21",
        "u456": "(v)=>v*1e-18",
        "u457": "(v)=>v*1e-15",
        "u458": "(v)=>v*1e-12",
        "u459": "(v)=>v*1e-11",
        "u460": "(v)=>v*1e-10",
        "u461": "(v)=>v*1e-09",
        "u462": "(v)=>v*1e-08",
        "u463": "(v)=>v*1e-07",
        "u464": "(v)=>v*1e-06",
        "u465": "(v)=>v*0.001",
        "u467": "(v)=>v*1000",
        "u468": "(v)=>v*1000000",
        "u469": "(v)=>v*1000000000",
        "u470": "(v)=>v*1000000000000",
        "u471": "(v)=>v*1e+15"
      },
      "description": "A nanobit per second (nbps) is an SI unit of infoRate applying the nano‑ prefix (10^-9). One nanobit per second equals 1e-09 bit per seconds. The nano prefix denotes a factor of 10^-9, so 1 nanobit per second equals 10^-9 bits per second. Such very small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Nanobit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nanobit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nanobit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nanobit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nanobit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nanobit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nanobit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nanobit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u467",
      "name": "picobit per second",
      "shortName": "pbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-36",
        "u452": "(v)=>v*1e-33",
        "u453": "(v)=>v*1e-30",
        "u454": "(v)=>v*1e-27",
        "u455": "(v)=>v*1e-24",
        "u456": "(v)=>v*1e-21",
        "u457": "(v)=>v*1e-18",
        "u458": "(v)=>v*1e-15",
        "u459": "(v)=>v*1e-14",
        "u460": "(v)=>v*1e-13",
        "u461": "(v)=>v*1e-12",
        "u462": "(v)=>v*1e-11",
        "u463": "(v)=>v*1e-10",
        "u464": "(v)=>v*1e-09",
        "u465": "(v)=>v*1e-06",
        "u466": "(v)=>v*0.001",
        "u468": "(v)=>v*1000",
        "u469": "(v)=>v*1000000",
        "u470": "(v)=>v*1000000000",
        "u471": "(v)=>v*1000000000000"
      },
      "description": "A picobit per second (pbps) is an SI unit of infoRate applying the pico‑ prefix (10^-12). One picobit per second equals 1e-12 bit per seconds. The pico prefix denotes a factor of 10^-12, so 1 picobit per second equals 10^-12 bits per second. Such extremely small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Picobit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of picobit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent picobit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, picobit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when picobit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding picobit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed picobit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of picobit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u468",
      "name": "femtobit per second",
      "shortName": "fbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-39",
        "u452": "(v)=>v*1e-36",
        "u453": "(v)=>v*1e-33",
        "u454": "(v)=>v*1e-30",
        "u455": "(v)=>v*1e-27",
        "u456": "(v)=>v*1e-24",
        "u457": "(v)=>v*1e-21",
        "u458": "(v)=>v*1e-18",
        "u459": "(v)=>v*1e-17",
        "u460": "(v)=>v*1e-16",
        "u461": "(v)=>v*1e-15",
        "u462": "(v)=>v*1e-14",
        "u463": "(v)=>v*1e-13",
        "u464": "(v)=>v*1e-12",
        "u465": "(v)=>v*1e-09",
        "u466": "(v)=>v*1e-06",
        "u467": "(v)=>v*0.001",
        "u469": "(v)=>v*1000",
        "u470": "(v)=>v*1000000",
        "u471": "(v)=>v*1000000000"
      },
      "description": "A femtobit per second (fbps) is an SI unit of infoRate applying the femto‑ prefix (10^-15). One femtobit per second equals 1e-15 bit per seconds. The femto prefix denotes a factor of 10^-15, so 1 femtobit per second equals 10^-15 bits per second. Such extremely small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Femtobit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of femtobit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent femtobit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, femtobit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when femtobit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding femtobit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed femtobit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of femtobit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u469",
      "name": "attobit per second",
      "shortName": "abps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-42",
        "u452": "(v)=>v*1e-39",
        "u453": "(v)=>v*1e-36",
        "u454": "(v)=>v*1e-33",
        "u455": "(v)=>v*1e-30",
        "u456": "(v)=>v*1e-27",
        "u457": "(v)=>v*1e-24",
        "u458": "(v)=>v*1e-21",
        "u459": "(v)=>v*1e-20",
        "u460": "(v)=>v*1e-19",
        "u461": "(v)=>v*1e-18",
        "u462": "(v)=>v*1e-17",
        "u463": "(v)=>v*1e-16",
        "u464": "(v)=>v*1e-15",
        "u465": "(v)=>v*1e-12",
        "u466": "(v)=>v*1e-09",
        "u467": "(v)=>v*1e-06",
        "u468": "(v)=>v*0.001",
        "u470": "(v)=>v*1000",
        "u471": "(v)=>v*1000000"
      },
      "description": "A attobit per second (abps) is an SI unit of infoRate applying the atto‑ prefix (10^-18). One attobit per second equals 1e-18 bit per seconds. The atto prefix denotes a factor of 10^-18, so 1 attobit per second equals 10^-18 bits per second. Such extremely small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Attobit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of attobit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent attobit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, attobit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when attobit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding attobit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed attobit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of attobit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u470",
      "name": "zeptobit per second",
      "shortName": "zbps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-45",
        "u452": "(v)=>v*1e-42",
        "u453": "(v)=>v*1e-39",
        "u454": "(v)=>v*1e-36",
        "u455": "(v)=>v*1e-33",
        "u456": "(v)=>v*1e-30",
        "u457": "(v)=>v*1e-27",
        "u458": "(v)=>v*1e-24",
        "u459": "(v)=>v*1e-23",
        "u460": "(v)=>v*1e-22",
        "u461": "(v)=>v*1e-21",
        "u462": "(v)=>v*1e-20",
        "u463": "(v)=>v*1e-19",
        "u464": "(v)=>v*1e-18",
        "u465": "(v)=>v*1e-15",
        "u466": "(v)=>v*1e-12",
        "u467": "(v)=>v*1e-09",
        "u468": "(v)=>v*1e-06",
        "u469": "(v)=>v*0.001",
        "u471": "(v)=>v*1000"
      },
      "description": "A zeptobit per second (zbps) is an SI unit of infoRate applying the zepto‑ prefix (10^-21). One zeptobit per second equals 1e-21 bit per seconds. The zepto prefix denotes a factor of 10^-21, so 1 zeptobit per second equals 10^-21 bits per second. Such extremely small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Zeptobit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of zeptobit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent zeptobit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, zeptobit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when zeptobit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding zeptobit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed zeptobit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of zeptobit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u471",
      "name": "yoctobit per second",
      "shortName": "ybps",
      "categoryId": "c14",
      "conversions": {
        "u451": "(v)=>v*1e-48",
        "u452": "(v)=>v*1e-45",
        "u453": "(v)=>v*1e-42",
        "u454": "(v)=>v*1e-39",
        "u455": "(v)=>v*1e-36",
        "u456": "(v)=>v*1e-33",
        "u457": "(v)=>v*1e-30",
        "u458": "(v)=>v*1e-27",
        "u459": "(v)=>v*1e-26",
        "u460": "(v)=>v*1e-25",
        "u461": "(v)=>v*1e-24",
        "u462": "(v)=>v*1e-23",
        "u463": "(v)=>v*1e-22",
        "u464": "(v)=>v*1e-21",
        "u465": "(v)=>v*1e-18",
        "u466": "(v)=>v*1e-15",
        "u467": "(v)=>v*1e-12",
        "u468": "(v)=>v*1e-09",
        "u469": "(v)=>v*1e-06",
        "u470": "(v)=>v*0.001"
      },
      "description": "A yoctobit per second (ybps) is an SI unit of infoRate applying the yocto‑ prefix (10^-24). One yoctobit per second equals 1e-24 bit per seconds. The yocto prefix denotes a factor of 10^-24, so 1 yoctobit per second equals 10^-24 bits per second. Such extremely small magnitudes are primarily encountered in embedded and sensor‑network telemetry. Yoctobit per second belongs to the broader physical quantity of inforate. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yoctobit per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yoctobit per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yoctobit per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yoctobit per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yoctobit per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yoctobit per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yoctobit per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u472",
      "name": "inch",
      "shortName": "in",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*2.54e-26",
        "u2": "(v)=>v*2.54e-23",
        "u3": "(v)=>v*2.54e-20",
        "u4": "(v)=>v*2.54e-17",
        "u5": "(v)=>v*2.54e-14",
        "u6": "(v)=>v*2.54e-11",
        "u7": "(v)=>v*2.54e-08",
        "u8": "(v)=>v*2.54e-05",
        "u9": "(v)=>v*0.000254",
        "u10": "(v)=>v*0.00254",
        "u11": "(v)=>v*0.0254",
        "u12": "(v)=>v*0.254",
        "u13": "(v)=>v*2.54",
        "u14": "(v)=>v*25.4",
        "u15": "(v)=>v*25400",
        "u16": "(v)=>v*25400000",
        "u17": "(v)=>v*25400000000",
        "u18": "(v)=>v*25400000000000",
        "u19": "(v)=>v*2.54e+16",
        "u20": "(v)=>v*2.54e+19",
        "u21": "(v)=>v*2.54e+22",
        "u473": "(v)=>v*0.0833333333333333",
        "u474": "(v)=>v*0.0277777777777778",
        "u475": "(v)=>v*1.57828282828283e-05",
        "u476": "(v)=>v*1.37149028077754e-05",
        "u477": "(v)=>v*254000000",
        "u478": "(v)=>v*1.69788512905619e-13",
        "u479": "(v)=>v*2.68479076601097e-18"
      },
      "description": "An inch (in) is an Imperial/US unit of length defined as exactly 25.4 mm. Since 1959 the inch has been defined by international agreement as exactly 25.4 millimetres, making it precisely ^1⁄36 of a yard. The unit is widely used in the United States, Canada and the United Kingdom for engineering drawings, display sizes and rainfall totals. Inch belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of inch often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent inch as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, inch is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when inch values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding inch has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed inch metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of inch fosters shared understanding and supports reproducible results.",
      "standard": [
        "Imperial",
        "US-customary"
      ]
    },
    {
      "id": "u473",
      "name": "foot",
      "shortName": "ft",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*3.048e-25",
        "u2": "(v)=>v*3.048e-22",
        "u3": "(v)=>v*3.048e-19",
        "u4": "(v)=>v*3.048e-16",
        "u5": "(v)=>v*3.048e-13",
        "u6": "(v)=>v*3.048e-10",
        "u7": "(v)=>v*3.048e-07",
        "u8": "(v)=>v*0.0003048",
        "u9": "(v)=>v*0.003048",
        "u10": "(v)=>v*0.03048",
        "u11": "(v)=>v*0.3048",
        "u12": "(v)=>v*3.048",
        "u13": "(v)=>v*30.48",
        "u14": "(v)=>v*304.8",
        "u15": "(v)=>v*304800",
        "u16": "(v)=>v*304800000",
        "u17": "(v)=>v*304800000000",
        "u18": "(v)=>v*304800000000000",
        "u19": "(v)=>v*3.048e+17",
        "u20": "(v)=>v*3.048e+20",
        "u21": "(v)=>v*3.048e+23",
        "u472": "(v)=>v*12",
        "u474": "(v)=>v*0.333333333333333",
        "u475": "(v)=>v*0.000189393939393939",
        "u476": "(v)=>v*0.000164578833693305",
        "u477": "(v)=>v*3048000000",
        "u478": "(v)=>v*2.03746215486742e-12",
        "u479": "(v)=>v*3.22174891921317e-17"
      },
      "description": "A foot (ft) is an Imperial/US unit of length defined as exactly 0.3048 m. By the 1959 International Yard and Pound Agreement, the foot was fixed at exactly 0.3048 metres. Feet remain standard in aviation worldwide for altitude reporting and in the United States for everyday height and short‑range distance measurements. Foot belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of foot often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent foot as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, foot is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when foot values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding foot has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed foot metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of foot fosters shared understanding and supports reproducible results.",
      "standard": [
        "Imperial",
        "US-customary"
      ]
    },
    {
      "id": "u474",
      "name": "yard",
      "shortName": "yd",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*9.144e-25",
        "u2": "(v)=>v*9.144e-22",
        "u3": "(v)=>v*9.144e-19",
        "u4": "(v)=>v*9.144e-16",
        "u5": "(v)=>v*9.144e-13",
        "u6": "(v)=>v*9.144e-10",
        "u7": "(v)=>v*9.144e-07",
        "u8": "(v)=>v*0.0009144",
        "u9": "(v)=>v*0.009144",
        "u10": "(v)=>v*0.09144",
        "u11": "(v)=>v*0.9144",
        "u12": "(v)=>v*9.144",
        "u13": "(v)=>v*91.44",
        "u14": "(v)=>v*914.4",
        "u15": "(v)=>v*914400",
        "u16": "(v)=>v*914400000",
        "u17": "(v)=>v*914400000000",
        "u18": "(v)=>v*914400000000000",
        "u19": "(v)=>v*9.144e+17",
        "u20": "(v)=>v*9.144e+20",
        "u21": "(v)=>v*9.144e+23",
        "u472": "(v)=>v*36",
        "u473": "(v)=>v*3",
        "u475": "(v)=>v*0.000568181818181818",
        "u476": "(v)=>v*0.000493736501079914",
        "u477": "(v)=>v*9144000000",
        "u478": "(v)=>v*6.11238646460227e-12",
        "u479": "(v)=>v*9.6652467576395e-17"
      },
      "description": "A yard (yd) is an Imperial/US unit of length equal to 0.9144 m (3 ft). The yard is defined as exactly 0.9144 metres and equals 3 feet or 36 inches. It is historically derived from the Anglo‑Saxon gird and is still used to specify cloth, playing‑field lengths and some roadway signage in the UK and US. Yard belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of yard often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent yard as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, yard is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when yard values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding yard has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed yard metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of yard fosters shared understanding and supports reproducible results.",
      "standard": [
        "Imperial",
        "US-customary"
      ]
    },
    {
      "id": "u475",
      "name": "mile",
      "shortName": "mi",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1.609344e-21",
        "u2": "(v)=>v*1.609344e-18",
        "u3": "(v)=>v*1.609344e-15",
        "u4": "(v)=>v*1.609344e-12",
        "u5": "(v)=>v*1.609344e-09",
        "u6": "(v)=>v*1.609344e-06",
        "u7": "(v)=>v*0.001609344",
        "u8": "(v)=>v*1.609344",
        "u9": "(v)=>v*16.09344",
        "u10": "(v)=>v*160.9344",
        "u11": "(v)=>v*1609.344",
        "u12": "(v)=>v*16093.44",
        "u13": "(v)=>v*160934.4",
        "u14": "(v)=>v*1609344",
        "u15": "(v)=>v*1609344000",
        "u16": "(v)=>v*1609344000000",
        "u17": "(v)=>v*1.609344e+15",
        "u18": "(v)=>v*1.609344e+18",
        "u19": "(v)=>v*1.609344e+21",
        "u20": "(v)=>v*1.609344e+24",
        "u21": "(v)=>v*1.609344e+27",
        "u472": "(v)=>v*63360",
        "u473": "(v)=>v*5280",
        "u474": "(v)=>v*1760",
        "u476": "(v)=>v*0.868976241900648",
        "u477": "(v)=>v*16093440000000",
        "u478": "(v)=>v*1.07578001777e-08",
        "u479": "(v)=>v*1.70108342934455e-13"
      },
      "description": "**Mile (statute mile) – symbol mi**  \nA mile is an imperial / US customary unit of length **exactly equal to 1 609.344 metres** or 5 280 feet. The statute mile was standardised in England in 1592, unifying a patchwork of Roman, Saxon, and medieval measurements based on the pace (*mille passus* = 1 000 paces).\n\n**Variations you may meet**  \n• **Nautical mile** (nmi) = 1 852 m, tied to 1 minute of latitude  \n• **Survey mile** (US) ≈ 1 609.347 m (very minor difference)  \n• **Scots / Irish miles** – historical, now obsolete\n\n**Practical context & useful numbers**  \n• 1 mile ≈ 1.609 km (easy rule: 5 miles ≈ 8 km)  \n• Marathon = 26 mi 385 yd (42.195 km)  \n• Speed limits in the USA: 55 mph ≈ 88.5 km/h  \nThe mile remains entrenched in American and British road signage, aviation distance reporting (while altitude uses feet, distance often nautical miles), competitive running culture (“four‑minute mile” milestone), and colloquial speech (“go the extra mile”).",
      "standard": [
        "Imperial",
        "US-customary"
      ]
    },
    {
      "id": "u476",
      "name": "nautical mile",
      "shortName": "NM",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1.852e-21",
        "u2": "(v)=>v*1.852e-18",
        "u3": "(v)=>v*1.852e-15",
        "u4": "(v)=>v*1.852e-12",
        "u5": "(v)=>v*1.852e-09",
        "u6": "(v)=>v*1.852e-06",
        "u7": "(v)=>v*0.001852",
        "u8": "(v)=>v*1.852",
        "u9": "(v)=>v*18.52",
        "u10": "(v)=>v*185.2",
        "u11": "(v)=>v*1852",
        "u12": "(v)=>v*18520",
        "u13": "(v)=>v*185200",
        "u14": "(v)=>v*1852000",
        "u15": "(v)=>v*1852000000",
        "u16": "(v)=>v*1852000000000",
        "u17": "(v)=>v*1.852e+15",
        "u18": "(v)=>v*1.852e+18",
        "u19": "(v)=>v*1.852e+21",
        "u20": "(v)=>v*1.852e+24",
        "u21": "(v)=>v*1.852e+27",
        "u472": "(v)=>v*72913.3858267717",
        "u473": "(v)=>v*6076.1154855643",
        "u474": "(v)=>v*2025.37182852143",
        "u475": "(v)=>v*1.15077944802354",
        "u477": "(v)=>v*18520000000000",
        "u478": "(v)=>v*1.23798553504412e-08",
        "u479": "(v)=>v*1.95757184986312e-13"
      },
      "description": "A nautical mile (NM) is a unit of length used in navigation, defined as exactly 1 852 m. The nautical mile is internationally defined as exactly 1852 metres. It corresponds closely to one minute of latitude and is indispensable in marine and aerial navigation. Nautical mile belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of nautical mile often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent nautical mile as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, nautical mile is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when nautical mile values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding nautical mile has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed nautical mile metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of nautical mile fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u477",
      "name": "angstrom",
      "shortName": "Å",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1e-34",
        "u2": "(v)=>v*1e-31",
        "u3": "(v)=>v*1e-28",
        "u4": "(v)=>v*1e-25",
        "u5": "(v)=>v*1e-22",
        "u6": "(v)=>v*1e-19",
        "u7": "(v)=>v*1e-16",
        "u8": "(v)=>v*1e-13",
        "u9": "(v)=>v*1e-12",
        "u10": "(v)=>v*1e-11",
        "u11": "(v)=>v*1e-10",
        "u12": "(v)=>v*1e-09",
        "u13": "(v)=>v*1e-08",
        "u14": "(v)=>v*1e-07",
        "u15": "(v)=>v*0.0001",
        "u16": "(v)=>v*0.1",
        "u17": "(v)=>v*100",
        "u18": "(v)=>v*100000",
        "u19": "(v)=>v*100000000",
        "u20": "(v)=>v*100000000000",
        "u21": "(v)=>v*100000000000000",
        "u472": "(v)=>v*3.93700787401575e-09",
        "u473": "(v)=>v*3.28083989501312e-10",
        "u474": "(v)=>v*1.09361329833771e-10",
        "u475": "(v)=>v*6.21371192237334e-14",
        "u476": "(v)=>v*5.39956803455724e-14",
        "u478": "(v)=>v*6.68458712226845e-22",
        "u479": "(v)=>v*1.057004238587e-26"
      },
      "description": "The ångström (Å) is a length unit equal to 1×10⁻¹⁰ m, often used for atomic‑scale distances. An ångström (Å) equals 10⁻¹⁰ metres and is commonly used in atomic physics and crystallography to express bond lengths and electromagnetic wavelengths in the X‑ray region. Angstrom belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of angstrom often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent angstrom as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, angstrom is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when angstrom values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding angstrom has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed angstrom metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of angstrom fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u478",
      "name": "astronomical unit",
      "shortName": "AU",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*1.495978707e-13",
        "u2": "(v)=>v*1.495978707e-10",
        "u3": "(v)=>v*1.495978707e-07",
        "u4": "(v)=>v*0.0001495978707",
        "u5": "(v)=>v*0.1495978707",
        "u6": "(v)=>v*149.5978707",
        "u7": "(v)=>v*149597.8707",
        "u8": "(v)=>v*149597870.7",
        "u9": "(v)=>v*1495978707",
        "u10": "(v)=>v*14959787070",
        "u11": "(v)=>v*149597870700",
        "u12": "(v)=>v*1495978707000",
        "u13": "(v)=>v*14959787070000",
        "u14": "(v)=>v*149597870700000",
        "u15": "(v)=>v*1.495978707e+17",
        "u16": "(v)=>v*1.495978707e+20",
        "u17": "(v)=>v*1.495978707e+23",
        "u18": "(v)=>v*1.495978707e+26",
        "u19": "(v)=>v*1.495978707e+29",
        "u20": "(v)=>v*1.495978707e+32",
        "u21": "(v)=>v*1.495978707e+35",
        "u472": "(v)=>v*5889679948818.9",
        "u473": "(v)=>v*490806662401.575",
        "u474": "(v)=>v*163602220800.525",
        "u475": "(v)=>v*92955807.2730255",
        "u476": "(v)=>v*80776388.0669546",
        "u477": "(v)=>v*1.495978707e+21",
        "u479": "(v)=>v*1.58125583413489e-05"
      },
      "description": "The astronomical unit (au) is a length unit equal to exactly 149 597 870 700 m, roughly the mean Earth–Sun distance. The astronomical unit (au) is a conventional length equal to 149 597 870 700 metres, approximately the mean distance between Earth and the Sun. It serves as a convenient yardstick for describing distances within the Solar System. Astronomical unit belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of astronomical unit often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent astronomical unit as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, astronomical unit is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when astronomical unit values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding astronomical unit has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed astronomical unit metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of astronomical unit fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u479",
      "name": "light‑year",
      "shortName": "ly",
      "categoryId": "c15",
      "conversions": {
        "u1": "(v)=>v*9.4607e-09",
        "u2": "(v)=>v*9.4607e-06",
        "u3": "(v)=>v*0.0094607",
        "u4": "(v)=>v*9.4607",
        "u5": "(v)=>v*9460.7",
        "u6": "(v)=>v*9460700",
        "u7": "(v)=>v*9460700000",
        "u8": "(v)=>v*9460700000000",
        "u9": "(v)=>v*94607000000000",
        "u10": "(v)=>v*946070000000000",
        "u11": "(v)=>v*9.4607e+15",
        "u12": "(v)=>v*9.4607e+16",
        "u13": "(v)=>v*9.4607e+17",
        "u14": "(v)=>v*9.4607e+18",
        "u15": "(v)=>v*9.4607e+21",
        "u16": "(v)=>v*9.4607e+24",
        "u17": "(v)=>v*9.4607e+27",
        "u18": "(v)=>v*9.4607e+30",
        "u19": "(v)=>v*9.4607e+33",
        "u20": "(v)=>v*9.4607e+36",
        "u21": "(v)=>v*9.4607e+39",
        "u472": "(v)=>v*3.72468503937008e+17",
        "u473": "(v)=>v*3.10390419947507e+16",
        "u474": "(v)=>v*1.03463473315836e+16",
        "u475": "(v)=>v*5878606438399.75",
        "u476": "(v)=>v*5108369330453.56",
        "u477": "(v)=>v*9.4607e+25",
        "u478": "(v)=>v*63240.8733876451"
      },
      "description": "A light‑year (ly) is a unit of length equal to 9.4607e+15 meters. A light‑year (ly) is the distance that light travels in vacuum in one Julian year (365.25 days), exactly 9.460 730 472 580 8 × 10¹⁵ metres. It is widely used in astronomy to express stellar and interstellar distances. Light‑year belongs to the broader physical quantity of length. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of light‑year often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent light‑year as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, light‑year is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when light‑year values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding light‑year has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed light‑year metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of light‑year fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u480",
      "name": "square meter",
      "shortName": "m²",
      "categoryId": "c2",
      "conversions": {
        "u481": "(v)=>v*1e-06",
        "u482": "(v)=>v*10000",
        "u483": "(v)=>v*1000000",
        "u484": "(v)=>v*0.0001",
        "u485": "(v)=>v*0.000247105381467165"
      },
      "description": "The square metre (m²) is the SI derived unit of area, equal to the area of a square with sides one metre long. Square meter belongs to the broader physical quantity of area. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of square meter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent square meter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, square meter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when square meter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding square meter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed square meter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of square meter fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u481",
      "name": "square kilometer",
      "shortName": "km²",
      "categoryId": "c2",
      "conversions": {
        "u480": "(v)=>v*1000000",
        "u482": "(v)=>v*10000000000",
        "u483": "(v)=>v*1000000000000",
        "u484": "(v)=>v*100",
        "u485": "(v)=>v*247.105381467165"
      },
      "description": "A square kilometer (km²) is a unit of area equal to 1000000 square meters. Square kilometer belongs to the broader physical quantity of area. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of square kilometer often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent square kilometer as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, square kilometer is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when square kilometer values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding square kilometer has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed square kilometer metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of square kilometer fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u482",
      "name": "square centimeter",
      "shortName": "cm²",
      "categoryId": "c2",
      "conversions": {
        "u480": "(v)=>v*0.0001",
        "u481": "(v)=>v*1e-10",
        "u483": "(v)=>v*100",
        "u484": "(v)=>v*1e-08",
        "u485": "(v)=>v*2.47105381467165e-08"
      },
      "description": "A square centimeter (cm²) is a unit of area equal to 0.0001 square meters. Square centimeter belongs to the broader physical quantity of area. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of square centimeter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent square centimeter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, square centimeter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when square centimeter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding square centimeter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed square centimeter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of square centimeter fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u483",
      "name": "square millimeter",
      "shortName": "mm²",
      "categoryId": "c2",
      "conversions": {
        "u480": "(v)=>v*1e-06",
        "u481": "(v)=>v*1e-12",
        "u482": "(v)=>v*0.01",
        "u484": "(v)=>v*1e-10",
        "u485": "(v)=>v*2.47105381467165e-10"
      },
      "description": "A square millimeter (mm²) is a unit of area equal to 1e-06 square meters. Square millimeter belongs to the broader physical quantity of area. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of square millimeter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent square millimeter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, square millimeter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when square millimeter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding square millimeter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed square millimeter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of square millimeter fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u484",
      "name": "hectare",
      "shortName": "ha",
      "categoryId": "c2",
      "conversions": {
        "u480": "(v)=>v*10000",
        "u481": "(v)=>v*0.01",
        "u482": "(v)=>v*100000000",
        "u483": "(v)=>v*10000000000",
        "u485": "(v)=>v*2.47105381467165"
      },
      "description": "A hectare (ha) is a unit of area equal to 10000 square meters. One hectare (ha) is an SI‑accepted metric unit of area equal to 10 000 square metres (a square 100 m on a side). It is widely used in land planning and forestry. Hectare belongs to the broader physical quantity of area. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hectare often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hectare as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hectare is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hectare values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hectare has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hectare metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hectare fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u485",
      "name": "acre",
      "shortName": "acre",
      "categoryId": "c2",
      "conversions": {
        "u480": "(v)=>v*4046.8564224",
        "u481": "(v)=>v*0.0040468564224",
        "u482": "(v)=>v*40468564.224",
        "u483": "(v)=>v*4046856422.4",
        "u484": "(v)=>v*0.40468564224"
      },
      "description": "A acre (acre) is a unit of area equal to 4046.856422 square meters. An acre (ac) is defined as exactly 4046.856 4224 square metres (0.4047 ha) and remains common in US and UK real‑estate and agriculture. Acre belongs to the broader physical quantity of area. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of acre often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent acre as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, acre is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when acre values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding acre has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed acre metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of acre fosters shared understanding and supports reproducible results.",
      "standard": [
        "Imperial",
        "US-customary"
      ]
    },
    {
      "id": "u486",
      "name": "gallon (US)",
      "shortName": "galUS",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*3.785411784e-24",
        "u44": "(v)=>v*3.785411784e-21",
        "u45": "(v)=>v*3.785411784e-18",
        "u46": "(v)=>v*3.785411784e-15",
        "u47": "(v)=>v*3.785411784e-12",
        "u48": "(v)=>v*3.785411784e-09",
        "u49": "(v)=>v*3.785411784e-06",
        "u50": "(v)=>v*0.003785411784",
        "u51": "(v)=>v*0.03785411784",
        "u52": "(v)=>v*0.3785411784",
        "u53": "(v)=>v*3.785411784",
        "u54": "(v)=>v*37.85411784",
        "u55": "(v)=>v*378.5411784",
        "u56": "(v)=>v*3785.411784",
        "u57": "(v)=>v*3785411.784",
        "u58": "(v)=>v*3785411784",
        "u59": "(v)=>v*3785411784000",
        "u60": "(v)=>v*3.785411784e+15",
        "u61": "(v)=>v*3.785411784e+18",
        "u62": "(v)=>v*3.785411784e+21",
        "u63": "(v)=>v*3.785411784e+24",
        "u487": "(v)=>v*4",
        "u488": "(v)=>v*8",
        "u489": "(v)=>v*16",
        "u490": "(v)=>v*256",
        "u491": "(v)=>v*768"
      },
      "description": "A gallon (US) (galUS) is a unit of volume equal to 3.785411784 liters. Gallon (us) belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gallon (US) often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gallon (US) as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gallon (US) is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gallon (US) values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gallon (US) has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gallon (US) metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gallon (US) fosters shared understanding and supports reproducible results.",
      "standard": [
        "US-customary"
      ]
    },
    {
      "id": "u487",
      "name": "quart (US)",
      "shortName": "qtUS",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*9.46352946e-25",
        "u44": "(v)=>v*9.46352946e-22",
        "u45": "(v)=>v*9.46352946e-19",
        "u46": "(v)=>v*9.46352946e-16",
        "u47": "(v)=>v*9.46352946e-13",
        "u48": "(v)=>v*9.46352946e-10",
        "u49": "(v)=>v*9.46352946e-07",
        "u50": "(v)=>v*0.000946352946",
        "u51": "(v)=>v*0.00946352946",
        "u52": "(v)=>v*0.0946352946",
        "u53": "(v)=>v*0.946352946",
        "u54": "(v)=>v*9.46352946",
        "u55": "(v)=>v*94.6352946",
        "u56": "(v)=>v*946.352946",
        "u57": "(v)=>v*946352.946",
        "u58": "(v)=>v*946352946",
        "u59": "(v)=>v*946352946000",
        "u60": "(v)=>v*946352946000000",
        "u61": "(v)=>v*9.46352946e+17",
        "u62": "(v)=>v*9.46352946e+20",
        "u63": "(v)=>v*9.46352946e+23",
        "u486": "(v)=>v*0.25",
        "u488": "(v)=>v*2",
        "u489": "(v)=>v*4",
        "u490": "(v)=>v*64",
        "u491": "(v)=>v*192"
      },
      "description": "A quart (US) (qtUS) is a unit of volume equal to 0.946352946 liters. Quart (us) belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of quart (US) often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent quart (US) as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, quart (US) is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when quart (US) values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding quart (US) has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed quart (US) metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of quart (US) fosters shared understanding and supports reproducible results.",
      "standard": [
        "US-customary"
      ]
    },
    {
      "id": "u488",
      "name": "pint (US)",
      "shortName": "ptUS",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*4.73176473e-25",
        "u44": "(v)=>v*4.73176473e-22",
        "u45": "(v)=>v*4.73176473e-19",
        "u46": "(v)=>v*4.73176473e-16",
        "u47": "(v)=>v*4.73176473e-13",
        "u48": "(v)=>v*4.73176473e-10",
        "u49": "(v)=>v*4.73176473e-07",
        "u50": "(v)=>v*0.000473176473",
        "u51": "(v)=>v*0.00473176473",
        "u52": "(v)=>v*0.0473176473",
        "u53": "(v)=>v*0.473176473",
        "u54": "(v)=>v*4.73176473",
        "u55": "(v)=>v*47.3176473",
        "u56": "(v)=>v*473.176473",
        "u57": "(v)=>v*473176.473",
        "u58": "(v)=>v*473176473",
        "u59": "(v)=>v*473176473000",
        "u60": "(v)=>v*473176473000000",
        "u61": "(v)=>v*4.73176473e+17",
        "u62": "(v)=>v*4.73176473e+20",
        "u63": "(v)=>v*4.73176473e+23",
        "u486": "(v)=>v*0.125",
        "u487": "(v)=>v*0.5",
        "u489": "(v)=>v*2",
        "u490": "(v)=>v*32",
        "u491": "(v)=>v*96"
      },
      "description": "A pint (US) (ptUS) is a unit of volume equal to 0.473176473 liters. Pint (us) belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of pint (US) often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent pint (US) as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, pint (US) is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when pint (US) values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding pint (US) has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed pint (US) metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of pint (US) fosters shared understanding and supports reproducible results.",
      "standard": [
        "US-customary"
      ]
    },
    {
      "id": "u489",
      "name": "cup (US)",
      "shortName": "cupUS",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*2.365882365e-25",
        "u44": "(v)=>v*2.365882365e-22",
        "u45": "(v)=>v*2.365882365e-19",
        "u46": "(v)=>v*2.365882365e-16",
        "u47": "(v)=>v*2.365882365e-13",
        "u48": "(v)=>v*2.365882365e-10",
        "u49": "(v)=>v*2.365882365e-07",
        "u50": "(v)=>v*0.0002365882365",
        "u51": "(v)=>v*0.002365882365",
        "u52": "(v)=>v*0.02365882365",
        "u53": "(v)=>v*0.2365882365",
        "u54": "(v)=>v*2.365882365",
        "u55": "(v)=>v*23.65882365",
        "u56": "(v)=>v*236.5882365",
        "u57": "(v)=>v*236588.2365",
        "u58": "(v)=>v*236588236.5",
        "u59": "(v)=>v*236588236500",
        "u60": "(v)=>v*236588236500000",
        "u61": "(v)=>v*2.365882365e+17",
        "u62": "(v)=>v*2.365882365e+20",
        "u63": "(v)=>v*2.365882365e+23",
        "u486": "(v)=>v*0.0625",
        "u487": "(v)=>v*0.25",
        "u488": "(v)=>v*0.5",
        "u490": "(v)=>v*16",
        "u491": "(v)=>v*48"
      },
      "description": "A cup (US) (cupUS) is a unit of volume equal to 0.2365882365 liters. Cup (us) belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of cup (US) often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent cup (US) as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, cup (US) is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when cup (US) values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding cup (US) has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed cup (US) metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of cup (US) fosters shared understanding and supports reproducible results.",
      "standard": [
        "US-customary"
      ]
    },
    {
      "id": "u490",
      "name": "tablespoon",
      "shortName": "tbsp",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*1.478676478125e-26",
        "u44": "(v)=>v*1.478676478125e-23",
        "u45": "(v)=>v*1.478676478125e-20",
        "u46": "(v)=>v*1.478676478125e-17",
        "u47": "(v)=>v*1.478676478125e-14",
        "u48": "(v)=>v*1.478676478125e-11",
        "u49": "(v)=>v*1.478676478125e-08",
        "u50": "(v)=>v*1.478676478125e-05",
        "u51": "(v)=>v*0.0001478676478125",
        "u52": "(v)=>v*0.001478676478125",
        "u53": "(v)=>v*0.01478676478125",
        "u54": "(v)=>v*0.1478676478125",
        "u55": "(v)=>v*1.478676478125",
        "u56": "(v)=>v*14.78676478125",
        "u57": "(v)=>v*14786.76478125",
        "u58": "(v)=>v*14786764.78125",
        "u59": "(v)=>v*14786764781.25",
        "u60": "(v)=>v*14786764781250",
        "u61": "(v)=>v*1.478676478125e+16",
        "u62": "(v)=>v*1.478676478125e+19",
        "u63": "(v)=>v*1.478676478125e+22",
        "u486": "(v)=>v*0.00390625",
        "u487": "(v)=>v*0.015625",
        "u488": "(v)=>v*0.03125",
        "u489": "(v)=>v*0.0625",
        "u491": "(v)=>v*3"
      },
      "description": "A tablespoon (tbsp) is a unit of volume equal to 0.01478676478 liters. Tablespoon belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of tablespoon often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent tablespoon as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, tablespoon is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when tablespoon values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding tablespoon has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed tablespoon metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of tablespoon fosters shared understanding and supports reproducible results.",
      "standard": [
        "US-customary"
      ]
    },
    {
      "id": "u491",
      "name": "teaspoon",
      "shortName": "tsp",
      "categoryId": "c28",
      "conversions": {
        "u43": "(v)=>v*4.92892159375e-27",
        "u44": "(v)=>v*4.92892159375e-24",
        "u45": "(v)=>v*4.92892159375e-21",
        "u46": "(v)=>v*4.92892159375e-18",
        "u47": "(v)=>v*4.92892159375e-15",
        "u48": "(v)=>v*4.92892159375e-12",
        "u49": "(v)=>v*4.92892159375e-09",
        "u50": "(v)=>v*4.92892159375e-06",
        "u51": "(v)=>v*4.92892159375e-05",
        "u52": "(v)=>v*0.000492892159375",
        "u53": "(v)=>v*0.00492892159375",
        "u54": "(v)=>v*0.0492892159375",
        "u55": "(v)=>v*0.492892159375",
        "u56": "(v)=>v*4.92892159375",
        "u57": "(v)=>v*4928.92159375",
        "u58": "(v)=>v*4928921.59375",
        "u59": "(v)=>v*4928921593.75",
        "u60": "(v)=>v*4928921593750",
        "u61": "(v)=>v*4.92892159375e+15",
        "u62": "(v)=>v*4.92892159375e+18",
        "u63": "(v)=>v*4.92892159375e+21",
        "u486": "(v)=>v*0.00130208333333333",
        "u487": "(v)=>v*0.00520833333333333",
        "u488": "(v)=>v*0.0104166666666667",
        "u489": "(v)=>v*0.0208333333333333",
        "u490": "(v)=>v*0.333333333333333"
      },
      "description": "A teaspoon (tsp) is a unit of volume equal to 0.004928921594 liters. Teaspoon belongs to the broader physical quantity of volume. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of teaspoon often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent teaspoon as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, teaspoon is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when teaspoon values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding teaspoon has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed teaspoon metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of teaspoon fosters shared understanding and supports reproducible results.",
      "standard": [
        "US-customary"
      ]
    },
    {
      "id": "u492",
      "name": "ounce",
      "shortName": "oz",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*2.8349523125e-26",
        "u23": "(v)=>v*2.8349523125e-23",
        "u24": "(v)=>v*2.8349523125e-20",
        "u25": "(v)=>v*2.8349523125e-17",
        "u26": "(v)=>v*2.8349523125e-14",
        "u27": "(v)=>v*2.8349523125e-11",
        "u28": "(v)=>v*2.8349523125e-08",
        "u29": "(v)=>v*2.8349523125e-05",
        "u30": "(v)=>v*0.00028349523125",
        "u31": "(v)=>v*0.0028349523125",
        "u32": "(v)=>v*0.028349523125",
        "u33": "(v)=>v*0.28349523125",
        "u34": "(v)=>v*2.8349523125",
        "u35": "(v)=>v*28.349523125",
        "u36": "(v)=>v*28349.523125",
        "u37": "(v)=>v*28349523.125",
        "u38": "(v)=>v*28349523125",
        "u39": "(v)=>v*28349523125000",
        "u40": "(v)=>v*2.8349523125e+16",
        "u41": "(v)=>v*2.8349523125e+19",
        "u42": "(v)=>v*2.8349523125e+22",
        "u493": "(v)=>v*0.0625",
        "u494": "(v)=>v*0.00446428571428571",
        "u495": "(v)=>v*3.125e-05",
        "u496": "(v)=>v*2.79017857142857e-05",
        "u497": "(v)=>v*141.747615625"
      },
      "description": "A ounce (oz) is a unit of mass equal to 0.02834952313 grams. The avoirdupois ounce (oz) is defined as exactly 28.349 523 125 grams and is used chiefly in the United States to measure packaged foods, postal items and precious metals via the troy ounce variant. Ounce belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of ounce often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent ounce as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, ounce is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when ounce values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding ounce has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed ounce metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of ounce fosters shared understanding and supports reproducible results.",
      "standard": [
        "Imperial",
        "US-customary"
      ]
    },
    {
      "id": "u493",
      "name": "pound",
      "shortName": "lb",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*4.5359237e-25",
        "u23": "(v)=>v*4.5359237e-22",
        "u24": "(v)=>v*4.5359237e-19",
        "u25": "(v)=>v*4.5359237e-16",
        "u26": "(v)=>v*4.5359237e-13",
        "u27": "(v)=>v*4.5359237e-10",
        "u28": "(v)=>v*4.5359237e-07",
        "u29": "(v)=>v*0.00045359237",
        "u30": "(v)=>v*0.0045359237",
        "u31": "(v)=>v*0.045359237",
        "u32": "(v)=>v*0.45359237",
        "u33": "(v)=>v*4.5359237",
        "u34": "(v)=>v*45.359237",
        "u35": "(v)=>v*453.59237",
        "u36": "(v)=>v*453592.37",
        "u37": "(v)=>v*453592370",
        "u38": "(v)=>v*453592370000",
        "u39": "(v)=>v*453592370000000",
        "u40": "(v)=>v*4.5359237e+17",
        "u41": "(v)=>v*4.5359237e+20",
        "u42": "(v)=>v*4.5359237e+23",
        "u492": "(v)=>v*16",
        "u494": "(v)=>v*0.0714285714285714",
        "u495": "(v)=>v*0.0005",
        "u496": "(v)=>v*0.000446428571428571",
        "u497": "(v)=>v*2267.96185"
      },
      "description": "A pound (lb) is a unit of mass equal to 0.45359237 grams. The avoirdupois pound (lb) is fixed at exactly 0.453 592 37 kilograms. It remains a primary weight unit in the United States and the UK for body‑mass and groceries. Pound belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of pound often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent pound as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, pound is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when pound values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding pound has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed pound metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of pound fosters shared understanding and supports reproducible results.",
      "standard": [
        "Imperial",
        "US-customary"
      ]
    },
    {
      "id": "u494",
      "name": "stone",
      "shortName": "st",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*6.35029318e-24",
        "u23": "(v)=>v*6.35029318e-21",
        "u24": "(v)=>v*6.35029318e-18",
        "u25": "(v)=>v*6.35029318e-15",
        "u26": "(v)=>v*6.35029318e-12",
        "u27": "(v)=>v*6.35029318e-09",
        "u28": "(v)=>v*6.35029318e-06",
        "u29": "(v)=>v*0.00635029318",
        "u30": "(v)=>v*0.0635029318",
        "u31": "(v)=>v*0.635029318",
        "u32": "(v)=>v*6.35029318",
        "u33": "(v)=>v*63.5029318",
        "u34": "(v)=>v*635.029318",
        "u35": "(v)=>v*6350.29318",
        "u36": "(v)=>v*6350293.18",
        "u37": "(v)=>v*6350293180",
        "u38": "(v)=>v*6350293180000",
        "u39": "(v)=>v*6.35029318e+15",
        "u40": "(v)=>v*6.35029318e+18",
        "u41": "(v)=>v*6.35029318e+21",
        "u42": "(v)=>v*6.35029318e+24",
        "u492": "(v)=>v*224",
        "u493": "(v)=>v*14",
        "u495": "(v)=>v*0.007",
        "u496": "(v)=>v*0.00625",
        "u497": "(v)=>v*31751.4659"
      },
      "description": "A stone (st) is a unit of mass equal to 6.35029318 grams. The stone (st) is equal to 14 pounds or 6.350 293 18 kilograms. It is still used in the UK and Ireland for expressing human body weight. Stone belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of stone often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent stone as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, stone is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when stone values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding stone has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed stone metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of stone fosters shared understanding and supports reproducible results.",
      "standard": [
        "Imperial"
      ]
    },
    {
      "id": "u495",
      "name": "short ton (US)",
      "shortName": "tonUS",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*9.0718474e-22",
        "u23": "(v)=>v*9.0718474e-19",
        "u24": "(v)=>v*9.0718474e-16",
        "u25": "(v)=>v*9.0718474e-13",
        "u26": "(v)=>v*9.0718474e-10",
        "u27": "(v)=>v*9.0718474e-07",
        "u28": "(v)=>v*0.00090718474",
        "u29": "(v)=>v*0.90718474",
        "u30": "(v)=>v*9.0718474",
        "u31": "(v)=>v*90.718474",
        "u32": "(v)=>v*907.18474",
        "u33": "(v)=>v*9071.8474",
        "u34": "(v)=>v*90718.474",
        "u35": "(v)=>v*907184.74",
        "u36": "(v)=>v*907184740",
        "u37": "(v)=>v*907184740000",
        "u38": "(v)=>v*907184740000000",
        "u39": "(v)=>v*9.0718474e+17",
        "u40": "(v)=>v*9.0718474e+20",
        "u41": "(v)=>v*9.0718474e+23",
        "u42": "(v)=>v*9.0718474e+26",
        "u492": "(v)=>v*32000",
        "u493": "(v)=>v*2000",
        "u494": "(v)=>v*142.857142857143",
        "u496": "(v)=>v*0.892857142857143",
        "u497": "(v)=>v*4535923.7"
      },
      "description": "A short ton (US) (tonUS) is a unit of mass equal to 907.18474 grams. The short ton, used mainly in the United States, equals 2000 pounds or 907.184 74 kilograms. Short ton (us) belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of short ton (US) often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent short ton (US) as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, short ton (US) is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when short ton (US) values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding short ton (US) has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed short ton (US) metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of short ton (US) fosters shared understanding and supports reproducible results.",
      "standard": [
        "US-customary"
      ]
    },
    {
      "id": "u496",
      "name": "long ton (UK)",
      "shortName": "tonUK",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*1.0160469088e-21",
        "u23": "(v)=>v*1.0160469088e-18",
        "u24": "(v)=>v*1.0160469088e-15",
        "u25": "(v)=>v*1.0160469088e-12",
        "u26": "(v)=>v*1.0160469088e-09",
        "u27": "(v)=>v*1.0160469088e-06",
        "u28": "(v)=>v*0.0010160469088",
        "u29": "(v)=>v*1.0160469088",
        "u30": "(v)=>v*10.160469088",
        "u31": "(v)=>v*101.60469088",
        "u32": "(v)=>v*1016.0469088",
        "u33": "(v)=>v*10160.469088",
        "u34": "(v)=>v*101604.69088",
        "u35": "(v)=>v*1016046.9088",
        "u36": "(v)=>v*1016046908.8",
        "u37": "(v)=>v*1016046908800",
        "u38": "(v)=>v*1.0160469088e+15",
        "u39": "(v)=>v*1.0160469088e+18",
        "u40": "(v)=>v*1.0160469088e+21",
        "u41": "(v)=>v*1.0160469088e+24",
        "u42": "(v)=>v*1.0160469088e+27",
        "u492": "(v)=>v*35840",
        "u493": "(v)=>v*2240",
        "u494": "(v)=>v*160",
        "u495": "(v)=>v*1.12",
        "u497": "(v)=>v*5080234.544"
      },
      "description": "A long ton (UK) (tonUK) is a unit of mass equal to 1016.046909 grams. The long ton, employed in the UK, corresponds to 2240 pounds or 1016.046 9088 kilograms. Long ton (uk) belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of long ton (UK) often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent long ton (UK) as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, long ton (UK) is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when long ton (UK) values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding long ton (UK) has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed long ton (UK) metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of long ton (UK) fosters shared understanding and supports reproducible results.",
      "standard": [
        "Imperial"
      ]
    },
    {
      "id": "u497",
      "name": "carat",
      "shortName": "carat",
      "categoryId": "c19",
      "conversions": {
        "u22": "(v)=>v*2e-28",
        "u23": "(v)=>v*2e-25",
        "u24": "(v)=>v*2e-22",
        "u25": "(v)=>v*2e-19",
        "u26": "(v)=>v*2e-16",
        "u27": "(v)=>v*2e-13",
        "u28": "(v)=>v*2e-10",
        "u29": "(v)=>v*2e-07",
        "u30": "(v)=>v*2e-06",
        "u31": "(v)=>v*2e-05",
        "u32": "(v)=>v*0.0002",
        "u33": "(v)=>v*0.002",
        "u34": "(v)=>v*0.02",
        "u35": "(v)=>v*0.2",
        "u36": "(v)=>v*200",
        "u37": "(v)=>v*200000",
        "u38": "(v)=>v*200000000",
        "u39": "(v)=>v*200000000000",
        "u40": "(v)=>v*200000000000000",
        "u41": "(v)=>v*2e+17",
        "u42": "(v)=>v*2e+20",
        "u492": "(v)=>v*0.00705479238991608",
        "u493": "(v)=>v*0.000440924524369755",
        "u494": "(v)=>v*3.14946088835539e-05",
        "u495": "(v)=>v*2.20462262184878e-07",
        "u496": "(v)=>v*1.96841305522212e-07"
      },
      "description": "A carat (carat) is a unit of mass equal to 0.0002 grams. A metric carat (ct) is a mass unit for gemstones, defined as exactly 200 milligrams (0.2 grams). Large diamonds are often weighed to the hundred‑thousandth of a carat. Carat belongs to the broader physical quantity of mass. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of carat often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent carat as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, carat is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when carat values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding carat has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed carat metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of carat fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u500",
      "name": "minute",
      "shortName": "min",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*6e-23",
        "u263": "(v)=>v*6e-20",
        "u264": "(v)=>v*6e-17",
        "u265": "(v)=>v*6e-14",
        "u266": "(v)=>v*6e-11",
        "u267": "(v)=>v*6e-08",
        "u268": "(v)=>v*6e-05",
        "u269": "(v)=>v*0.06",
        "u270": "(v)=>v*0.6",
        "u271": "(v)=>v*6",
        "u272": "(v)=>v*60",
        "u273": "(v)=>v*600",
        "u274": "(v)=>v*6000",
        "u275": "(v)=>v*60000",
        "u276": "(v)=>v*60000000",
        "u277": "(v)=>v*60000000000",
        "u278": "(v)=>v*60000000000000",
        "u279": "(v)=>v*6e+16",
        "u280": "(v)=>v*6e+19",
        "u281": "(v)=>v*6e+22",
        "u282": "(v)=>v*6e+25",
        "u501": "(v)=>v*0.0166666666666667",
        "u502": "(v)=>v*0.000694444444444444",
        "u503": "(v)=>v*9.92063492063492e-05",
        "u504": "(v)=>v*1.90128526884174e-06"
      },
      "description": "**Minute – symbol min**  \nA minute is a unit of time **equal to 60 seconds**. This sexagesimal (base‑60) subdivision dates back over 4 000 years to the Sumerians and Babylonians, whose astronomical tables used 60 because it is highly divisible (2, 3, 4, 5, 6). Because the modern second is defined via 9 192 631 770 periods of the caesium‑133 hyperfine transition, the minute inherits atomic‑clock precision.\n\n**Dual identity: time vs angle**  \nWhile most people encounter minutes on clocks, phone timers, and meeting agendas, the same ratio appears in angular measure: 1 ° = 60 arcminutes (60′), indispensable for celestial navigation and telescope pointing.\n\n**Conversions & ubiquity**  \n• 1 min = 60 s = 0.016 666 7 h  \n• 30 min = common TV‑show slot  \n• 1 000 rpm (revolutions per minute) benchmarks engine speed  \nIn digital media analytics (“minutes‑watched”), fitness trackers, cookbooks, and musical tempo encoding (beats per minute), the minute bridges human intuition and high‑precision timing systems.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u501",
      "name": "hour",
      "shortName": "h",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*3.6e-21",
        "u263": "(v)=>v*3.6e-18",
        "u264": "(v)=>v*3.6e-15",
        "u265": "(v)=>v*3.6e-12",
        "u266": "(v)=>v*3.6e-09",
        "u267": "(v)=>v*3.6e-06",
        "u268": "(v)=>v*0.0036",
        "u269": "(v)=>v*3.6",
        "u270": "(v)=>v*36",
        "u271": "(v)=>v*360",
        "u272": "(v)=>v*3600",
        "u273": "(v)=>v*36000",
        "u274": "(v)=>v*360000",
        "u275": "(v)=>v*3600000",
        "u276": "(v)=>v*3600000000",
        "u277": "(v)=>v*3600000000000",
        "u278": "(v)=>v*3.6e+15",
        "u279": "(v)=>v*3.6e+18",
        "u280": "(v)=>v*3.6e+21",
        "u281": "(v)=>v*3.6e+24",
        "u282": "(v)=>v*3.6e+27",
        "u500": "(v)=>v*60",
        "u502": "(v)=>v*0.0416666666666667",
        "u503": "(v)=>v*0.00595238095238095",
        "u504": "(v)=>v*0.000114077116130504"
      },
      "description": "A hour (h) is a unit of time equal to 3600 seconds. Hour belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of hour often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent hour as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, hour is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when hour values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding hour has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed hour metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of hour fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u502",
      "name": "day",
      "shortName": "day",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*8.64e-20",
        "u263": "(v)=>v*8.64e-17",
        "u264": "(v)=>v*8.64e-14",
        "u265": "(v)=>v*8.64e-11",
        "u266": "(v)=>v*8.64e-08",
        "u267": "(v)=>v*8.64e-05",
        "u268": "(v)=>v*0.0864",
        "u269": "(v)=>v*86.4",
        "u270": "(v)=>v*864",
        "u271": "(v)=>v*8640",
        "u272": "(v)=>v*86400",
        "u273": "(v)=>v*864000",
        "u274": "(v)=>v*8640000",
        "u275": "(v)=>v*86400000",
        "u276": "(v)=>v*86400000000",
        "u277": "(v)=>v*86400000000000",
        "u278": "(v)=>v*8.64e+16",
        "u279": "(v)=>v*8.64e+19",
        "u280": "(v)=>v*8.64e+22",
        "u281": "(v)=>v*8.64e+25",
        "u282": "(v)=>v*8.64e+28",
        "u500": "(v)=>v*1440",
        "u501": "(v)=>v*24",
        "u503": "(v)=>v*0.142857142857143",
        "u504": "(v)=>v*0.0027378507871321"
      },
      "description": "**Day – symbol d**  \nA day is the interval of **86 400 SI seconds**, closely matching one mean solar rotation of Earth. Because our planet’s spin is gradually slowing and irregular, the International Earth Rotation and Reference Systems Service (IERS) occasionally inserts **leap seconds** to keep civil time (Coordinated Universal Time, UTC) within 0.9 s of UT1 (astronomically observed rotation).\n\n**Flavours of the day**  \n• **Sidereal day**: 23 h 56 m 4.091 s – relative to distant stars  \n• **Solar day**: average noon‑to‑noon, basis of civil day  \n• **Julian day number (JDN)**: continuous count used by astronomers  \n• **Business day**: Monday–Friday, excluding holidays  \n\n**Relations & cultural weight**  \n• 7 days = 1 week | 365 days ≈ common year  \n• 1 day ≈ 1 rotation, tying clocks to geography and sunlight  \nFrom diurnal animal behaviour studies to global logistics, data‑centre backup cycles, and circadian‑rhythm medicine, the day is the heartbeat of calendars and biological life.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u503",
      "name": "week",
      "shortName": "wk",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*6.048e-19",
        "u263": "(v)=>v*6.048e-16",
        "u264": "(v)=>v*6.048e-13",
        "u265": "(v)=>v*6.048e-10",
        "u266": "(v)=>v*6.048e-07",
        "u267": "(v)=>v*0.0006048",
        "u268": "(v)=>v*0.6048",
        "u269": "(v)=>v*604.8",
        "u270": "(v)=>v*6048",
        "u271": "(v)=>v*60480",
        "u272": "(v)=>v*604800",
        "u273": "(v)=>v*6048000",
        "u274": "(v)=>v*60480000",
        "u275": "(v)=>v*604800000",
        "u276": "(v)=>v*604800000000",
        "u277": "(v)=>v*604800000000000",
        "u278": "(v)=>v*6.048e+17",
        "u279": "(v)=>v*6.048e+20",
        "u280": "(v)=>v*6.048e+23",
        "u281": "(v)=>v*6.048e+26",
        "u282": "(v)=>v*6.048e+29",
        "u500": "(v)=>v*10080",
        "u501": "(v)=>v*168",
        "u502": "(v)=>v*7",
        "u504": "(v)=>v*0.0191649555099247"
      },
      "description": "**Week – symbol wk**  \nA week is a calendar interval of **seven consecutive days**, traditionally named Monday through Sunday in ISO 8601 (or Sunday to Saturday in US convention). Unlike months and years, the week has no direct astronomical anchor; its persistence stems from ancient cultures that linked the seven visible “classical” planets (Sun, Moon, Mars, Mercury, Jupiter, Venus, Saturn) to each day.\n\n**Historical timeline**  \n• 6th c. BCE: Babylonian 7‑day cycle spreads via Judaism  \n• 321 CE: Roman Emperor Constantine I makes Sunday a weekly rest day  \n• 1582: Gregorian calendar reform retains the unbroken week sequence\n\n**Structuring the modern world**  \nPayroll periods, school timetables, agile software “sprints”, ISO “week dates” (e.g., 2025‑W23) and epidemiological reports rely on the unwavering cadence of the week.\n\n**Key figures**  \n• 1 week = 7 days = 168 hours  \n• 52 weeks + 1 day (or 2 in leap years) ≈ 1 Gregorian year  \nWith universal recognition and clear segmentation into weekdays vs weekend, the week underpins social rhythms, economic statistics, and time‑series dashboards.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u504",
      "name": "year",
      "shortName": "yr",
      "categoryId": "c25",
      "conversions": {
        "u262": "(v)=>v*3.15576e-17",
        "u263": "(v)=>v*3.15576e-14",
        "u264": "(v)=>v*3.15576e-11",
        "u265": "(v)=>v*3.15576e-08",
        "u266": "(v)=>v*3.15576e-05",
        "u267": "(v)=>v*0.0315576",
        "u268": "(v)=>v*31.5576",
        "u269": "(v)=>v*31557.6",
        "u270": "(v)=>v*315576",
        "u271": "(v)=>v*3155760",
        "u272": "(v)=>v*31557600",
        "u273": "(v)=>v*315576000",
        "u274": "(v)=>v*3155760000",
        "u275": "(v)=>v*31557600000",
        "u276": "(v)=>v*31557600000000",
        "u277": "(v)=>v*3.15576e+16",
        "u278": "(v)=>v*3.15576e+19",
        "u279": "(v)=>v*3.15576e+22",
        "u280": "(v)=>v*3.15576e+25",
        "u281": "(v)=>v*3.15576e+28",
        "u282": "(v)=>v*3.15576e+31",
        "u500": "(v)=>v*525960",
        "u501": "(v)=>v*8766",
        "u502": "(v)=>v*365.25",
        "u503": "(v)=>v*52.1785714285714"
      },
      "description": "A year (yr) is a unit of time equal to 31557600 seconds. Year belongs to the broader physical quantity of time. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of year often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent year as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, year is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when year values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding year has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed year metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of year fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u505",
      "name": "meter per second",
      "shortName": "m/s",
      "categoryId": "c23",
      "conversions": {
        "u506": "(v)=>v*3.5999999999712",
        "u507": "(v)=>v*2.2369362920544",
        "u508": "(v)=>v*1.94384617178935",
        "u509": "(v)=>v*3.28083989501312",
        "u510": "(v)=>v*3.33564095198152e-09"
      },
      "description": "The metre per second (m/s) is the SI derived unit of speed, indicating a displacement of one metre every second. Meter per second belongs to the broader physical quantity of speed. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of meter per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent meter per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, meter per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when meter per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding meter per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed meter per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of meter per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u506",
      "name": "kilometer per hour",
      "shortName": "km/h",
      "categoryId": "c23",
      "conversions": {
        "u505": "(v)=>v*0.27777777778",
        "u507": "(v)=>v*0.621371192242305",
        "u508": "(v)=>v*0.539957269945806",
        "u509": "(v)=>v*0.911344415288714",
        "u510": "(v)=>v*9.2656693111339e-10"
      },
      "description": "A kilometer per hour (km/h) is a unit of speed equal to 0.2777777778 meter per seconds. The kilo prefix denotes a factor of 10^3, so 1 kilometer per hour equals 10^3 meter per hours. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilometer per hour belongs to the broader physical quantity of speed. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilometer per hour often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilometer per hour as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilometer per hour is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilometer per hour values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilometer per hour has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilometer per hour metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilometer per hour fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u507",
      "name": "mile per hour",
      "shortName": "mph",
      "categoryId": "c23",
      "conversions": {
        "u505": "(v)=>v*0.44704",
        "u506": "(v)=>v*1.60934399998713",
        "u508": "(v)=>v*0.868976992636711",
        "u509": "(v)=>v*1.46666666666667",
        "u510": "(v)=>v*1.49116493117382e-09"
      },
      "description": "A mile per hour (mph) is a unit of speed equal to 0.44704 meter per seconds. Mile per hour belongs to the broader physical quantity of speed. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of mile per hour often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent mile per hour as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, mile per hour is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when mile per hour values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding mile per hour has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed mile per hour metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of mile per hour fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u508",
      "name": "knot",
      "shortName": "knot",
      "categoryId": "c23",
      "conversions": {
        "u505": "(v)=>v*0.514444",
        "u506": "(v)=>v*1.85199839998518",
        "u507": "(v)=>v*1.15077845382964",
        "u509": "(v)=>v*1.68780839895013",
        "u510": "(v)=>v*1.71600047390118e-09"
      },
      "description": "A knot (knot) is a unit of speed equal to 0.514444 meter per seconds. Knot belongs to the broader physical quantity of speed. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of knot often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent knot as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, knot is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when knot values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding knot has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed knot metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of knot fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u509",
      "name": "foot per second",
      "shortName": "ft/s",
      "categoryId": "c23",
      "conversions": {
        "u505": "(v)=>v*0.3048",
        "u506": "(v)=>v*1.09727999999122",
        "u507": "(v)=>v*0.681818181818182",
        "u508": "(v)=>v*0.592484313161394",
        "u510": "(v)=>v*1.01670336216397e-09"
      },
      "description": "A foot per second (ft/s) is a unit of speed equal to 0.3048 meter per seconds. Foot per second belongs to the broader physical quantity of speed. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of foot per second often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent foot per second as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, foot per second is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when foot per second values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding foot per second has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed foot per second metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of foot per second fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u510",
      "name": "speed of light",
      "shortName": "c",
      "categoryId": "c23",
      "conversions": {
        "u505": "(v)=>v*299792458",
        "u506": "(v)=>v*1079252848.79137",
        "u507": "(v)=>v*670616629.384395",
        "u508": "(v)=>v*582750421.814619",
        "u509": "(v)=>v*983571056.430446"
      },
      "description": "A speed of light (c) is a unit of speed equal to 299792458 meter per seconds. Speed of light belongs to the broader physical quantity of speed. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of speed of light often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent speed of light as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, speed of light is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when speed of light values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding speed of light has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed speed of light metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of speed of light fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u511",
      "name": "meter per second squared",
      "shortName": "m/s²",
      "categoryId": "c1",
      "conversions": {
        "u512": "(v)=>v*0.101971621297793",
        "u513": "(v)=>v*3.28083989501312"
      },
      "description": "The metre per second squared or metre per square second is the unit of acceleration in the International System of Units (SI). As a derived unit, it is composed from the SI base units of length, the metre, and of time, the second. Its symbol is written in the form m/s². Meter per second squared belongs to the broader physical quantity of acceleration. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of meter per second squared often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent meter per second squared as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, meter per second squared is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when meter per second squared values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding meter per second squared has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed meter per second squared metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of meter per second squared fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u512",
      "name": "standard gravity",
      "shortName": "g₀",
      "categoryId": "c1",
      "conversions": {
        "u511": "(v)=>v*9.80665",
        "u513": "(v)=>v*32.1740485564304"
      },
      "description": "The standard acceleration due to gravity (g₀) is defined as 9.806 65 m/s² and approximates average surface gravity on Earth. Standard gravity (g₀) is the nominal acceleration due to Earth's gravity, defined by convention as 9.806 65 m/s². It provides a reference for expressing acceleration forces, such as in aviation and rocketry. Standard gravity belongs to the broader physical quantity of acceleration. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of standard gravity often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent standard gravity as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, standard gravity is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when standard gravity values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding standard gravity has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed standard gravity metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of standard gravity fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u513",
      "name": "foot per second squared",
      "shortName": "ft/s²",
      "categoryId": "c1",
      "conversions": {
        "u511": "(v)=>v*0.3048",
        "u512": "(v)=>v*0.0310809501715673"
      },
      "description": "A foot per second squared (ft/s²) is a unit of acceleration equal to 0.3048 meter per second squareds. A foot per second squared (ft/s²) equals 0.3048 metres per second squared. The unit appears in US engineering to describe aircraft acceleration and elevator performance. Foot per second squared belongs to the broader physical quantity of acceleration. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of foot per second squared often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent foot per second squared as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, foot per second squared is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when foot per second squared values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding foot per second squared has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed foot per second squared metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of foot per second squared fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u514",
      "name": "standard atmosphere",
      "shortName": "atm",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1.01325e-19",
        "u65": "(v)=>v*1.01325e-16",
        "u66": "(v)=>v*1.01325e-13",
        "u67": "(v)=>v*1.01325e-10",
        "u68": "(v)=>v*1.01325e-07",
        "u69": "(v)=>v*0.000101325",
        "u70": "(v)=>v*0.101325",
        "u71": "(v)=>v*101.325",
        "u72": "(v)=>v*1013.25",
        "u73": "(v)=>v*10132.5",
        "u74": "(v)=>v*101325",
        "u75": "(v)=>v*1013250",
        "u76": "(v)=>v*10132500",
        "u77": "(v)=>v*101325000",
        "u78": "(v)=>v*101325000000",
        "u79": "(v)=>v*101325000000000",
        "u80": "(v)=>v*1.01325e+17",
        "u81": "(v)=>v*1.01325e+20",
        "u82": "(v)=>v*1.01325e+23",
        "u83": "(v)=>v*1.01325e+26",
        "u84": "(v)=>v*1.01325e+29",
        "u515": "(v)=>v*1.01325",
        "u516": "(v)=>v*14.6959487822667",
        "u517": "(v)=>v*760.000002400197"
      },
      "description": "A standard atmosphere (atm) is a unit of pressure equal to 101325 pascals. Standard atmosphere belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of standard atmosphere often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent standard atmosphere as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, standard atmosphere is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when standard atmosphere values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding standard atmosphere has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed standard atmosphere metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of standard atmosphere fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u515",
      "name": "bar",
      "shortName": "bar",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1e-19",
        "u65": "(v)=>v*1e-16",
        "u66": "(v)=>v*1e-13",
        "u67": "(v)=>v*1e-10",
        "u68": "(v)=>v*1e-07",
        "u69": "(v)=>v*0.0001",
        "u70": "(v)=>v*0.1",
        "u71": "(v)=>v*100",
        "u72": "(v)=>v*1000",
        "u73": "(v)=>v*10000",
        "u74": "(v)=>v*100000",
        "u75": "(v)=>v*1000000",
        "u76": "(v)=>v*10000000",
        "u77": "(v)=>v*100000000",
        "u78": "(v)=>v*100000000000",
        "u79": "(v)=>v*100000000000000",
        "u80": "(v)=>v*1e+17",
        "u81": "(v)=>v*1e+20",
        "u82": "(v)=>v*1e+23",
        "u83": "(v)=>v*1e+26",
        "u84": "(v)=>v*1e+29",
        "u514": "(v)=>v*0.986923266716013",
        "u516": "(v)=>v*14.5037737796859",
        "u517": "(v)=>v*750.06168507298"
      },
      "description": "A bar (bar) is a unit of pressure equal to 100000 pascals. Bar belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of bar often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent bar as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, bar is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when bar values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding bar has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed bar metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of bar fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u516",
      "name": "pound per square inch",
      "shortName": "psi",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*6.89475729e-21",
        "u65": "(v)=>v*6.89475729e-18",
        "u66": "(v)=>v*6.89475729e-15",
        "u67": "(v)=>v*6.89475729e-12",
        "u68": "(v)=>v*6.89475729e-09",
        "u69": "(v)=>v*6.89475729e-06",
        "u70": "(v)=>v*0.00689475729",
        "u71": "(v)=>v*6.89475729",
        "u72": "(v)=>v*68.9475729",
        "u73": "(v)=>v*689.475729",
        "u74": "(v)=>v*6894.75729",
        "u75": "(v)=>v*68947.5729",
        "u76": "(v)=>v*689475.729",
        "u77": "(v)=>v*6894757.29",
        "u78": "(v)=>v*6894757290",
        "u79": "(v)=>v*6894757290000",
        "u80": "(v)=>v*6.89475729e+15",
        "u81": "(v)=>v*6.89475729e+18",
        "u82": "(v)=>v*6.89475729e+21",
        "u83": "(v)=>v*6.89475729e+24",
        "u84": "(v)=>v*6.89475729e+27",
        "u514": "(v)=>v*0.0680459638786084",
        "u515": "(v)=>v*0.0689475729",
        "u517": "(v)=>v*51.7149327110661"
      },
      "description": "A pound per square inch (psi) is a unit of pressure equal to 6894.75729 pascals. Pound per square inch belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of pound per square inch often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent pound per square inch as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, pound per square inch is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when pound per square inch values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding pound per square inch has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed pound per square inch metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of pound per square inch fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u517",
      "name": "torr",
      "shortName": "torr",
      "categoryId": "c21",
      "conversions": {
        "u64": "(v)=>v*1.33322368e-22",
        "u65": "(v)=>v*1.33322368e-19",
        "u66": "(v)=>v*1.33322368e-16",
        "u67": "(v)=>v*1.33322368e-13",
        "u68": "(v)=>v*1.33322368e-10",
        "u69": "(v)=>v*1.33322368e-07",
        "u70": "(v)=>v*0.000133322368",
        "u71": "(v)=>v*0.133322368",
        "u72": "(v)=>v*1.33322368",
        "u73": "(v)=>v*13.3322368",
        "u74": "(v)=>v*133.322368",
        "u75": "(v)=>v*1333.22368",
        "u76": "(v)=>v*13332.2368",
        "u77": "(v)=>v*133322.368",
        "u78": "(v)=>v*133322368",
        "u79": "(v)=>v*133322368000",
        "u80": "(v)=>v*133322368000000",
        "u81": "(v)=>v*1.33322368e+17",
        "u82": "(v)=>v*1.33322368e+20",
        "u83": "(v)=>v*1.33322368e+23",
        "u84": "(v)=>v*1.33322368e+26",
        "u514": "(v)=>v*0.00131578946952874",
        "u515": "(v)=>v*0.00133322368",
        "u516": "(v)=>v*0.0193367746524403"
      },
      "description": "A torr (torr) is a unit of pressure equal to 133.322368 pascals. Torr belongs to the broader physical quantity of pressure. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of torr often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent torr as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, torr is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when torr values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding torr has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed torr metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of torr fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u518",
      "name": "calorie",
      "shortName": "cal",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*4.184e-24",
        "u86": "(v)=>v*4.184e-21",
        "u87": "(v)=>v*4.184e-18",
        "u88": "(v)=>v*4.184e-15",
        "u89": "(v)=>v*4.184e-12",
        "u90": "(v)=>v*4.184e-09",
        "u91": "(v)=>v*4.184e-06",
        "u92": "(v)=>v*0.004184",
        "u93": "(v)=>v*0.04184",
        "u94": "(v)=>v*0.4184",
        "u95": "(v)=>v*4.184",
        "u96": "(v)=>v*41.84",
        "u97": "(v)=>v*418.4",
        "u98": "(v)=>v*4184",
        "u99": "(v)=>v*4184000",
        "u100": "(v)=>v*4184000000",
        "u101": "(v)=>v*4184000000000",
        "u102": "(v)=>v*4.184e+15",
        "u103": "(v)=>v*4.184e+18",
        "u104": "(v)=>v*4.184e+21",
        "u105": "(v)=>v*4.184e+24",
        "u519": "(v)=>v*0.001",
        "u520": "(v)=>v*1.16222222222222e-06",
        "u521": "(v)=>v*0.00396566683139092"
      },
      "description": "A calorie (cal) is a unit of energy equal to 4.184 joules. Calorie belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of calorie often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent calorie as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, calorie is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when calorie values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding calorie has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed calorie metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of calorie fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u519",
      "name": "kilocalorie",
      "shortName": "kcal",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*4.184e-21",
        "u86": "(v)=>v*4.184e-18",
        "u87": "(v)=>v*4.184e-15",
        "u88": "(v)=>v*4.184e-12",
        "u89": "(v)=>v*4.184e-09",
        "u90": "(v)=>v*4.184e-06",
        "u91": "(v)=>v*0.004184",
        "u92": "(v)=>v*4.184",
        "u93": "(v)=>v*41.84",
        "u94": "(v)=>v*418.4",
        "u95": "(v)=>v*4184",
        "u96": "(v)=>v*41840",
        "u97": "(v)=>v*418400",
        "u98": "(v)=>v*4184000",
        "u99": "(v)=>v*4184000000",
        "u100": "(v)=>v*4184000000000",
        "u101": "(v)=>v*4.184e+15",
        "u102": "(v)=>v*4.184e+18",
        "u103": "(v)=>v*4.184e+21",
        "u104": "(v)=>v*4.184e+24",
        "u105": "(v)=>v*4.184e+27",
        "u518": "(v)=>v*1000",
        "u520": "(v)=>v*0.00116222222222222",
        "u521": "(v)=>v*3.96566683139092"
      },
      "description": "A kilocalorie (kcal) is a unit of energy equal to 4184 joules. The kilo prefix denotes a factor of 10^3, so 1 kilocalorie equals 10^3 calories. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilocalorie belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilocalorie often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilocalorie as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilocalorie is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilocalorie values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilocalorie has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilocalorie metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilocalorie fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u520",
      "name": "kilowatt‑hour",
      "shortName": "kWh",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*3.6e-18",
        "u86": "(v)=>v*3.6e-15",
        "u87": "(v)=>v*3.6e-12",
        "u88": "(v)=>v*3.6e-09",
        "u89": "(v)=>v*3.6e-06",
        "u90": "(v)=>v*0.0036",
        "u91": "(v)=>v*3.6",
        "u92": "(v)=>v*3600",
        "u93": "(v)=>v*36000",
        "u94": "(v)=>v*360000",
        "u95": "(v)=>v*3600000",
        "u96": "(v)=>v*36000000",
        "u97": "(v)=>v*360000000",
        "u98": "(v)=>v*3600000000",
        "u99": "(v)=>v*3600000000000",
        "u100": "(v)=>v*3.6e+15",
        "u101": "(v)=>v*3.6e+18",
        "u102": "(v)=>v*3.6e+21",
        "u103": "(v)=>v*3.6e+24",
        "u104": "(v)=>v*3.6e+27",
        "u105": "(v)=>v*3.6e+30",
        "u518": "(v)=>v*860420.650095602",
        "u519": "(v)=>v*860.420650095602",
        "u521": "(v)=>v*3412.14163312794"
      },
      "description": "A kilowatt‑hour (kWh) is a unit of energy equal to 3600000 joules. The kilo prefix denotes a factor of 10^3, so 1 kilowatt‑hour equals 10^3 watt‑hours. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilowatt‑hour belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilowatt‑hour often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilowatt‑hour as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilowatt‑hour is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilowatt‑hour values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilowatt‑hour has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilowatt‑hour metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilowatt‑hour fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u521",
      "name": "British thermal unit",
      "shortName": "BTU",
      "categoryId": "c9",
      "conversions": {
        "u85": "(v)=>v*1.05505585262e-21",
        "u86": "(v)=>v*1.05505585262e-18",
        "u87": "(v)=>v*1.05505585262e-15",
        "u88": "(v)=>v*1.05505585262e-12",
        "u89": "(v)=>v*1.05505585262e-09",
        "u90": "(v)=>v*1.05505585262e-06",
        "u91": "(v)=>v*0.00105505585262",
        "u92": "(v)=>v*1.05505585262",
        "u93": "(v)=>v*10.5505585262",
        "u94": "(v)=>v*105.505585262",
        "u95": "(v)=>v*1055.05585262",
        "u96": "(v)=>v*10550.5585262",
        "u97": "(v)=>v*105505.585262",
        "u98": "(v)=>v*1055055.85262",
        "u99": "(v)=>v*1055055852.62",
        "u100": "(v)=>v*1055055852620",
        "u101": "(v)=>v*1.05505585262e+15",
        "u102": "(v)=>v*1.05505585262e+18",
        "u103": "(v)=>v*1.05505585262e+21",
        "u104": "(v)=>v*1.05505585262e+24",
        "u105": "(v)=>v*1.05505585262e+27",
        "u518": "(v)=>v*252.164400721797",
        "u519": "(v)=>v*0.252164400721797",
        "u520": "(v)=>v*0.000293071070172222"
      },
      "description": "A British thermal unit (BTU) is a unit of energy equal to 1055.055853 joules. British thermal unit belongs to the broader physical quantity of energy. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of British thermal unit often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent British thermal unit as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, British thermal unit is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when British thermal unit values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding British thermal unit has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed British thermal unit metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of British thermal unit fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u522",
      "name": "horsepower",
      "shortName": "hp",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*7.45699872e-22",
        "u107": "(v)=>v*7.45699872e-19",
        "u108": "(v)=>v*7.45699872e-16",
        "u109": "(v)=>v*7.45699872e-13",
        "u110": "(v)=>v*7.45699872e-10",
        "u111": "(v)=>v*7.45699872e-07",
        "u112": "(v)=>v*0.000745699872",
        "u113": "(v)=>v*0.745699872",
        "u114": "(v)=>v*7.45699872",
        "u115": "(v)=>v*74.5699872",
        "u116": "(v)=>v*745.699872",
        "u117": "(v)=>v*7456.99872",
        "u118": "(v)=>v*74569.9872",
        "u119": "(v)=>v*745699.872",
        "u120": "(v)=>v*745699872",
        "u121": "(v)=>v*745699872000",
        "u122": "(v)=>v*745699872000000",
        "u123": "(v)=>v*7.45699872e+17",
        "u124": "(v)=>v*7.45699872e+20",
        "u125": "(v)=>v*7.45699872e+23",
        "u126": "(v)=>v*7.45699872e+26",
        "u523": "(v)=>v*0.212036131589113"
      },
      "description": "A horsepower (hp) is a unit of power equal to 745.699872 watts. Horsepower belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of horsepower often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent horsepower as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, horsepower is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when horsepower values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding horsepower has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed horsepower metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of horsepower fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u523",
      "name": "ton of refrigeration",
      "shortName": "TR",
      "categoryId": "c20",
      "conversions": {
        "u106": "(v)=>v*3.5168528420667e-21",
        "u107": "(v)=>v*3.5168528420667e-18",
        "u108": "(v)=>v*3.5168528420667e-15",
        "u109": "(v)=>v*3.5168528420667e-12",
        "u110": "(v)=>v*3.5168528420667e-09",
        "u111": "(v)=>v*3.5168528420667e-06",
        "u112": "(v)=>v*0.0035168528420667",
        "u113": "(v)=>v*3.5168528420667",
        "u114": "(v)=>v*35.168528420667",
        "u115": "(v)=>v*351.68528420667",
        "u116": "(v)=>v*3516.8528420667",
        "u117": "(v)=>v*35168.528420667",
        "u118": "(v)=>v*351685.28420667",
        "u119": "(v)=>v*3516852.8420667",
        "u120": "(v)=>v*3516852842.0667",
        "u121": "(v)=>v*3516852842066.7",
        "u122": "(v)=>v*3.5168528420667e+15",
        "u123": "(v)=>v*3.5168528420667e+18",
        "u124": "(v)=>v*3.5168528420667e+21",
        "u125": "(v)=>v*3.5168528420667e+24",
        "u126": "(v)=>v*3.5168528420667e+27",
        "u522": "(v)=>v*4.71617734442457"
      },
      "description": "A ton of refrigeration (TR) is a unit of power equal to 3516.852842 watts. Ton of refrigeration belongs to the broader physical quantity of power. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of ton of refrigeration often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent ton of refrigeration as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, ton of refrigeration is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when ton of refrigeration values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding ton of refrigeration has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed ton of refrigeration metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of ton of refrigeration fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u524",
      "name": "revolutions per minute",
      "shortName": "rpm",
      "categoryId": "c12",
      "conversions": {
        "u211": "(v)=>v*1.66666666666667e-26",
        "u212": "(v)=>v*1.66666666666667e-23",
        "u213": "(v)=>v*1.66666666666667e-20",
        "u214": "(v)=>v*1.66666666666667e-17",
        "u215": "(v)=>v*1.66666666666667e-14",
        "u216": "(v)=>v*1.66666666666667e-11",
        "u217": "(v)=>v*1.66666666666667e-08",
        "u218": "(v)=>v*1.66666666666667e-05",
        "u219": "(v)=>v*0.000166666666666667",
        "u220": "(v)=>v*0.00166666666666667",
        "u221": "(v)=>v*0.0166666666666667",
        "u222": "(v)=>v*0.166666666666667",
        "u223": "(v)=>v*1.66666666666667",
        "u224": "(v)=>v*16.6666666666667",
        "u225": "(v)=>v*16666.6666666667",
        "u226": "(v)=>v*16666666.6666667",
        "u227": "(v)=>v*16666666666.6667",
        "u228": "(v)=>v*16666666666666.7",
        "u229": "(v)=>v*1.66666666666667e+16",
        "u230": "(v)=>v*1.66666666666667e+19",
        "u231": "(v)=>v*1.66666666666667e+22"
      },
      "description": "A revolutions per minute (rpm) is a unit of frequency equal to 0.01666666667 hertzs. Revolutions per minute belongs to the broader physical quantity of frequency. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of revolutions per minute often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent revolutions per minute as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, revolutions per minute is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when revolutions per minute values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding revolutions per minute has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed revolutions per minute metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of revolutions per minute fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u525",
      "name": "liters per minute",
      "shortName": "L/min",
      "categoryId": "c10",
      "conversions": {
        "u526": "(v)=>v*0.264172052358148"
      },
      "description": "A litre per minute (L/min) is a unit of volumetric flow rate representing one litre of fluid passing a point each minute. Liters per minute belongs to the broader physical quantity of flow. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of liters per minute often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent liters per minute as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, liters per minute is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when liters per minute values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding liters per minute has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed liters per minute metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of liters per minute fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u526",
      "name": "gallons per minute",
      "shortName": "GPM",
      "categoryId": "c10",
      "conversions": {
        "u525": "(v)=>v*3.785411784"
      },
      "description": "A gallon per minute (GPM) is a US customary unit of volumetric flow equal to one US liquid gallon (3.785 411 784 L) each minute. Gallons per minute belongs to the broader physical quantity of flow. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gallons per minute often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gallons per minute as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gallons per minute is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gallons per minute values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gallons per minute has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gallons per minute metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gallons per minute fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u527",
      "name": "gram per cubic centimeter",
      "shortName": "g/cm³",
      "categoryId": "c8",
      "conversions": {
        "u528": "(v)=>v*1000"
      },
      "description": "A gram per cubic centimeter (g/cm³) is a unit of density equal to 1000 kilogram per cubic meters. Gram per cubic centimeter belongs to the broader physical quantity of density. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of gram per cubic centimeter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent gram per cubic centimeter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, gram per cubic centimeter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when gram per cubic centimeter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding gram per cubic centimeter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed gram per cubic centimeter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of gram per cubic centimeter fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u528",
      "name": "kilogram per cubic meter",
      "shortName": "kg/m³",
      "categoryId": "c8",
      "conversions": {
        "u527": "(v)=>v*0.001"
      },
      "description": "The kilogram per cubic metre (kg/m³) is the SI derived unit of density, expressing mass per unit volume. The kilo prefix denotes a factor of 10^3, so 1 kilogram per cubic meter equals 10^3 gram per cubic meters. Such scaled magnitudes are primarily encountered in scientific and engineering contexts. Kilogram per cubic meter belongs to the broader physical quantity of density. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kilogram per cubic meter often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kilogram per cubic meter as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kilogram per cubic meter is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kilogram per cubic meter values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kilogram per cubic meter has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kilogram per cubic meter metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kilogram per cubic meter fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-prefix",
        "metric"
      ]
    },
    {
      "id": "u529",
      "name": "degree Celsius",
      "shortName": "°C",
      "categoryId": "c24",
      "conversions": {
        "u530": "(v)=>v+273.15",
        "u531": "(v)=>v*9/5+32"
      },
      "description": "The degree Celsius (°C) is a unit of temperature where 0 °C equals the freezing point of water and 100 °C its boiling point at 1 atm; it relates to kelvin via T(°C)=T(K)−273.15. Degree celsius belongs to the broader physical quantity of temperature. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of degree Celsius often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent degree Celsius as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, degree Celsius is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when degree Celsius values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding degree Celsius has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed degree Celsius metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of degree Celsius fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    },
    {
      "id": "u530",
      "name": "kelvin",
      "shortName": "K",
      "categoryId": "c24",
      "conversions": {
        "u529": "(v)=>v-273.15",
        "u531": "(v)=>((v-273.15)*9/5)+32"
      },
      "description": "The kelvin (K) is the SI base unit of thermodynamic temperature, defined by fixing the Boltzmann constant to 1.380 649×10⁻²³ J·K⁻¹. Kelvin belongs to the broader physical quantity of temperature. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of kelvin often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent kelvin as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, kelvin is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when kelvin values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding kelvin has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed kelvin metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of kelvin fosters shared understanding and supports reproducible results.",
      "standard": [
        "SI-base",
        "metric"
      ]
    },
    {
      "id": "u531",
      "name": "degree Fahrenheit",
      "shortName": "°F",
      "categoryId": "c24",
      "conversions": {
        "u529": "(v)=>(v-32)*5/9",
        "u530": "(v)=>((v-32)*5/9)+273.15"
      },
      "description": "The degree Fahrenheit (°F) is used chiefly in the United States; on this scale water freezes at 32 °F and boils at 212 °F (1 atm). Degree fahrenheit belongs to the broader physical quantity of temperature. It is commonly encountered in academic textbooks, engineering handbooks, and everyday technical conversations where precise quantitative communication matters. Practical measurement of degree Fahrenheit often involves traceable calibration chains linked to National Metrology Institutes, ensuring that values recorded on laboratory benches, factory floors, and embedded sensors are mutually compatible across the globe. For software developers and data scientists, numerical libraries typically represent degree Fahrenheit as floating‑point scalars, but domain‑aware code benefits from using strongly typed quantity classes or database columns with explicit unit metadata to avoid silent scale errors. In analytical work, degree Fahrenheit is frequently converted to other units within the same category through well‑defined multiplicative factors or affine relations. Care must be taken to preserve significant figures and manage rounding, particularly when degree Fahrenheit values span many orders of magnitude—as is common in scientific research and industrial monitoring. Historically, the terminology surrounding degree Fahrenheit has evolved alongside technological advances: standardisation committees periodically harmonise symbols, prefixes, and spelling to reduce ambiguity in international trade and scholarly literature. Modern digitised supply chains embed degree Fahrenheit metadata in XML, JSON, and binary OPC‑UA payloads, enabling automated quality control and real‑time dashboards. Whether the context is teaching first‑year students, specifying purchase orders, or tuning simulation parameters, a clear, rigorously documented description of degree Fahrenheit fosters shared understanding and supports reproducible results.",
      "standard": [
        "Other"
      ]
    }
  ]
}